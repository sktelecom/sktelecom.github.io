<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SKT Open Source – Blog</title><link>/blog/</link><description>Recent content in Blog on SKT Open Source</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><atom:link href="/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Blog: AVM 소송: LGPL-2.1 사용자 권리와 설치정보 제공 의무의 재조명</title><link>/blog/2025/20250113_lgpl_avm/</link><pubDate>Mon, 13 Jan 2025 00:00:00 +0000</pubDate><guid>/blog/2025/20250113_lgpl_avm/</guid><description>
&lt;img src="/blog/2025/20250113_lgpl_avm/featured_AVM_hue057e6f979f9a64cb5ea283ca40d1ee5_708439_640x0_resize_catmullrom_2.png" width="640" height="296"/>
&lt;blockquote>
&lt;p>본 글은 Ars Technica의 &lt;a href="https://arstechnica.com/gadgets/2025/01/suing-wi-fi-router-makers-remains-a-necessary-part-of-open-source-license-law/">&amp;ldquo;German router maker is latest company to inadvertently clarify the LGPL license&amp;rdquo;&lt;/a> 기사를 바탕으로 작성되었습니다. 해당 기사는 AVM과 Sebastian Steck 간의 소송에 대한 자세한 내용과 LGPL 라이선스 준수의 중요성을 다루고 있습니다.&lt;/p>
&lt;/blockquote>
&lt;h2 id="1-사건-개요">1. 사건 개요&lt;/h2>
&lt;p>2025년 1월 9일, Software Freedom Conservancy (SFC)는 독일의 네트워크 장비 제조업체 AVM을 상대로 제기한 소송이 마무리되었다고 &lt;a href="https://sfconservancy.org/news/2025/jan/09/avm-copyleft-lawsuit-resolved-with-install/">발표했습니다&lt;/a>. 이 소송의 핵심은 GNU Lesser General Public License (LGPL) 버전 2.1에 명시된 사용자의 권리, 특히 설치 정보 제공 의무에 관한 것이었습니다.&lt;/p>
&lt;p>&lt;img src="./featured_AVM.png" alt="">&lt;/p>
&lt;p>Sebastian Steck이라는 독일의 소프트웨어 개발자가 2021년 5월 AVM의 라우터를 구매한 후, AVM이 제공한 소스 코드로는 수정된 소프트웨어를 라우터에 재설치할 수 없다는 사실을 발견했습니다. Steck은 AVM에게 &amp;ldquo;uClibc, libblkid, libexif 및 libosip2 라이브러리의 완전한 소스 코드와 컴파일 및 설치 스크립트 제공&amp;quot;을 요구했습니다. AVM이 이를 시정하지 않자 Steck은 2023년 7월 베를린 법원에 소송을 제기했습니다.&lt;/p>
&lt;p>소송 결과, 독일 법원은 AVM에게 Steck의 변호사 비용을 지불하도록 결정했습니다. AVM은 이 결정에 대해 항소하지 않기로 결정했습니다. 결정문은 소송 비용 부담을 명시하고 있으며, 이는 오픈소스 라이선스 준수 문제의 경제적 가치와 중요성을 반영합니다.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Disclaimer:&lt;/strong>&lt;/p>
&lt;p>&lt;em>본 글은 법률 전문가가 작성한 것이 아니며, 법적 근거로 사용될 수 없습니다. 라이선스 및 법적 문제와 관련된 구체적인 상황에 대해서는 반드시 법률 전문가의 조언을 구하시기 바랍니다. 또한 이 글은 공개된 정보를 바탕으로 작성되었으며, 소송 당사자들의 입장을 모두 반영하지 않을 수 있습니다. 판결의 전체 내용과 맥락은 원문을 참고하시기 바랍니다.&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;h2 id="2-소송의-배경과-경과">2. 소송의 배경과 경과&lt;/h2>
&lt;h3 id="배경">배경&lt;/h3>
&lt;p>독일의 소프트웨어 개발자 Sebastian Steck은 2021년 5월, AVM사의 인기 제품인 &lt;a href="https://en.avm.de/products/fritzbox/fritzbox-4020/">Fritz!Box 4020&lt;/a> 라우터를 구입했습니다. Steck은 이 라우터의 펌웨어에 사용된 소스 코드를 요청했는데, 여기서 문제가 발생했습니다. AVM이 제공한 소스 코드로는 라우터에 수정된 소프트웨어를 다시 설치할 수 없었던 것입니다.&lt;/p>
&lt;h3 id="소송의-법적-근거">소송의 법적 근거&lt;/h3>
&lt;p>이 소송의 중요한 특징은 Sebastian Steck이 LGPL-2.1 소프트웨어의 저작권자가 아님에도 불구하고 소송을 제기할 수 있었다는 점입니다. 이는 LGPL-2.1 라이선스가 제3자를 위한 계약의 성격을 가지고 있기 때문입니다. &lt;a href="https://sfconservancy.org/static/docs/avm-Complaint_Klageschrift_EN.pdf">소장&lt;/a>에 따르면 사용자도 LGPL-2.1에 따라 소스 코드를 받을 권리를 갖게 됩니다:&lt;/p>
&lt;p>&amp;ldquo;This license agreement represents a genuine contract in favor of third parties in accordance with Section 328 of the German Civil Code (BGB), namely in favor of the users who receive the software in object code and, in accordance with the wording of the LGPL-2.1 license conditions to be handed over to them, have a direct right to the transfer of the complete corresponding source code.&amp;rdquo;&lt;/p>
&lt;p>이러한 법적 근거는 오픈소스 소프트웨어 사용자의 권리를 크게 강화합니다. 제조업체가 라이선스 의무를 제대로 이행하지 않을 경우, 저작권자뿐만 아니라 일반 사용자도 법적 조치를 취할 수 있게 되었습니다.&lt;/p>
&lt;h3 id="소송-경과">소송 경과&lt;/h3>
&lt;ol>
&lt;li>2021년 5월 7일: Steck이 AVM에 Fritz!Box 4020의 펌웨어 버전 6.83 소스 코드를 요청&lt;/li>
&lt;li>2021년 5월 11일: AVM 자회사가 소스 코드 다운로드 링크 제공&lt;/li>
&lt;li>2021년 5월 14일: Steck이 제공된 소스 코드의 불완전성을 지적하고 시정 요구&lt;/li>
&lt;li>2023년 1월 12일: Steck의 변호인이 AVM에 법적 상황을 설명하고 소스 코드 시정 요구&lt;/li>
&lt;li>2023년 3월 9일: Steck이 펌웨어 버전 7.02의 소스 코드도 추가로 요청&lt;/li>
&lt;li>2023년 7월 27일: Steck이 베를린 지방법원에 소송 제기&lt;/li>
&lt;li>소송 제기 수개월 후: AVM이 Steck에게 요청받은 모든 소스 코드를 제공. &amp;ldquo;라이브러리 설치를 제어하는 스크립트&amp;quot;도 포함&lt;/li>
&lt;li>2025년 1월 9일: 독일 법원이 AVM에게 Steck의 변호사 비용을 지불하도록 결정. 이 결정은 소송 비용에 대한 결정을 포함하며, AVM은 이 결정에 대해 항소하지 않기로 함&lt;/li>
&lt;/ol>
&lt;h3 id="원고의-주장">원고의 주장&lt;/h3>
&lt;p>Sebastian Steck이 소장에서 제기한 AVM의 LGPL-2.1 위반 사항들은 다음과 같습니다:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>컴파일 및 설치 스크립트 미제공: AVM이 처음에 제공한 소스 코드에는 LGPL-2.1에서 요구하는 컴파일 및 설치 스크립트가 빠져 있었습니다. 이 스크립트는 소스 코드를 실행 가능한 프로그램으로 변환하고, 그 프로그램을 기기에 설치하는 데 필요한 중요한 요소입니다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>환경 변수 정보 미제공: 컴파일 과정에 필수적인 KERNEL_LAYOUT 등의 환경 변수 설정 정보가 제공되지 않았습니다. 환경 변수는 프로그램이 실행되는 환경을 설정하는 중요한 정보로, 이것이 없으면 소스 코드를 제대로 컴파일할 수 없습니다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>영구 설치 불가능: AVM이 제공한 정보로는 수정된 라이브러리를 Fritz!Box에 영구적으로 설치할 수 없었습니다. Steck은 이것이 사용자가 자신의 기기에 수정된 소프트웨어를 지속적으로 사용할 수 있어야 한다는 LGPL-2.1의 핵심 요구사항을 위반하는 것이라고 주장했습니다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>펌웨어 이미지 생성 불가능: 제공된 소스 코드로는 Fritz!Box에 설치 가능한 펌웨어 이미지를 만들 수 없었습니다. 펌웨어 이미지는 라우터의 운영 체제와 기능을 담고 있는 파일로, 이를 생성할 수 없다는 것은 사실상 소프트웨어를 수정하고 재설치할 수 없다는 것을 의미합니다.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Steck은 이러한 사항들이 LGPL-2.1 라이선스의 핵심 원칙인 &amp;lsquo;사용자의 소프트웨어 자유&amp;rsquo;를 침해한다고 주장했습니다. 그의 주장에 따르면, 소스 코드를 제공하는 것만으로는 충분하지 않고, 사용자가 그 코드를 실제로 수정하고 기기에 다시 설치할 수 있어야 합니다.&lt;/p>
&lt;blockquote>
&lt;p>[참고] SFC가 공개한 &lt;a href="https://sfconservancy.org/static/docs/avm-Complaint_Klageschrift_EN.pdf">소장(Complaint)&lt;/a> 중 일부:&lt;/p>
&lt;p>&amp;ldquo;The information required for the reinstallation of the compiled program libraries on the Fritz!Box (&amp;ldquo;installation script&amp;rdquo;) was also deliberately withheld from the plaintiff. Upon request, the plaintiff only received information that could be used to load the libraries in dispute into the working memory (RAM). However, this is not a sufficient installation on the Fritz!Box because the copy is only created temporarily, meaning &amp;ldquo;fleetingly [volatile].&amp;rdquo; When the Fritz!Box is switched off and restarted, the modified versions of the LGPL 2.1 libraries would no longer be present on the device, and the versions created by the defendant would be used instead. This is diametrically opposed to the purpose of the LGPL-2.1, namely, to be able to customize and reinstall the software.”&lt;/p>
&lt;/blockquote>
&lt;h2 id="3-결정문-요지">3. 결정문 요지&lt;/h2>
&lt;p>결정문은 소송 비용에 대한 결정을 포함하고 있으며, AVM이 Steck의 변호사 비용을 지불하도록 명시하고 있습니다. 이는 오픈소스 라이선스 준수 문제의 경제적 가치와 중요성을 반영합니다. AVM은 이 결정에 대해 항소하지 않기로 결정했습니다.&lt;/p>
&lt;h2 id="4-시사점-및-다양한-해석">4. 시사점 및 다양한 해석&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>LGPL-2.1의 설치 정보 제공 의무&lt;/strong>:
소장에서 AVM은 LGPL-2.1 라이선스에 따라 설치 정보를 제공해야 한다는 주장이 제기되었습니다. 이는 소스 코드를 실제로 사용할 수 있도록 필요한 스크립트나 정보를 포함합니다. 결정문에는 이러한 내용이 명시적으로 포함되어 있지 않지만, 소송 과정에서 피고에게 소송 비용을 부담시키는 결정은 사용자 권리 강화와 설치 정보 제공의 중요성을 반영합니다. 다만, 이번 사건에서 요구된 설치정보는 GPL/LGPL-3.0 수준이 아닌, GPL/LGPL v2에서 요구하는 설치 스크립트 수준으로 보입니다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>사용자의 법적 권리 강화&lt;/strong>:
이번 결정으로 오픈소스 소프트웨어 사용자들이 직접 라이선스 위반에 대해 법적 조치를 취할 수 있게 되었습니다. 이는 오픈소스 커뮤니티의 힘을 강화하고, 기업들의 라이선스 준수를 더욱 촉진할 것으로 예상됩니다. 특히, 제3자 수익자(3rd party beneficiary) 논리가 독일에서도 인정되었다는 점은 중요한 진전입니다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>오픈소스 생태계의 자정 능력 향상&lt;/strong>:
저작권자뿐만 아니라 일반 사용자도 라이선스 준수를 요구할 수 있게 됨으로써, 오픈소스 생태계의 자정 능력이 크게 향상될 것으로 보입니다. 이는 오픈소스 소프트웨어의 자유와 협력적인 개발 환경을 유지하는 데 기여합니다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>기업의 책임 범위 확대&lt;/strong>:
기업들은 이제 저작권자뿐만 아니라 모든 사용자에 대해 LGPL-2.1 라이선스 의무를 이행해야 합니다. 이는 기업의 책임 범위를 확대하고, 더욱 철저한 라이선스 준수를 요구하게 될 것입니다. 이를 통해 오픈소스 소프트웨어 사용의 투명성과 신뢰성이 높아질 수 있습니다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>오픈소스 라이선스 준수의 중요성 재확인&lt;/strong>:
기업들은 오픈소스 소프트웨어 사용 시 해당 라이선스 조건을 더욱 철저히 준수해야 합니다. LGPL이라고 해서 의무가 가벼운 것이 아님을 인식해야 합니다. 다만, 이번 결정으로 GPL 설치정보 관련 법적 해석에 큰 변화가 있었다고 보기는 어렵습니다. AVM이 자발적으로 소스 코드와 설치 스크립트를 제공한 것일 뿐, 법원이 GPL/LGPL의 해석에 대해 판결을 내린 것은 아닙니다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>다양한 해석의 존재&lt;/strong>:
이 사건에 대해서는 다양한 해석이 존재합니다. Software Freedom Conservancy(SFC)가 이 사건의 의의를 다소 과장하고 있다는 견해도 있습니다. 결정문 자체는 GPL/LGPL의 해석에 대한 명확한 판단을 제시하지 않았기 때문입니다. 이러한 다양한 해석은 오픈소스 라이선스와 사용자 권리에 대한 논의가 여전히 진행 중임을 보여줍니다.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>이러한 시사점과 다양한 해석을 고려할 때, 기업들은 오픈소스 라이선스 준수를 위한 내부 프로세스를 개선하고, 사용자들의 요구에 더 빠르고 적극적으로 대응해야 할 것입니다. 향후 유사한 사건들을 통해 이러한 쟁점들이 더욱 명확히 정립될 것으로 기대됩니다.&lt;/p></description></item><item><title>Blog: To Mine or Not To Mine: 독일 법원이 AI 시대의 저작권 딜레마에 내린 판결</title><link>/blog/2024/20241106_germany_ai_lawsuit/</link><pubDate>Wed, 06 Nov 2024 00:00:00 +0000</pubDate><guid>/blog/2024/20241106_germany_ai_lawsuit/</guid><description>
&lt;img src="/blog/2024/20241106_germany_ai_lawsuit/featured_Laion_hu3afdbfa018f4dee187234e8dd9900394_60642_640x0_resize_q75_catmullrom.jpeg" width="640" height="336"/>
&lt;p>이 글은 JBB Rechtsanwält:innen의 블로그 포스트 &amp;ldquo;To Mine or Not To Mine&amp;rdquo;(&lt;a href="https://jbb.de/to-mine-or-not-to-mine/">https://jbb.de/to-mine-or-not-to-mine/&lt;/a>)를 기반으로 작성하였으며, 텍스트 및 데이터 마이닝(TDM)에 관한 최근 독일 법원의 판결을 설명하고 관련 지식을 공유하기 위한 목적으로 공개합니다.&lt;/p>
&lt;blockquote>
&lt;p>단, 저는 법률 전문가가 아니며, 이 내용은 법적인 근거가 될 수 없음에 유의하여 주시기 바랍니다. 라이선스 및 법적 문제와 관련된 구체적인 상황에 대해서는 반드시 법률 전문가의 조언을 구하시기 바랍니다.&lt;/p>
&lt;/blockquote>
&lt;h2 id="배경">배경&lt;/h2>
&lt;p>2021년, 독일의 사진작가 로버트 크네슈케(Robert Kneschke)는 자신의 사진이 &lt;a href="https://laion.ai/">LAION&lt;/a>(Large-scale Artificial Intelligence Open Network)이라는 비영리 단체가 만든 AI 학습용 데이터셋에 무단으로 포함되었다는 사실을 알게 되었습니다.&lt;/p>
&lt;p>&lt;img src="./featured_Laion.jpeg" alt="">&lt;/p>
&lt;p>AI 학습용 데이터셋이란 인공지능 모델을 훈련시키기 위해 사용되는 대규모 데이터 모음을 말합니다. &amp;lsquo;&lt;a href="https://laion.ai/blog/laion-5b/">LAION-5B&lt;/a>&amp;lsquo;라는 데이터셋은 약 58억 개의 이미지와 그에 해당하는 설명 텍스트로 구성되어 있었습니다. 이러한 데이터셋은 AI가 이미지를 인식하고 이해하는 능력을 향상시키는 데 사용됩니다.&lt;/p>
&lt;h3 id="commoncrawl">CommonCrawl&lt;/h3>
&lt;p>이 사건의 핵심에는 &amp;lsquo;&lt;a href="https://commoncrawl.org/">CommonCrawl&lt;/a>&amp;lsquo;이라는 비영리 조직이 중요한 역할을 합니다. CommonCrawl은 정기적으로 인터넷의 &amp;lsquo;백업&amp;rsquo; 또는 &amp;lsquo;이미지&amp;rsquo;를 생성합니다. 이들은 링크를 통해 접근 가능한 모든 웹페이지를 텍스트 형태로 복제합니다.&lt;/p>
&lt;ul>
&lt;li>CommonCrawl의 데이터 수집 방식:
&lt;ol>
&lt;li>웹페이지의 텍스트 내용을 복제합니다.&lt;/li>
&lt;li>이미지, 비디오 등 비텍스트 데이터는 직접 저장하지 않습니다.&lt;/li>
&lt;li>대신 이러한 콘텐츠에 대한 링크를 포함한 웹페이지의 소스 코드를 저장합니다.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;p>CommonCrawl은 이렇게 수집한 데이터셋을 &lt;a href="https://commoncrawl.org/latest-crawl">자체 웹사이트에서 제공&lt;/a>합니다. 이 데이터셋은 웹페이지의 &amp;lsquo;소스 코드&amp;rsquo;를 포함하고 있어, 연구자들이 인터넷의 구조와 내용을 분석하는 데 사용할 수 있습니다.&lt;/p>
&lt;h3 id="laion의-데이터-처리-과정">LAION의 데이터 처리 과정&lt;/h3>
&lt;p>LAION은 CommonCrawl이 제공하는 이 데이터셋을 활용하여 &lt;a href="https://laion.ai/blog/laion-5b/#distributed-processing-of-common-crawl">자체적인 이미지 데이터셋을 생성&lt;/a>했습니다. 이 과정은 다음과 같습니다:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>CommonCrawl 데이터셋에서 이미지 링크 추출: LAION은 CommonCrawl 데이터에서 이미지 파일에 대한 링크만을 필터링했습니다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>추가 정보 수집: LAION은 단순히 이미지 링크만 수집하는 것이 아니라, 각 이미지에 대한 추가 정보도 수집하고자 했습니다. 이 추가 정보에는 다음과 같은 것들이 &lt;a href="https://laion.ai/blog/laion-5b/#watermark-and-safety-inference">포함됩니다&lt;/a>:&lt;/p>
&lt;ul>
&lt;li>이미지 설명&lt;/li>
&lt;li>워터마크 유무&lt;/li>
&lt;li>청소년 유해 콘텐츠 포함 여부&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>이미지 &lt;a href="https://laion.ai/blog/laion-5b/#distributed-downloading-of-the-images">다운로드&lt;/a> 및 분석: 이러한 추가 정보를 얻기 위해, LAION은 수집한 링크를 통해 실제 이미지를 다운로드하고, 자체 개발한 AI 모델을 사용하여 이미지를 분석했습니다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>데이터셋 구성: 최종적으로 LAION이 만든 데이터셋은 일종의 표 형태로, 각 행에는 이미지 링크와 해당 이미지에 대한 추가 정보가 포함되어 있습니다.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>이러한 과정을 통해 LAION은 AI 학습에 활용할 수 있는 대규모 이미지 데이터셋을 구축했습니다. 그러나 이 과정에서 저작권 문제가 제기되었고, 이는 결국 법적 분쟁으로 이어졌습니다.&lt;/p>
&lt;p>크네슈케는 자신의 사진이 포함된 웹사이트의 이용약관에 자동화된 콘텐츠 다운로드를 금지하는 조항이 있음에도 불구하고, LAION이 자신의 사진을 무단으로 다운로드하고 분석한 것이 저작권 침해라고 주장했습니다. 이에 대해 LAION은 자신들의 활동이 과학 연구 목적의 텍스트 및 데이터 마이닝(TDM)에 해당하므로 저작권법 제60d조에 따라 허용된다고 반박했습니다.&lt;/p>
&lt;p>이 사건은 AI 시대에 데이터 수집과 저작권 보호 사이의 균형을 어떻게 맞출 것인가에 대한 중요한 법적, 윤리적 질문을 제기하게 되었습니다.&lt;/p>
&lt;h2 id="소송의-시작">소송의 시작&lt;/h2>
&lt;p>2023년 4월 27일, 크네슈케는 함부르크 지방법원에 LAION을 상대로 저작권 침해 소송을 제기했습니다. 저작권 침해란 저작권자의 허락 없이 저작물을 사용하는 행위를 말합니다. 크네슈케는 자신의 사진이 허락 없이 사용된 것에 대해 이의를 제기하고, 데이터셋에서 자신의 이미지를 제거할 것을 요구했습니다. 이는 AI 시대에 창작자의 권리를 어떻게 보호할 것인가에 대한 중요한 질문을 제기했습니다.&lt;/p>
&lt;h2 id="법적-쟁점">법적 쟁점&lt;/h2>
&lt;p>이 소송의 핵심 쟁점은 다음과 같습니다:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>텍스트 및 데이터 마이닝(TDM) 예외 규정의 적용 범위&lt;/strong>:
TDM 예외 규정이란 저작권법에서 특정 조건 하에 저작권자의 허락 없이도 저작물을 사용할 수 있도록 하는 규정을 말합니다. 이는 연구나 기술 발전을 위해 대량의 데이터를 분석할 필요가 있는 경우에 적용됩니다. 이 소송에서는 AI 학습을 위한 데이터셋 생성이 이 예외 규정에 해당하는지가 쟁점이었습니다. 예를 들어, 연구 목적으로 웹사이트의 텍스트를 자동으로 수집하고 분석하는 것이 저작권 침해인지, 아니면 이 예외에 해당하여 허용되는지를 판단해야 했습니다.&lt;/li>
&lt;li>&lt;strong>비상업적 과학 연구 목적의 정의&lt;/strong>:
LAION이 주장하는 &amp;lsquo;비상업적 과학 연구&amp;rsquo;가 정확히 무엇을 의미하는지, 그리고 그들의 활동이 이에 해당하는지가 논점이었습니다.&lt;/li>
&lt;li>&lt;strong>저작권자의 &amp;lsquo;opt-out&amp;rsquo; 권리의 유효성&lt;/strong>:
&amp;lsquo;Opt-out&amp;rsquo;이란 저작권자가 자신의 작품이 TDM에 사용되는 것을 거부할 수 있는 권리를 말합니다. 이 권리를 어떻게 행사할 수 있고, 어떤 형태의 거부 의사 표시가 유효한지가 쟁점이 되었습니다.&lt;/li>
&lt;/ol>
&lt;h2 id="eu-저작권-지침의-영향">EU 저작권 지침의 영향&lt;/h2>
&lt;p>2019년 EU는 디지털 단일 시장 저작권 지침(DSM Directive)을 채택했고, 이는 2021년 6월 7일부터 EU 회원국들에서 시행되었습니다. 이 지침은 텍스트 및 데이터 마이닝에 대한 두 가지 예외 규정을 포함하고 있었습니다:&lt;/p>
&lt;ol>
&lt;li>과학 연구 목적의 TDM (제3조)
&lt;ul>
&lt;li>대상: 연구 기관 및 문화유산 기관에만 적용됩니다.&lt;/li>
&lt;li>목적: 오직 과학 연구를 위한 목적으로만 허용됩니다.&lt;/li>
&lt;li>권한: 저작권자의 사전 허가가 필요 없으며, 어떤 형태의 보상도 요구되지 않습니다.&lt;/li>
&lt;li>접근 조건: 합법적으로 접근할 수 있는 데이터에만 적용됩니다(예: 구독, 라이선스, 온라인 무료 콘텐츠 등)&lt;/li>
&lt;li>제한: 민간 기업의 결정적인 영향력 하에 있는 기관은 제외됩니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>일반적 목적의 TDM (제4조)
&lt;ul>
&lt;li>대상: 모든 개인이나 단체에 적용됩니다.&lt;/li>
&lt;li>목적: 모든 목적(상업적 목적 포함)의 TDM에 적용됩니다.&lt;/li>
&lt;li>권한: 저작권자가 명시적으로 권리를 유보하지 않은 경우에만 적용됩니다.&lt;/li>
&lt;li>접근 조건: 합법적으로 접근할 수 있는 데이터에만 적용됩니다.
&lt;ul>
&lt;li>Opt-out 메커니즘: 저작권자는 &amp;lsquo;적절한 방식&amp;rsquo;으로 권리를 유보할 수 있습니다(예: 온라인 콘텐츠의 경우 기계가 읽을 수 있는 형식).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>데이터 보관: TDM 목적으로 복제물을 보관할 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>독일은 이 지침을 국내법에 반영하여 저작권법을 다음과 같이 개정했습니다:&lt;/p>
&lt;ul>
&lt;li>제44b조: 일반적 목적의 TDM에 대한 예외 규정을 신설했습니다. 이 조항은 상업적 목적을 포함한 모든 목적의 TDM을 허용하지만, 저작권자가 명시적으로 거부(opt-out)할 수 있는 권리를 인정합니다.&lt;/li>
&lt;li>제60d조: 과학 연구 목적의 TDM에 대한 기존 예외 규정을 확대했습니다. 이 조항은 비상업적 과학 연구 목적의 TDM에 대해 더 넓은 자유를 부여하며, 저작권자의 opt-out 권리를 인정하지 않습니다.&lt;/li>
&lt;/ul>
&lt;h2 id="판결">판결&lt;/h2>
&lt;p>2024년 9월 27일, 함부르크 지방법원은 LAION의 행위가 저작권 침해에 해당하지 않는다고 판결했습니다. 주요 판결 내용은 다음과 같습니다:&lt;/p>
&lt;ol>
&lt;li>LAION의 데이터셋 생성 활동은 독일 저작권법 제60d조에 따른 비상업적 과학 연구 목적의 TDM에 해당한다.&lt;/li>
&lt;li>LAION이 상업 기업과 협력 관계에 있다는 사실만으로는 비상업적 성격이 부정되지 않는다.&lt;/li>
&lt;li>웹사이트 이용약관에 명시된 자연어로 된 TDM 금지 문구도 &amp;lsquo;기계가 읽을 수 있는 형식&amp;rsquo;의 opt-out으로 간주될 수 있다&lt;/li>
&lt;/ol>
&lt;h2 id="판결의-의의">판결의 의의&lt;/h2>
&lt;ol>
&lt;li>&lt;strong>TDM 예외 규정의 광범위한 해석&lt;/strong>:
&lt;ul>
&lt;li>법원은 LAION의 이미지 데이터셋 구축 활동을 비상업적 과학 연구 목적의 TDM으로 인정했습니다.&lt;/li>
&lt;li>이는 AI 학습 데이터셋 구축과 같은 현대적 연구 방법도 TDM 예외에 포함될 수 있음을 의미합니다.&lt;/li>
&lt;li>이러한 해석은 AI 연구와 개발에 더 넓은 자유를 제공할 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>비상업적 연구의 정의 확장&lt;/strong>:
&lt;ul>
&lt;li>LAION이 상업 기업과 협력 관계에 있다는 사실이 비상업적 성격을 부정하지 않는다고 판단했습니다.&lt;/li>
&lt;li>이는 학계와 산업계 간의 협력 연구에 대한 법적 보호를 강화할 수 있습니다.&lt;/li>
&lt;li>순수 학술 연구뿐만 아니라 산학 협력 프로젝트도 TDM 예외의 혜택을 받을 수 있게 되었습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>opt-out 메커니즘에 대한 새로운 해석&lt;/strong>:
비록 이 사건에서 LAION의 활동이 비상업적 과학 연구 목적의 TDM으로 인정되어 opt-out이 적용되지 않았지만, 이 판단은 더 넓은 맥락에서 중요한 의미를 갖습니다:
&lt;ul>
&lt;li>법적 해석의 유연성: 법원은 &amp;lsquo;기계가 읽을 수 있는 형식&amp;rsquo;이라는 요건을 기술 발전에 맞춰 유연하게 해석했습니다. 이는 법률이 빠르게 변화하는 기술 환경에 적응할 수 있음을 보여줍니다.&lt;/li>
&lt;li>향후 상업적 TDM에 대한 영향: 비록 이 사건에서는 적용되지 않았지만, 이 해석은 상업적 목적의 TDM에 대해서는 중요한 의미를 가질 수 있습니다. 상업적 TDM의 경우 저작권자의 opt-out이 유효하기 때문입니다.&lt;/li>
&lt;li>저작권자를 위한 지침: 이 판결은 저작권자들에게 자신의 콘텐츠를 TDM에서 제외하고 싶다면, 웹사이트 이용약관에 명확한 언어로 이를 명시할 수 있다는 지침을 제공합니다.&lt;/li>
&lt;li>기술 기업들에 대한 영향: AI 및 데이터 마이닝 기업들은 이제 웹사이트의 이용약관을 더욱 주의 깊게 검토해야 할 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>저작권법과 기술 혁신 간의 균형&lt;/strong>:
&lt;ul>
&lt;li>이 판결은 저작권 보호와 기술 혁신 촉진 사이의 균형을 모색하려는 시도로 볼 수 있습니다.&lt;/li>
&lt;li>저작권자의 권리를 완전히 무시하지 않으면서도, AI와 데이터 과학 발전에 필요한 법적 공간을 제공했습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="향후-전망">향후 전망&lt;/h2>
&lt;p>이 판결에 대해 크네슈케는 항소할 수 있으며, 사안의 중요성을 고려할 때 상급 법원이나 유럽사법재판소(CJEU)까지 갈 가능성도 있습니다. 또한 이 판결은 다른 EU 회원국들의 유사 사건에도 영향을 미칠 것으로 보입니다.&lt;/p>
&lt;p>이 사건은 AI 시대의 저작권 보호와 기술 혁신 사이의 균형을 어떻게 맞출 것인가에 대한 중요한 법적, 윤리적 질문을 제기하고 있습니다. 앞으로 이 분야에 대한 더 많은 논의와 법적 판단이 이어질 것으로 예상됩니다.&lt;/p>
&lt;h2 id="국내-ai-기업에-대한-시사점">국내 AI 기업에 대한 시사점&lt;/h2>
&lt;p>이번 판결은 독일의 사례이지만, 국내 AI 기업들에게도 중요한 시사점을 제공합니다:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>상업적 목적의 TDM&lt;/strong>: 이번 판결은 비상업적 연구에 초점을 맞추고 있지만, 상업적 목적의 TDM도 일정 조건 하에서 허용될 수 있음을 시사합니다. 다만, 상업적 TDM의 경우 저작권자의 opt-out 권리를 존중해야 할 것입니다.&lt;/li>
&lt;li>&lt;strong>데이터 수집 방식&lt;/strong>: AI 기업들은 데이터 수집 시 웹사이트의 이용약관을 주의 깊게 확인해야 합니다. TDM을 명시적으로 금지하는 조항이 있다면, 이를 존중해야 할 수 있습니다.&lt;/li>
&lt;li>&lt;strong>연구 협력&lt;/strong>: 비영리 연구 기관과의 협력을 통해 데이터셋을 구축하는 방식을 고려해볼 수 있습니다. 이는 법적 리스크를 줄이면서도 필요한 데이터를 확보하는 방법이 될 수 있습니다.&lt;/li>
&lt;li>&lt;strong>투명성과 윤리&lt;/strong>: AI 모델 개발 과정에서의 데이터 사용에 대해 투명성을 유지하고, 윤리적 가이드라인을 수립하는 것이 중요합니다. 이는 잠재적인 법적 분쟁을 예방하는 데 도움이 될 수 있습니다.&lt;/li>
&lt;li>&lt;strong>국내법 개정 대비&lt;/strong>: EU의 저작권 지침과 유사한 법률이 국내에서도 논의될 가능성이 있습니다. AI 기업들은 이러한 법적 변화에 대비하여 자사의 데이터 수집 및 사용 정책을 미리 점검하고 필요한 경우 조정할 필요가 있습니다.&lt;/li>
&lt;/ol>
&lt;p>이 사건은 AI 시대의 저작권 보호와 기술 혁신 사이의 균형을 어떻게 맞출 것인가에 대한 중요한 법적, 윤리적 질문을 제기하고 있습니다. 국내 AI 기업들도 이러한 글로벌 트렌드를 주시하며, 책임 있는 AI 개발을 위한 노력을 지속해야 할 것입니다.&lt;/p></description></item><item><title>Blog: 중국 저작권 침해 소송 사례 “GPL 기반 소프트웨어 제품은 어차피 소스 공개 의무가 있으니 배껴도 되는 것 아닌가요?</title><link>/blog/2024/20240923_gpl_opennwrt/</link><pubDate>Mon, 23 Sep 2024 00:00:00 +0000</pubDate><guid>/blog/2024/20240923_gpl_opennwrt/</guid><description>
&lt;img src="/blog/2024/20240923_gpl_opennwrt/featured_openwrt_hu3e99f0adf550f3926011d46835205d06_24140_640x0_resize_catmullrom_2.png" width="640" height="564"/>
&lt;p>오픈소스 소프트웨어의 사용이 널리 퍼지면서, 이와 관련된 법적 문제들도 점점 더 복잡해지고 있습니다. 특히 GPL(GNU General Public License)과 같은 copyleft 라이선스를 사용하는 오픈소스 프로젝트를 기반으로 한 2차적 저작물의 저작권 문제는 많은 기업들에게 골치 아픈 주제입니다. 최근 중국에서 있었던 한 소프트웨어 저작권 침해 소송은 이러한 문제에 대한 중요한 시사점을 제공합니다.&lt;/p>
&lt;h2 id="소송-당사자">소송 당사자&lt;/h2>
&lt;ul>
&lt;li>원고: Wangjing Technology(왕징)&lt;/li>
&lt;li>피고:
&lt;ul>
&lt;li>Yibang Communication Technology(이방)&lt;/li>
&lt;li>Qi&amp;rsquo;ao Network Technology(치아오)&lt;/li>
&lt;li>그리고 3명의 개인(Liu, Wu, Xie)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="사건의-개요">사건의 개요&lt;/h2>
&lt;p>2009년, 왕징은 &amp;lsquo;OfficeTen&amp;rsquo;이라는 융합 통신 스마트 게이트웨이 제품을 개발했습니다.&lt;/p>
&lt;p>&lt;img src="./1800.png" alt="">&lt;/p>
&lt;blockquote>
&lt;p>OfficeTen SDG 1800 by Wangjing - &lt;a href="http://www.cncr-it.com/product_detail.php?sid=26&amp;amp;cid=133&amp;amp;id=388">http://www.cncr-it.com/product_detail.php?sid=26&amp;amp;cid=133&amp;amp;id=388&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>이 제품에 내장된 &amp;lsquo;OfficeTen1800&amp;rsquo; 소프트웨어는 오픈소스 프레임워크인 &amp;lsquo;OpenWRT&amp;rsquo;를 기반으로 개발되었으며, 2013년 국가판권국에서 저작권 등록 증서를 취득했습니다.&lt;/p>
&lt;p>이 소프트웨어는 두 가지 구성 요소로 이루어져 있었습니다: OpenWRT를 기반으로 한 기본 시스템 소프트웨어와 상위 계층 기능 소프트웨어입니다. 왕징은 후자가 OpenWRT 시스템과는 &amp;ldquo;독립적이고 별개의 프로그램&amp;quot;이라고 주장했습니다.&lt;/p>
&lt;p>&lt;img src="./featured_openwrt.png" alt="">&lt;/p>
&lt;p>2015년, 왕징은 경쟁사인 이방의 제품이 자사의 저작권을 침해했다고 의심하여 조사를 시작했습니다. 조사 결과, 왕징의 전 직원들이 &amp;lsquo;OfficeTen1800&amp;rsquo;의 소스코드를 치아오에 제공하여 매우 유사한 소프트웨어를 개발하도록 도왔고, 이 소프트웨어가 이방의 제품에 사용된 것으로 밝혀졌습니다.&lt;/p>
&lt;p>감정 결과, 왕징의 &amp;lsquo;OfficeTen1800&amp;rsquo;과 이방 제품에 사용된 소프트웨어 간의 비오픈소스 코드 동일 비율이 90.2%에 달했고, 이방의 제품에서 왕징의 특수 마크가 발견되었습니다.&lt;/p>
&lt;h2 id="소송의-전개">소송의 전개&lt;/h2>
&lt;p>2018년 7월, 왕징은 이방과 치아오를 상대로 소프트웨어 저작권 침해 소송을 제기했습니다. 왕징은 침해 중지와 300만 위안의 손해배상을 요구했습니다.&lt;/p>
&lt;h3 id="피고-측의-주장">피고 측의 주장&lt;/h3>
&lt;p>이방과 치아오는 침해 사실을 부인하며 다음과 같이 주장했습니다:&lt;/p>
&lt;ol>
&lt;li>&amp;lsquo;OfficeTen1800&amp;rsquo;은 &amp;lsquo;OpenWRT&amp;rsquo;라는 오픈소스 프레임워크를 기반으로 개발되었다.&lt;/li>
&lt;li>&amp;lsquo;OpenWRT&amp;rsquo;는 GPLv2 라이선스의 제약을 받는다.&lt;/li>
&lt;li>왕징가 &amp;lsquo;OfficeTen1800&amp;rsquo;의 소스코드를 공개하지 않은 것은 GPLv2 위반이다.&lt;/li>
&lt;li>따라서 왕징은 해당 소프트웨어에 대한 저작권을 주장할 수 없다.&lt;/li>
&lt;/ol>
&lt;h2 id="법원의-판단">법원의 판단&lt;/h2>
&lt;h3 id="1심-판결">1심 판결&lt;/h3>
&lt;p>쑤저우 중급법원은 다음과 같이 판단했습니다:&lt;/p>
&lt;ol>
&lt;li>개발자가 오픈소스 제품을 수정하거나 2차 개발한 경우에도, 독창적인 작품을 생성했다면 해당 작품에 대한 저작권을 가진다.&lt;/li>
&lt;li>GPLv2 계약에 따라 모든 관련 소프트웨어가 공개되어야 한다고 단정할 수 없다.&lt;/li>
&lt;/ol>
&lt;p>이에 따라 법원은 이방과 치아오의 침해 행위를 인정하고, 침해 중지와 50만 위안(약 70,961 달러, 약10억)의 손해배상을 명령했습니다.&lt;/p>
&lt;h3 id="최고인민법원의-판결">최고인민법원의 판결&lt;/h3>
&lt;p>이방과 치아오가 항소했으나, 최고인민법원은 원심 판결을 유지했습니다. 최고인민법원의 주요 판단 내용은 다음과 같습니다:&lt;/p>
&lt;ol>
&lt;li>이 사건의 당사자들은 &amp;lsquo;OpenWRT&amp;rsquo; 시스템 소프트웨어의 권리자가 아니므로, GPLv2 계약 준수 여부를 심리할 수 없다.&lt;/li>
&lt;li>왕징의 GPLv2 계약 위반 여부와 저작권 침해에 대한 배상 청구는 별개의 문제이다.&lt;/li>
&lt;li>소프트웨어 개발자의 독창적인 기여를 기반으로 한 저작권을 불합리하게 박탈하거나 제한해서는 안 된다.&lt;/li>
&lt;/ol>
&lt;h2 id="판결의-의의">판결의 의의&lt;/h2>
&lt;p>이 판결은 오픈소스 소프트웨어를 기반으로 한 2차적 저작물의 저작권 보호에 대해 중요한 시사점을 제공합니다.&lt;/p>
&lt;ol>
&lt;li>&lt;strong>독창성의 인정&lt;/strong>: 법원은 오픈소스 소프트웨어를 기반으로 한 2차적 저작물이라도 개발자의 독창적인 기여가 있다면 저작권 보호의 대상이 될 수 있다고 판단했습니다.&lt;/li>
&lt;li>&lt;strong>라이선스 위반과 저작권 보호의 분리&lt;/strong>: GPLv2 라이선스 위반 여부와 저작권 침해에 대한 배상 청구를 별개의 문제로 보았습니다. 이는 라이선스 위반이 있더라도 저작권 자체는 유효할 수 있음을 의미합니다.&lt;/li>
&lt;li>&lt;strong>권리 남용 방지&lt;/strong>: 피고 측의 &amp;ldquo;어차피 소스 공개 의무가 있으니 배껴도 된다&amp;quot;는 주장을 받아들이지 않음으로써, GPL 라이선스를 악용한 무분별한 복제를 방지했습니다.&lt;/li>
&lt;li>&lt;strong>오픈소스 생태계 보호&lt;/strong>: 2차적 저작물에 대한 저작권을 인정함으로써, 오픈소스 기반 혁신을 장려하고 건전한 오픈소스 생태계 발전을 도모했습니다.&lt;/li>
&lt;/ol>
&lt;h2 id="wordpress테마-사건과의-유사성">WordPress 테마 사건과의 유사성&lt;/h2>
&lt;p>칼스루에 고등법원의 WordPress 테마 사건(2020년 11월 13일 판결, 참조번호 6 U 60/20)에서도 GPLv2가 방어 논리로 주장되었습니다. 이 사건에서 법원은 다음과 같은 중요한 판단을 내렸습니다:&lt;/p>
&lt;ol>
&lt;li>(주장된) 파생 저작물 저작권 소유자가 해당 저작물을 GPLv2에 따라 라이선스했는지 여부에 따라 구분이 이루어져야 합니다.&lt;/li>
&lt;li>Copyleft 위반의 단순한 가능성만으로는 저작권 주장에 대항하기에 충분하지 않습니다.&lt;/li>
&lt;li>GPLv2의 집행은 라이선서의 책임이며, 사용자가 소프트웨어를 &amp;ldquo;GPL 라이선스&amp;quot;라고 선언하는 것만으로는 집행될 수 없습니다.&lt;/li>
&lt;li>카피레프트 효과가 자동으로 GPL 라이선싱으로 이어지지는 않습니다. 이는 파생 저작물의 저자가 적극적으로 수행해야 하는 행위입니다.&lt;/li>
&lt;/ol>
&lt;p>이러한 판단은 중국 최고인민법원의 판결과 맥을 같이 하며, GPL 라이선스와 2차적 저작물의 권리에 대한 국제적인 법적 해석의 흐름을 보여줍니다.&lt;/p>
&lt;h2 id="기업의-오픈소스-관리에-대한-시사점">기업의 오픈소스 관리에 대한 시사점&lt;/h2>
&lt;p>이 판결은 기업의 오픈소스 관리자들에게 다음과 같은 중요한 시사점을 제공합니다:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>철저한 라이선스 준수&lt;/strong>: GPL 등 copyleft 라이선스를 사용하는 오픈소스 소프트웨어를 활용할 때는 해당 라이선스의 요구사항을 철저히 준수해야 합니다.&lt;/li>
&lt;li>&lt;strong>독창적 기여의 중요성&lt;/strong>: 오픈소스 프로젝트를 기반으로 개발할 때도 독창적인 기여를 명확히 하고 문서화하는 것이 중요합니다.&lt;/li>
&lt;li>&lt;strong>소스코드 관리&lt;/strong>: 오픈소스 코드와 자체 개발 코드를 명확히 구분하고 관리해야 합니다.&lt;/li>
&lt;li>&lt;strong>법적 리스크 평가&lt;/strong>: 오픈소스 사용 시 발생할 수 있는 법적 리스크를 사전에 평가하고 대비해야 합니다.&lt;/li>
&lt;li>&lt;strong>지속적인 모니터링&lt;/strong>: 자사 제품과 경쟁사 제품의 유사성을 지속적으로 모니터링하여 잠재적인 저작권 침해를 조기에 발견해야 합니다.&lt;/li>
&lt;/ol>
&lt;h2 id="결론">결론&lt;/h2>
&lt;p>이번 중국 법원의 판결과 독일 법원의 유사 판결은 &amp;ldquo;GPL 기반 소프트웨어 제품은 어차피 소스 공개 의무가 있으니 배껴도 되는 것 아닌가요?&amp;ldquo;라는 오해를 명확히 해소했습니다. GPL 라이선스를 사용하는 오픈소스 소프트웨어를 기반으로 한 2차적 저작물이라도, 개발자의 독창적인 기여가 있다면 저작권 보호의 대상이 될 수 있습니다.&lt;/p>
&lt;p>이는 오픈소스 소프트웨어를 활용한 혁신을 장려하면서도, 무분별한 복제와 저작권 침해를 방지하는 균형 잡힌 접근법이라고 볼 수 있습니다. 기업들은 이러한 법적 해석을 참고하여 오픈소스 정책을 수립하고, 라이선스 준수와 독창적 개발 사이의 균형을 잡아나가야 할 것입니다.&lt;/p>
&lt;p>오픈소스 소프트웨어의 사용이 더욱 보편화되는 현재, 이러한 법적 판단은 앞으로 더 많은 국가에서 참고될 것으로 예상됩니다. 따라서 기업의 오픈소스 관리자들은 이러한 법적 동향을 지속적으로 모니터링하고, 자사의 오픈소스 정책에 반영해 나가야 할 것입니다.&lt;/p>
&lt;p>마지막으로, 이번 판결은 오픈소스 커뮤니티와 상업적 이용자 모두에게 중요한 메시지를 전달합니다. 오픈소스 정신을 존중하면서도 개발자의 노력과 창의성을 인정하는 것, 그리고 라이선스를 준수하면서도 혁신을 추구하는 것이 건강한 소프트웨어 생태계를 만드는 길임을 다시 한 번 상기시켜 줍니다.&lt;/p>
&lt;h2 id="참고문서">참고문서&lt;/h2>
&lt;ol>
&lt;li>2024-09-20 OpenWRT, the GPL and the Supreme People&amp;rsquo;s Court of China: &lt;a href="https://www.ifross.org/?q=node/1676">https://www.ifross.org/?q=node/1676&lt;/a>&lt;/li>
&lt;li>2023-12-29 오픈 소스 코드 기반 2차적 저작물의 저작권 분쟁 사례: &lt;a href="https://www.copyright.or.kr/information-materials/trend/International-copyright-center/download.do?brdctsno=52544&amp;amp;brdctsfileno=22493">https://www.copyright.or.kr/information-materials/trend/International-copyright-center/download.do?brdctsno=52544&amp;amp;brdctsfileno=22493&lt;/a>&lt;/li>
&lt;/ol>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>&lt;em>이 글은 Perplexity (&lt;a href="https://www.perplexity.ai/">https://www.perplexity.ai/&lt;/a>)와 함께 작성하였습니다.&lt;/em>&lt;/p>
&lt;p>&lt;em>SKT고객은 Perplexicy Pro를 1년간 무료로 이용할 수 있습니다.: &lt;a href="https://perplexity.sktadotevent.com/">https://perplexity.sktadotevent.com/&lt;/a>&lt;/em>&lt;/p>
&lt;p>&lt;img src="./perplexity.png" alt="">&lt;/p>
&lt;/div></description></item><item><title>Blog: 또 다시 Elasticsearch 라이선스 변경, 기업의 대응 방안은?</title><link>/blog/2024/20240906_elastic_agpl/</link><pubDate>Fri, 06 Sep 2024 00:00:00 +0000</pubDate><guid>/blog/2024/20240906_elastic_agpl/</guid><description>
&lt;img src="/blog/2024/20240906_elastic_agpl/featured_original-elastic-logos_hu36e0488bdc3c30af55ee75cb1e6a7ff9_76478_640x0_resize_catmullrom_2.png" width="640" height="239"/>
&lt;h2 id="서론-elasticsearch-라이선스-배경">서론: Elasticsearch 라이선스 배경&lt;/h2>
&lt;p>Elasticsearch는 오픈소스 프로젝트로 시작했으며, 그동안 여러 번의 라이선스 정책 변경을 겪었습니다. 처음에는 &lt;strong>Apache 2.0 라이선스&lt;/strong> 하에 배포되었지만, 2021년 Elastic은 &lt;strong>Elastic License 2.0&lt;/strong>과 &lt;strong>Server Side Public License&lt;/strong>로 라이선스를 변경했습니다. 이후 2024년 8월 30일에는 다시 &lt;strong>AGPL-3.0&lt;/strong>을 추가하는 발표(&lt;a href="https://www.elastic.co/kr/blog/elasticsearch-is-open-source-again">Elasticsearch is Open Source, Again&lt;/a>)를 하면서 주목을 받고 있습니다.&lt;/p>
&lt;p>&lt;img src="./featured_original-elastic-logos.png" alt="">&lt;/p>
&lt;p>이러한 변화는 오픈소스 커뮤니티뿐만 아니라 이를 사용하는 기업들에도 큰 영향을 미치고 있습니다. 이번 글에서는 Elasticsearch가 왜 다시 라이선스 정책을 변경했는지, 그리고 이를 사용하는 기업들이 어떻게 대응해야 하는지 살펴보겠습니다.&lt;/p>
&lt;hr>
&lt;h2 id="1-elasticsearch-라이선스-변경의-역사">1. Elasticsearch 라이선스 변경의 역사&lt;/h2>
&lt;h3 id="11-apache-20에서-elastic-license-20으로의-전환">1.1 Apache 2.0에서 Elastic License 2.0으로의 전환&lt;/h3>
&lt;p>Elasticsearch는 처음에 &lt;strong>Apache 2.0&lt;/strong> 라이선스를 사용했으나, 2021년 1월 Elastic은 &lt;strong>Elastic License 2.0&lt;/strong>과 &lt;strong>SSPL&lt;/strong>로 전환했습니다. Elastic이 이러한 변화를 선택한 이유는 클라우드 제공자, 특히 &lt;strong>AWS&lt;/strong>와의 경쟁 때문입니다. AWS는 Elasticsearch를 기반으로 한 자체 서비스를 제공하면서도, 이에 대한 기여나 비용 지불 없이 수익을 창출했기 때문에 Elastic은 이를 견제하고자 라이선스를 변경했습니다.&lt;/p>
&lt;p>&lt;strong>Elastic License 2.0&lt;/strong>은 소스 코드를 공개하지만 상업적인 클라우드 서비스에서의 사용을 제한하는 라이선스로, Elastic의 기술적 자산을 보호하는 수단으로 활용되었습니다. &lt;strong>AWS&lt;/strong>는 이에 대응해 &lt;strong>&lt;a href="https://opensearch.org/">OpenSearch&lt;/a>&lt;/strong> 프로젝트를 시작하며 Apache 2.0 라이선스를 계속 유지했습니다.&lt;/p>
&lt;p>이에 대해서는 이전 블로그, &amp;ldquo;&lt;strong>&lt;a href="https://openchain-project.github.io/OpenChain-KWG/blog/2021/03/28/elastic-license-2.0-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EC%A7%84%ED%99%94%ED%95%98%EB%8A%94-%EC%98%A4%ED%94%88%EC%86%8C%EC%8A%A4-%EB%9D%BC%EC%9D%B4%EC%84%A0%EC%8A%A4/">Elastic License 2.0 그리고 진화하는 오픈소스 라이선스&lt;/a>&lt;/strong>&amp;ldquo;에서 자세히 다룬 바 있습니다.&lt;/p>
&lt;h3 id="12-elastic-license-20는-오픈소스-라이선스가-아니다">1.2 Elastic License 2.0는 오픈소스 라이선스가 아니다&lt;/h3>
&lt;p>그러나 Elastic License 2.0은 **Open Source Initiative (OSI)**에서 인정하는 오픈소스 라이선스가 아니었습니다. 이는 오픈소스 커뮤니티에서 논란을 불러일으켜습니다. Elastic의 결정은 오픈소스의 자유로운 사용과 상업적 이익 사이에서 갈등을 불러일으켰고, 기업들이 오픈소스를 도입할 때 라이선스 문제에 대한 경각심을 높이는 계기가 되었습니다.&lt;/p>
&lt;hr>
&lt;h2 id="2-elasticsearch-agpl-30-도입-배경">2. Elasticsearch, AGPL-3.0 도입 배경&lt;/h2>
&lt;h3 id="21-agpl-30의-주요-특징">2.1 AGPL-3.0의 주요 특징&lt;/h3>
&lt;p>2024년 8월, Elastic은 GNU Affero General Public License v3 (AGPL-3.0)를 Elasticsearch와 Kibana의 무료 부분에 대한 라이선스 옵션으로 &lt;a href="https://www.elastic.co/kr/blog/elasticsearch-is-open-source-again">추가한다고 발표&lt;/a>했습니다. AGPL-3.0은 네트워크를 통한 소프트웨어 사용에 대해서도 소스 코드를 공개해야 한다는 점에서 기존 &lt;strong>GPL&lt;/strong> 라이선스와 차별화됩니다.&lt;/p>
&lt;p>AGPL-3.0의 &lt;strong>주요 특징&lt;/strong>은 다음과 같습니다:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>소스 코드 공개 의무&lt;/strong>: 네트워크를 통해 소프트웨어를 제공할 때, 사용자가 요청하면 소스 코드를 제공해야 합니다.&lt;/li>
&lt;li>&lt;strong>강력한 카피레프트&lt;/strong>: AGPL-3.0은 소프트웨어의 변경 사항도 동일한 라이선스 하에 배포되도록 요구합니다.&lt;/li>
&lt;/ul>
&lt;p>AGPL-3.0에 대한 자세한 가이드는 여기에서 참고하실 수 있습니다.: &lt;a href="https://sktelecom.github.io/guide/use/obligation/agpl-3.0/">AGPL-3.0 가이드&lt;/a>&lt;/p>
&lt;h3 id="22-agpl-30으로-복귀한-이유">2.2 AGPL-3.0으로 복귀한 이유&lt;/h3>
&lt;p>Elastic이 &lt;strong>AGPL-3.0&lt;/strong>을 선택한 이유는 다음과 같습니다:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>오픈소스 커뮤니티와의 관계 회복&lt;/strong>: 이전의 라이선스 변경으로 인해 커뮤니티의 신뢰를 잃었기 때문에, 이를 회복하고자 OSI가 인정하는 AGPL-3.0으로 돌아섰습니다. Elastic의 창립자이자 CTO인 Shay Banon은 &amp;ldquo;우리는 항상 오픈소스의 정신과 그것이 가능하게 하는 명확성과 투명성을 강하게 믿어왔습니다&amp;quot;라고 &lt;a href="https://www.elastic.co/pricing/faq/licensing">말했습니다&lt;/a>.&lt;/li>
&lt;li>&lt;strong>사용자들에게 더 많은 자유와 유연성 제공&lt;/strong>: AGPL-3.0은 OSI가 승인한 라이선스로, 사용자들에게 더 많은 권리를 제공합니다.&lt;/li>
&lt;li>&lt;strong>신뢰도 향상&lt;/strong>: OSI가 승인한 라이선스를 사용함으로써 오픈소스 커뮤니티 내에서의 신뢰도를 높이고자 했습니다.&lt;/li>
&lt;/ul>
&lt;p>Elastic의 이 결정은 커뮤니티와의 관계 회복을 시도하는 동시에, 여전히 상업적 사용을 통제하려는 전략적 선택으로 볼 수 있습니다.&lt;/p>
&lt;p>그러나 일부 전문가들은 이러한 변화가 커뮤니티의 신뢰를 빠르게 회복할 수 있을지에 대해 의문을 제기하고 &lt;a href="https://www.infoq.com/news/2024/09/elastic-open-source-agpl/">있습니다&lt;/a>. 또한, OpenSearch의 성공이 Elastic의 이번 결정에 영향을 미쳤을 수 있다는 분석도 &lt;a href="https://www.computing.co.uk/news/4352646/elastic-returns-open-source-fold">있습니다&lt;/a>.&lt;/p>
&lt;hr>
&lt;h2 id="3-오픈소스-라이선스-변화의-시대-기업은-어떻게-해야-하나">3. 오픈소스 라이선스 변화의 시대, 기업은 어떻게 해야 하나?&lt;/h2>
&lt;p>이러한 라이선스 변경은 오픈소스를 사용하는 기업들에게 중요한 시사점을 제공합니다. 기업들은 오픈소스 소프트웨어의 라이선스 변경 가능성을 항상 염두에 두고, 이에 대한 대응 전략을 수립해야 할 필요성이 있습니다.&lt;/p>
&lt;h3 id="31-라이선스-변경에-대한-모니터링">3.1 라이선스 변경에 대한 모니터링&lt;/h3>
&lt;p>오픈소스 라이선스의 잦은 변경은 기업에게 새로운 법적 리스크를 안겨줄 수 있습니다. 이를 예방하기 위해서는 지속적인 &lt;strong>모니터링&lt;/strong>이 필요하며, 이를 위한 전담 팀 구성 및 관리 시스템 도입이 중요합니다. &lt;strong>오픈소스 가버넌스&lt;/strong>를 통해 기업 전반에서 오픈소스 라이선스를 준수하도록 체계적인 프로세스를 구축해야 합니다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>전담 팀 구성&lt;/strong>: 법무팀과 기술팀이 협력하여 라이선스 변화를 추적하는 전담 팀을 구성합니다.&lt;/li>
&lt;li>&lt;strong>오픈소스 가버넌스&lt;/strong>: 기업 내부적으로 오픈소스 사용에 대한 명확한 정책과 가이드라인을 수립합니다.&lt;/li>
&lt;li>&lt;strong>자동화 도구 활용&lt;/strong>: 소프트웨어 구성 분석(SCA) 도구를 사용하여 사용 중인 오픈소스 컴포넌트와 라이선스를 자동으로 추적합니다.&lt;/li>
&lt;/ul>
&lt;h3 id="32-교육과-내부-가이드라인-마련">3.2 교육과 내부 가이드라인 마련&lt;/h3>
&lt;p>기업 내부에서 오픈소스를 사용하는 개발자들이 라이선스 변경 사항을 이해하고 대응할 수 있도록 &lt;strong>교육&lt;/strong>과 &lt;strong>가이드라인&lt;/strong>을 마련해야 합니다. 이를 통해 라이선스 위반으로 인한 법적 분쟁을 줄일 수 있습니다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>정기적인 교육 프로그램&lt;/strong>: 개발자와 관리자를 대상으로 오픈소스 라이선스에 대한 정기적인 교육을 실시합니다.&lt;/li>
&lt;li>&lt;strong>라이선스 가이드 제공&lt;/strong>: 주요 오픈소스 라이선스의 특징과 준수 사항을 정리한 가이드를 제작하여 배포합니다.&lt;/li>
&lt;li>&lt;strong>사내 전문가 양성&lt;/strong>: 오픈소스 라이선스 전문가를 양성하여 내부 자문 역할을 수행하도록 합니다.&lt;/li>
&lt;/ul>
&lt;h3 id="33-클라우드-환경에서의-agpl-30-대응">3.3 클라우드 환경에서의 AGPL-3.0 대응&lt;/h3>
&lt;p>&lt;strong>클라우드 서비스&lt;/strong>를 운영하는 기업들은 AGPL-3.0에 대한 법적 의무를 명확히 이해하고, 소스 코드 공개 요청에 대비할 수 있는 체계를 마련해야 합니다. 이러한 대응 전략에는 내부 검토 과정 강화와 대체 라이선스 고려가 포함될 수 있습니다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>내부 검토 강화&lt;/strong>: 클라우드 서비스에 AGPL-3.0 소프트웨어를 도입하기 전 법적, 기술적 검토를 철저히 수행합니다.&lt;/li>
&lt;li>&lt;strong>대체 솔루션 검토&lt;/strong>: AGPL-3.0 라이선스의 제약이 부담스러운 경우, 대체 오픈소스 솔루션이나 상용 솔루션을 고려합니다.&lt;/li>
&lt;li>&lt;strong>라이선스 준수 자동화&lt;/strong>: 클라우드 환경에서 사용되는 소프트웨어의 라이선스 준수 여부를 자동으로 확인하는 시스템을 구축합니다.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>참고로, AGPL-3.0은 오픈소스를 재배포하거나 외부로 서비스하지 않고 내부에서만 사용할 경우 소스 공개 등의 요구사항을 부과하지 않습니다.
따라서, 사내 용도로만 사용할 경우, 소스 코드 공개 등의 의무 준수 없이 자유롭게 사용 가능합니다.
단, 기업 내 AGPL-3.0 오픈소스의 사용 범위와 그에 대한 의무에 대한 명확한 판단은 사내 법무팀과 논의하시기 바랍니다.&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="결론-오픈소스-라이선스-변화-기업의-전략적-대응">결론: 오픈소스 라이선스 변화, 기업의 전략적 대응&lt;/h2>
&lt;p>Elasticsearch가 다시 AGPL-3.0으로 돌아가는 결정은 오픈소스 생태계 내에서 큰 의미를 지닙니다. 이는 상업적 이익과 오픈소스 정신 간의 균형을 찾으려는 Elastic의 노력일 뿐만 아니라, 오픈소스를 사용하는 모든 기업에게도 중요한 시사점을 제공합니다.&lt;/p>
&lt;p>기업은 오픈소스 라이선스의 변화에 적극적으로 대응해야 하며, 이를 통해 법적 리스크를 줄이고, 기술적 기회를 극대화할 수 있는 전략을 마련해야 합니다. AGPL-3.0과 같은 강력한 카피레프트 라이선스는 클라우드 시대에서 더욱 주목받을 것이며, 기업은 이에 맞춰 내부 시스템을 강화하고, 오픈소스 관리 체계를 발전시켜야 할 것입니다.&lt;/p>
&lt;p>오픈소스 라이선스의 변화는 피할 수 없는 현실이지만, 이를 기회로 삼아 적절히 대응하는 기업은 경쟁 우위를 확보할 수 있습니다. 체계적인 오픈소스 관리 전략을 통해 법적 리스크를 최소화하고 기술적 이점을 극대화함으로써, 기업은 오픈소스 생태계 내에서 지속 가능한 성장을 이룰 수 있을 것입니다.&lt;/p>
&lt;hr>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>&lt;em>이 글은 Perplexity(&lt;a href="https://www.perplexity.ai/">https://www.perplexity.ai/&lt;/a>)와 함께 작성하였습니다.&lt;/em>&lt;/p>
&lt;p>&lt;em>SKT고객은 Perplexicy Pro를 1년간 무료로 이용할 수 있습니다.: &lt;a href="https://perplexity.sktadotevent.com/">https://perplexity.sktadotevent.com/&lt;/a>&lt;/em>&lt;/p>
&lt;p>&lt;img src="./image.png" alt="image.png">&lt;/p>
&lt;/div></description></item><item><title>Blog: SPDX 3.0 소개와 기업 도입 전략</title><link>/blog/2024/20240906_spdx_30/</link><pubDate>Fri, 06 Sep 2024 00:00:00 +0000</pubDate><guid>/blog/2024/20240906_spdx_30/</guid><description>
&lt;img src="/blog/2024/20240906_spdx_30/featured_SPDX30_hub7b7c8ee75d62f837b6290fa14d325ee_84057_640x0_resize_catmullrom_2.png" width="640" height="360"/>
&lt;h2 id="1-spdx-30-소개">1. SPDX 3.0 소개&lt;/h2>
&lt;p>SPDX(Software Package Data Exchange)는 소프트웨어 구성 요소, 라이선스, 저작권 및 보안 정보를 표준화된 방식으로 전달하기 위한 오픈 표준입니다. SPDX 3.0은 이 표준의 최신 버전으로, 2024년 4월에 출시되었으며 소프트웨어 공급망의 투명성과 보안을 크게 향상시키는 중요한 업데이트입니다[2].&lt;/p>
&lt;p>&lt;img src="./featured_SPDX30.png" alt="">&lt;/p>
&lt;h3 id="spdx의-정의와-목적">SPDX의 정의와 목적&lt;/h3>
&lt;p>SPDX는 Linux Foundation의 프로젝트로, 소프트웨어 패키지와 관련된 중요 정보를 공유하기 위한 표준 형식을 제공합니다. 주요 목적은 다음과 같습니다:&lt;/p>
&lt;ul>
&lt;li>소프트웨어 구성 요소의 투명성 제공&lt;/li>
&lt;li>라이선스 컴플라이언스 개선&lt;/li>
&lt;li>보안 취약점 관리 지원&lt;/li>
&lt;li>소프트웨어 공급망의 신뢰성 향상&lt;/li>
&lt;/ul>
&lt;h3 id="spdx-30의-주요-변경사항">SPDX 3.0의 주요 변경사항&lt;/h3>
&lt;p>SPDX 3.0은 이전 버전에 비해 큰 변화를 가져왔습니다:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>모듈화된 구조&lt;/strong>: SPDX 3.0은 코어 모델과 여러 프로필로 구성되어 있어, 다양한 사용 사례에 유연하게 대응할 수 있습니다.&lt;/li>
&lt;li>&lt;strong>확장성 개선&lt;/strong>: 새로운 버전은 사용자 정의 필드와 관계를 쉽게 추가할 수 있어, 미래의 요구사항에 대응할 수 있습니다.&lt;/li>
&lt;li>&lt;strong>다양한 프로필 지원&lt;/strong>: 소프트웨어, 보안, 라이선스, 빌드, AI/ML 등 다양한 프로필을 제공하여 특정 도메인의 요구사항을 충족시킵니다.&lt;/li>
&lt;li>&lt;strong>향상된 데이터 모델&lt;/strong>: 엔티티 간의 관계를 더 명확하게 표현할 수 있어, 복잡한 소프트웨어 구조를 더 정확하게 기술할 수 있습니다.&lt;/li>
&lt;/ol>
&lt;h3 id="spdx-30의-중요성">SPDX 3.0의 중요성&lt;/h3>
&lt;p>SPDX 3.0은 다음과 같은 이유로 기업의 오픈소스 관리에 중요합니다:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>SBOM 생성 표준화&lt;/strong>: 소프트웨어 부품 목록(SBOM) 생성을 위한 표준 형식을 제공하여, 조직 간 정보 교환을 용이하게 합니다.&lt;/li>
&lt;li>&lt;strong>규제 준수 지원&lt;/strong>: 미국 NTIA의 SBOM 최소 요구사항을 충족하며, 다양한 국제 표준 및 규제에 부합합니다.&lt;/li>
&lt;li>&lt;strong>보안 강화&lt;/strong>: CVE 정보와의 통합을 통해 취약점 관리를 개선하고, 소프트웨어 공급망 보안을 강화합니다.&lt;/li>
&lt;li>&lt;strong>글로벌 표준화&lt;/strong>: ISO/IEC 5962:2021로 채택되어 국제적으로 인정받는 표준이 되었습니다[2].&lt;/li>
&lt;/ol>
&lt;p>SPDX 3.0은 소프트웨어 개발 및 배포 과정에서 투명성, 보안, 컴플라이언스를 크게 향상시키는 강력한 도구입니다. 기업의 오픈소스 관리자는 이 표준을 이해하고 적용함으로써, 조직의 소프트웨어 관리 프로세스를 현대화하고 리스크를 줄일 수 있습니다.&lt;/p>
&lt;p>Citations: &lt;br>
[1] &lt;a href="https://fossa.com/blog/understanding-using-spdx-license-identifiers-license-expressions/">https://fossa.com/blog/understanding-using-spdx-license-identifiers-license-expressions/&lt;/a>&lt;br>
[2] &lt;a href="https://www.linuxfoundation.org/press/spdx-3-revolutionizes-software-management-in-systems-with-enhanced-functionality-and-streamlined-use-cases">https://www.linuxfoundation.org/press/spdx-3-revolutionizes-software-management-in-systems-with-enhanced-functionality-and-streamlined-use-cases&lt;/a>&lt;br>
[3] &lt;a href="https://fossa.com/learn/spdx">https://fossa.com/learn/spdx&lt;/a>&lt;br>
[4] &lt;a href="https://fossa.com/blog/sbom-examples-explained/">https://fossa.com/blog/sbom-examples-explained/&lt;/a>&lt;br>
[5] &lt;a href="https://ossna2023.sched.com/">https://ossna2023.sched.com&lt;/a>&lt;br>
[6] &lt;a href="https://ossna2023.sched.com/list/descriptions/">https://ossna2023.sched.com/list/descriptions/&lt;/a>&lt;br>
[7] &lt;a href="https://fossa.com/blog/spdx-3-0/">https://fossa.com/blog/spdx-3-0/&lt;/a>&lt;br>&lt;/p>
&lt;h2 id="2-spdx-30의-핵심-기능">2. SPDX 3.0의 핵심 기능&lt;/h2>
&lt;p>SPDX 3.0은 소프트웨어 패키지 데이터 교환의 최신 버전으로, 이전 버전에 비해 크게 개선된 기능을 제공합니다. 주요 핵심 기능은 다음과 같습니다:&lt;/p>
&lt;h3 id="모듈화된-구조">모듈화된 구조&lt;/h3>
&lt;p>SPDX 3.0은 모듈화된 구조를 도입하여 유연성과 확장성을 크게 향상시켰습니다[1][5]. 이 구조는 다음과 같은 요소로 구성됩니다:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>코어 모델&lt;/strong>: 모든 SPDX 문서의 기본이 되는 핵심 요소들을 정의합니다.&lt;/li>
&lt;li>&lt;strong>프로필&lt;/strong>: 특정 사용 사례에 맞춘 추가 정보와 기능을 제공합니다.&lt;/li>
&lt;/ul>
&lt;p>이러한 모듈화된 접근 방식은 사용자가 필요한 정보만을 선택적으로 사용할 수 있게 하여, 복잡성을 줄이고 효율성을 높입니다.&lt;/p>
&lt;h3 id="확장성-개선">확장성 개선&lt;/h3>
&lt;p>SPDX 3.0은 사용자 정의 필드와 관계를 쉽게 추가할 수 있도록 설계되었습니다[5]. 이는 다음과 같은 이점을 제공합니다:&lt;/p>
&lt;ul>
&lt;li>새로운 기술과 요구사항에 빠르게 대응 가능&lt;/li>
&lt;li>산업별 특수한 요구사항을 쉽게 통합 가능&lt;/li>
&lt;li>미래의 소프트웨어 생태계 변화에 유연하게 적응 가능&lt;/li>
&lt;/ul>
&lt;h3 id="다양한-사용-사례-지원">다양한 사용 사례 지원&lt;/h3>
&lt;p>SPDX 3.0은 6가지 주요 프로필을 통해 다양한 사용 사례를 지원합니다[7]:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>보안 프로필&lt;/strong>: 취약점 정보와 보안 관련 메타데이터를 포함&lt;/li>
&lt;li>&lt;strong>라이선스 프로필&lt;/strong>: 상세한 라이선스 정보와 컴플라이언스 데이터 제공&lt;/li>
&lt;li>&lt;strong>AI 프로필&lt;/strong>: AI 모델 훈련 및 특성화 관련 정보 포함&lt;/li>
&lt;li>&lt;strong>데이터셋 프로필&lt;/strong>: 데이터셋의 출처와 특성 정보 제공&lt;/li>
&lt;li>&lt;strong>소프트웨어 패키징 프로필&lt;/strong>: 패키지 구조와 의존성 정보 포함&lt;/li>
&lt;li>&lt;strong>빌드 프로세스 프로필&lt;/strong>: 소프트웨어 빌드 과정에 대한 상세 정보 제공&lt;/li>
&lt;/ol>
&lt;p>이러한 프로필들은 소프트웨어 엔지니어, 보안 전문가, 법률 및 규정 준수 전문가들이 SPDX를 더 쉽게 사용할 수 있도록 돕습니다[7].&lt;/p>
&lt;h3 id="향상된-데이터-모델">향상된 데이터 모델&lt;/h3>
&lt;p>SPDX 3.0은 엔티티 간의 관계를 더 명확하게 표현할 수 있는 향상된 데이터 모델을 제공합니다[1]. 이를 통해:&lt;/p>
&lt;ul>
&lt;li>복잡한 소프트웨어 구조를 더 정확하게 기술 가능&lt;/li>
&lt;li>소프트웨어 구성 요소 간의 의존성을 더 명확하게 표현 가능&lt;/li>
&lt;li>보안 및 라이선스 정보를 더 세밀하게 연결 가능&lt;/li>
&lt;/ul>
&lt;h3 id="국제-표준-준수">국제 표준 준수&lt;/h3>
&lt;p>SPDX 3.0은 ISO/IEC 5962:2021 표준을 준수하며, 이는 글로벌 소프트웨어 공급망 관리에 중요한 의미를 갖습니다[5][6]. 이를 통해:&lt;/p>
&lt;ul>
&lt;li>국제적으로 인정받는 형식으로 SBOM 생성 가능&lt;/li>
&lt;li>다양한 규제 요구사항(예: 미국 정부 EO 14028, EU 사이버 복원력법)을 충족 가능&lt;/li>
&lt;li>조직 간 소프트웨어 정보 교환의 일관성과 신뢰성 향상&lt;/li>
&lt;/ul>
&lt;p>SPDX 3.0의 이러한 핵심 기능들은 소프트웨어 공급망의 투명성, 보안, 그리고 컴플라이언스를 크게 개선하며, 현대적인 소프트웨어 개발 및 관리 요구사항을 충족시키는 데 중요한 역할을 합니다.&lt;/p>
&lt;p>Citations:&lt;br>
[1] &lt;a href="https://scribesecurity.com/ko/blog/spdx-vs-cyclonedx-sbom-formats-compared/">https://scribesecurity.com/ko/blog/spdx-vs-cyclonedx-sbom-formats-compared/&lt;/a>&lt;br>
[2] &lt;a href="https://github.com/spdx/spdx-3-model/releases">https://github.com/spdx/spdx-3-model/releases&lt;/a>&lt;br>
[3] &lt;a href="https://olis.or.kr/license/licenseSPDX.do?mapcode=010107">https://olis.or.kr/license/licenseSPDX.do?mapcode=010107&lt;/a>&lt;br>
[4] &lt;a href="https://ettrends.etri.re.kr/ettrends/203/0905203008/0905203008.html">https://ettrends.etri.re.kr/ettrends/203/0905203008/0905203008.html&lt;/a>&lt;br>
[5] &lt;a href="https://www.linuxfoundation.org/press/spdx-3-revolutionizes-software-management-in-systems-with-enhanced-functionality-and-streamlined-use-cases">https://www.linuxfoundation.org/press/spdx-3-revolutionizes-software-management-in-systems-with-enhanced-functionality-and-streamlined-use-cases&lt;/a>&lt;br>
[6] &lt;a href="https://www.prnewswire.com/news-releases/spdx-3-0-revolutionizes-software-management-in-systems-with-enhanced-functionality-and-streamlined-use-cases-302118321.html">https://www.prnewswire.com/news-releases/spdx-3-0-revolutionizes-software-management-in-systems-with-enhanced-functionality-and-streamlined-use-cases-302118321.html&lt;/a>&lt;br>
[7] &lt;a href="https://www.gttkorea.com/news/articleView.html?idxno=5131">https://www.gttkorea.com/news/articleView.html?idxno=5131&lt;/a>&lt;br>&lt;/p>
&lt;h2 id="3-spdx-30-프로필">3. SPDX 3.0 프로필&lt;/h2>
&lt;p>SPDX 3.0에서 도입된 프로필 개념은 다양한 사용 사례에 맞춰 SPDX 데이터를 구성하고 관리할 수 있게 해주는 핵심 기능입니다. 각 프로필은 특정 도메인이나 사용 사례에 필요한 정보와 구조를 정의합니다.&lt;/p>
&lt;h3 id="코어-프로필">코어 프로필&lt;/h3>
&lt;p>코어 프로필은 모든 SPDX 문서의 기본이 되는 핵심 요소들을 정의합니다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>주요 구성 요소&lt;/strong>:
&lt;ul>
&lt;li>Element: 모든 SPDX 객체의 기본 클래스&lt;/li>
&lt;li>Artifact: 소프트웨어 구성 요소를 나타내는 클래스&lt;/li>
&lt;li>Agent: 개인, 조직, 도구 등을 나타내는 클래스&lt;/li>
&lt;li>Relationship: 엔티티 간의 관계를 정의하는 클래스&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>목적&lt;/strong>: 다른 모든 프로필에서 공통적으로 사용되는 기본 구조와 정보를 제공합니다.&lt;/li>
&lt;li>&lt;strong>사용 예&lt;/strong>: 모든 SPDX 문서는 코어 프로필을 기반으로 작성되며, 여기에 다른 프로필의 정보가 추가됩니다.&lt;/li>
&lt;/ul>
&lt;h3 id="소프트웨어-프로필">소프트웨어 프로필&lt;/h3>
&lt;p>소프트웨어 프로필은 소프트웨어 패키지와 관련된 상세 정보를 제공합니다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>주요 구성 요소&lt;/strong>:
&lt;ul>
&lt;li>Package: 소프트웨어 패키지에 대한 정보&lt;/li>
&lt;li>File: 개별 파일에 대한 정보&lt;/li>
&lt;li>Snippet: 파일의 일부분에 대한 정보&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>목적&lt;/strong>: 소프트웨어의 구조, 구성 요소, 메타데이터를 상세히 기술합니다.&lt;/li>
&lt;li>&lt;strong>사용 예&lt;/strong>: 오픈 소스 라이브러리의 구조와 구성 요소를 문서화할 때 사용됩니다.&lt;/li>
&lt;/ul>
&lt;h3 id="보안-프로필">보안 프로필&lt;/h3>
&lt;p>보안 프로필은 소프트웨어의 보안 관련 정보를 다룹니다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>주요 구성 요소&lt;/strong>:
&lt;ul>
&lt;li>Vulnerability: 취약점 정보&lt;/li>
&lt;li>Assessment: 취약점 평가 정보&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>목적&lt;/strong>: 소프트웨어의 보안 취약점과 관련 평가 정보를 제공합니다.&lt;/li>
&lt;li>&lt;strong>사용 예&lt;/strong>: CVE(Common Vulnerabilities and Exposures) 정보를 SPDX 문서에 포함시킬 때 사용됩니다.&lt;/li>
&lt;/ul>
&lt;h3 id="라이선스-프로필">라이선스 프로필&lt;/h3>
&lt;p>라이선스 프로필은 소프트웨어 라이선스 관련 정보를 상세히 다룹니다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>주요 구성 요소&lt;/strong>:
&lt;ul>
&lt;li>License: 라이선스 정보&lt;/li>
&lt;li>LicenseExpression: 복잡한 라이선스 표현&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>목적&lt;/strong>: 소프트웨어의 라이선스 정보를 정확하고 상세하게 기술합니다.&lt;/li>
&lt;li>&lt;strong>사용 예&lt;/strong>: 오픈 소스 소프트웨어의 라이선스 정보를 문서화할 때 사용됩니다.&lt;/li>
&lt;/ul>
&lt;h3 id="빌드-프로필">빌드 프로필&lt;/h3>
&lt;p>빌드 프로필은 소프트웨어 빌드 프로세스에 대한 정보를 제공합니다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>주요 구성 요소&lt;/strong>:
&lt;ul>
&lt;li>BuildStep: 빌드 단계 정보&lt;/li>
&lt;li>BuildTool: 빌드 도구 정보&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>목적&lt;/strong>: 소프트웨어가 어떻게 컴파일되고 패키징되는지에 대한 상세 정보를 제공합니다.&lt;/li>
&lt;li>&lt;strong>사용 예&lt;/strong>: CI/CD 파이프라인의 빌드 프로세스를 문서화할 때 사용됩니다.&lt;/li>
&lt;/ul>
&lt;h3 id="aiml-프로필">AI/ML 프로필&lt;/h3>
&lt;p>AI/ML 프로필은 인공지능과 머신러닝 모델에 특화된 정보를 다룹니다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>주요 구성 요소&lt;/strong>:
&lt;ul>
&lt;li>AIModel: AI 모델 정보&lt;/li>
&lt;li>Dataset: 학습 데이터셋 정보&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>목적&lt;/strong>: AI/ML 모델의 특성, 학습 데이터, 성능 메트릭 등을 기술합니다.&lt;/li>
&lt;li>&lt;strong>사용 예&lt;/strong>: 딥러닝 모델의 구조와 학습 데이터셋을 문서화할 때 사용됩니다.&lt;/li>
&lt;/ul>
&lt;p>각 프로필은 SPDX 3.0의 모듈화된 구조를 반영하며, 사용자는 필요에 따라 적절한 프로필을 선택하여 SPDX 문서를 생성할 수 있습니다. 이를 통해 소프트웨어 공급망의 다양한 측면을 효과적으로 문서화하고 관리할 수 있습니다.&lt;/p>
&lt;p>Citations:&lt;br>
[1] &lt;a href="https://spdx.dev/leveraging-profiles-for-license-compliance-insights-from-spdx-mini-summit/">https://spdx.dev/leveraging-profiles-for-license-compliance-insights-from-spdx-mini-summit/&lt;/a>&lt;br>
[2] &lt;a href="https://spdx.dev/providing-transparency-at-software-developments-core-process-build-time/">https://spdx.dev/providing-transparency-at-software-developments-core-process-build-time/&lt;/a>&lt;br>
[3] &lt;a href="https://spdx.github.io/spdx-spec/v2.3/SPDX-license-list/">https://spdx.github.io/spdx-spec/v2.3/SPDX-license-list/&lt;/a>&lt;br>
[4] &lt;a href="https://spdx.dev/capturing-software-vulnerability-data-in-spdx-3-0/">https://spdx.dev/capturing-software-vulnerability-data-in-spdx-3-0/&lt;/a>&lt;br>
[5] &lt;a href="https://www.linuxfoundation.org/press/spdx-3-revolutionizes-software-management-in-systems-with-enhanced-functionality-and-streamlined-use-cases">https://www.linuxfoundation.org/press/spdx-3-revolutionizes-software-management-in-systems-with-enhanced-functionality-and-streamlined-use-cases&lt;/a>&lt;br>
[6] &lt;a href="https://spdx.dev/understanding-spdx-profiles/">https://spdx.dev/understanding-spdx-profiles/&lt;/a>&lt;br>
[7] &lt;a href="https://github.com/spdx/spdx-3-model/actions">https://github.com/spdx/spdx-3-model/actions&lt;/a>&lt;br>
[8] &lt;a href="https://spdx.github.io/spdx-spec/v3.0/model/AI/AI/">https://spdx.github.io/spdx-spec/v3.0/model/AI/AI/&lt;/a>&lt;br>&lt;/p>
&lt;h2 id="4-spdx-30-데이터-모델">4. SPDX 3.0 데이터 모델&lt;/h2>
&lt;p>SPDX 3.0의 데이터 모델은 이전 버전에 비해 더욱 유연하고 확장 가능하도록 설계되었습니다. 이 모델은 소프트웨어 공급망의 복잡성을 더 잘 반영하고, 다양한 사용 사례를 지원합니다.&lt;/p>
&lt;h3 id="주요-엔티티-및-관계">주요 엔티티 및 관계&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>Element&lt;/strong>
&lt;ul>
&lt;li>SPDX 3.0의 모든 주요 객체의 기본 클래스입니다.&lt;/li>
&lt;li>모든 Element는 고유한 SPDX ID를 가집니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Artifact&lt;/strong>
&lt;ul>
&lt;li>소프트웨어 구성 요소를 나타냅니다 (예: 패키지, 파일, 스니펫).&lt;/li>
&lt;li>이름, 버전, 공급자 등의 속성을 포함합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Agent&lt;/strong>
&lt;ul>
&lt;li>개인, 조직, 도구 등 SPDX 문서 생성에 관여한 주체를 나타냅니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Relationship&lt;/strong>
&lt;ul>
&lt;li>엔티티 간의 관계를 정의합니다 (예: 의존성, 포함 관계).&lt;/li>
&lt;li>소스, 대상, 관계 유형을 지정합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>LifecycleScopedRelationship&lt;/strong>
&lt;ul>
&lt;li>소프트웨어 라이프사이클 단계와 관련된 특정 관계를 나타냅니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Annotation&lt;/strong>
&lt;ul>
&lt;li>엔티티에 대한 추가 정보나 주석을 제공합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="식별자-체계">식별자 체계&lt;/h3>
&lt;p>SPDX 3.0은 더 강력하고 유연한 식별자 체계를 도입했습니다:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>SPDX ID&lt;/strong>: 모든 Element에 대해 고유한 식별자를 제공합니다.&lt;/li>
&lt;li>&lt;strong>외부 식별자&lt;/strong>: 다른 시스템의 식별자를 참조할 수 있습니다 (예: CVE, PURL).&lt;/li>
&lt;li>&lt;strong>네임스페이스&lt;/strong>: 식별자의 범위를 명확히 하고 충돌을 방지합니다.&lt;/li>
&lt;/ul>
&lt;h3 id="메타데이터-관리">메타데이터 관리&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>CreationInfo&lt;/strong>
&lt;ul>
&lt;li>SPDX 문서 자체에 대한 메타데이터를 포함합니다.&lt;/li>
&lt;li>생성 날짜, 작성자, 도구 버전 등의 정보를 제공합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>프로필별 메타데이터&lt;/strong>
&lt;ul>
&lt;li>각 프로필(소프트웨어, 보안, 라이선스 등)에 특화된 메타데이터 필드를 정의합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="확장성-메커니즘">확장성 메커니즘&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>사용자 정의 속성&lt;/strong>
&lt;ul>
&lt;li>표준 필드 외에 사용자가 정의한 추가 속성을 포함할 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>외부 참조&lt;/strong>
&lt;ul>
&lt;li>외부 시스템이나 문서에 대한 링크를 제공합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="데이터-타입">데이터 타입&lt;/h3>
&lt;p>SPDX 3.0은 다양한 데이터 타입을 지원합니다:&lt;/p>
&lt;ul>
&lt;li>문자열, 정수, 부울, 날짜/시간&lt;/li>
&lt;li>열거형 (예: 라이선스 타입, 관계 타입)&lt;/li>
&lt;li>복합 타입 (예: 버전 범위, 체크섬)&lt;/li>
&lt;/ul>
&lt;h3 id="직렬화-형식">직렬화 형식&lt;/h3>
&lt;p>SPDX 3.0 데이터 모델은 다양한 형식으로 직렬화될 수 있습니다:&lt;/p>
&lt;ul>
&lt;li>JSON-LD&lt;/li>
&lt;li>YAML&lt;/li>
&lt;li>RDF&lt;/li>
&lt;li>XML&lt;/li>
&lt;/ul>
&lt;p>이러한 다양한 형식 지원은 다른 시스템과의 통합을 용이하게 합니다.&lt;/p>
&lt;h3 id="프로필-지원">프로필 지원&lt;/h3>
&lt;p>데이터 모델은 다양한 프로필을 지원하도록 설계되었습니다:&lt;/p>
&lt;ul>
&lt;li>코어 프로필: 모든 SPDX 문서에 공통적인 기본 요소&lt;/li>
&lt;li>소프트웨어 프로필: 소프트웨어 패키지 관련 정보&lt;/li>
&lt;li>보안 프로필: 취약점 및 보안 관련 데이터&lt;/li>
&lt;li>라이선스 프로필: 상세한 라이선스 정보&lt;/li>
&lt;li>AI/ML 프로필: AI 모델 관련 메타데이터&lt;/li>
&lt;li>데이터셋 프로필: 데이터셋 관련 정보&lt;/li>
&lt;/ul>
&lt;p>각 프로필은 특정 사용 사례에 필요한 추가 필드와 관계를 정의합니다.SPDX 3.0의 데이터 모델은 소프트웨어 공급망의 복잡성을 포괄적으로 표현할 수 있으며, 동시에 특정 도메인의 요구사항을 충족시킬 수 있는 유연성을 제공합니다. 이를 통해 조직은 소프트웨어 구성 요소에 대한 더 정확하고 상세한 정보를 관리하고 공유할 수 있게 되었습니다.&lt;/p>
&lt;h2 id="5-spdx-30-구현-가이드">5. SPDX 3.0 구현 가이드&lt;/h2>
&lt;p>SPDX 3.0을 효과적으로 구현하기 위한 상세한 가이드를 제공합니다.&lt;/p>
&lt;h3 id="도구-및-라이브러리">도구 및 라이브러리&lt;/h3>
&lt;p>SPDX 3.0을 지원하는 주요 도구와 라이브러리는 다음과 같습니다:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>SPDX Java 라이브러리&lt;/strong>
&lt;ul>
&lt;li>GitHub: &lt;a href="https://github.com/spdx/tools-java">https://github.com/spdx/tools-java&lt;/a>&lt;/li>
&lt;li>기능: SPDX 문서 파싱, 생성, 변환, 검증&lt;/li>
&lt;li>사용법: Maven 의존성으로 추가하여 Java 프로젝트에서 사용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>SPDX Python 라이브러리&lt;/strong>
&lt;ul>
&lt;li>GitHub: &lt;a href="https://github.com/spdx/tools-python">https://github.com/spdx/tools-python&lt;/a>&lt;/li>
&lt;li>기능: SPDX 문서 파싱, 생성, 검증&lt;/li>
&lt;li>특징: SPDX 3.0에 대한 실험적 지원 제공&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>SPDX Online Tools&lt;/strong>
&lt;ul>
&lt;li>웹사이트: &lt;a href="https://tools.spdx.org/">https://tools.spdx.org&lt;/a>&lt;/li>
&lt;li>기능: 웹 기반 SPDX 문서 생성 및 검증&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>FOSSology&lt;/strong>
&lt;ul>
&lt;li>GitHub: &lt;a href="https://github.com/fossology/fossology">https://github.com/fossology/fossology&lt;/a>&lt;/li>
&lt;li>기능: 오픈소스 컴플라이언스 도구로, SPDX 문서 생성 지원&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>SPDX SBOM Generator&lt;/strong>
&lt;ul>
&lt;li>GitHub: &lt;a href="https://github.com/opensbom-generator/spdx-sbom-generator">https://github.com/opensbom-generator/spdx-sbom-generator&lt;/a>&lt;/li>
&lt;li>기능: 다양한 프로그래밍 언어 프로젝트에 대한 SPDX SBOM 생성&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>이러한 도구들을 활용하여 SPDX 3.0 문서를 생성, 파싱, 검증할 수 있습니다.&lt;/p>
&lt;h3 id="파일-형식-json-yaml-rdf">파일 형식 (JSON, YAML, RDF)&lt;/h3>
&lt;p>SPDX 3.0은 다양한 파일 형식을 지원합니다:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>JSON-LD&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>가장 권장되는 형식&lt;/p>
&lt;/li>
&lt;li>
&lt;p>예시:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;@context&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&amp;lt;https://spdx.org/spdx-3.0-context.jsonld&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;@type&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;SpdxDocument&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Example SPDX 3.0 Document&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;elements&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;@type&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Package&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;ExamplePackage&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;version&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;1.0.0&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>YAML&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>사람이 읽기 쉬운 형식&lt;/p>
&lt;/li>
&lt;li>
&lt;p>예시:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#000">---&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$schema&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">&amp;lt;https://spdx.org/spdx-3.0-schema.json&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">spdxVersion&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">SPDX-3.0&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Example SPDX 3.0 Document&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">elements&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">type&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Package&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">ExamplePackage&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">version&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1.0.0&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>RDF&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>시맨틱 웹 애플리케이션에 적합&lt;/p>
&lt;/li>
&lt;li>
&lt;p>예시:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-xml" data-lang="xml">&lt;span style="color:#204a87;font-weight:bold">&amp;lt;rdf:RDF&lt;/span> &lt;span style="color:#c4a000">xmlns:rdf=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&amp;gt;&amp;#34;&lt;/span>
&lt;span style="color:#c4a000">xmlns:spdx=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;http://spdx.org/rdf/terms#&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;gt;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;lt;spdx:SpdxDocument&amp;gt;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;lt;spdx:name&amp;gt;&lt;/span>Example SPDX 3.0 Document&lt;span style="color:#204a87;font-weight:bold">&amp;lt;/spdx:name&amp;gt;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;lt;spdx:element&amp;gt;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;lt;spdx:Package&amp;gt;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;lt;spdx:name&amp;gt;&lt;/span>ExamplePackage&lt;span style="color:#204a87;font-weight:bold">&amp;lt;/spdx:name&amp;gt;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;lt;spdx:versionInfo&amp;gt;&lt;/span>1.0.0&lt;span style="color:#204a87;font-weight:bold">&amp;lt;/spdx:versionInfo&amp;gt;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;lt;/spdx:Package&amp;gt;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;lt;/spdx:element&amp;gt;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;lt;/spdx:SpdxDocument&amp;gt;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;lt;/rdf:RDF&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>각 형식은 특정 사용 사례에 적합하며, 개발자는 프로젝트 요구사항에 따라 적절한 형식을 선택할 수 있습니다.&lt;/p>
&lt;h3 id="기존-spdx-2x에서-마이그레이션">기존 SPDX 2.x에서 마이그레이션&lt;/h3>
&lt;p>SPDX 2.x에서 3.0으로 마이그레이션하는 과정은 다음과 같습니다:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>구조 변경 이해&lt;/strong>
&lt;ul>
&lt;li>SPDX 3.0의 모듈화된 구조와 프로필 개념 숙지&lt;/li>
&lt;li>새로운 필드와 관계 유형 파악&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>도구 업데이트&lt;/strong>
&lt;ul>
&lt;li>SPDX 3.0을 지원하는 최신 버전의 도구와 라이브러리로 업그레이드&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>문서 변환&lt;/strong>
&lt;ul>
&lt;li>SPDX Python 라이브러리의 &lt;code>spdx_tools.spdx3.bump_from_spdx2.spdx_document&lt;/code> 모듈 사용&lt;/li>
&lt;li>&lt;code>bump_spdx_document()&lt;/code> 함수를 통해 SPDX 2.x 문서를 3.0으로 변환&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>새로운 필드 추가&lt;/strong>
&lt;ul>
&lt;li>SPDX 3.0에서 새롭게 도입된 필드 (예: AI/ML 관련 정보) 추가&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>관계 재정의&lt;/strong>
&lt;ul>
&lt;li>SPDX 3.0의 새로운 관계 유형을 사용하여 기존 관계 재정의&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>프로필 적용&lt;/strong>
&lt;ul>
&lt;li>적절한 SPDX 3.0 프로필 선택 및 적용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>검증&lt;/strong>
&lt;ul>
&lt;li>SPDX 3.0 검증 도구를 사용하여 변환된 문서의 유효성 확인&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>테스트 및 통합&lt;/strong>
&lt;ul>
&lt;li>변환된 SPDX 3.0 문서를 기존 워크플로우에 통합하고 테스트&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>마이그레이션 과정에서는 SPDX 커뮤니티 리소스와 문서를 적극 활용하고, 필요한 경우 전문가의 도움을 받는 것이 좋습니다.&lt;/p>
&lt;p>이러한 구현 가이드를 따라 SPDX 3.0을 효과적으로 도입하고 활용할 수 있습니다.&lt;/p>
&lt;p>Citations:&lt;br>
[1] &lt;a href="https://www.linuxfoundation.org/press/spdx-3-revolutionizes-software-management-in-systems-with-enhanced-functionality-and-streamlined-use-cases">https://www.linuxfoundation.org/press/spdx-3-revolutionizes-software-management-in-systems-with-enhanced-functionality-and-streamlined-use-cases&lt;/a>&lt;br>
[2] &lt;a href="https://www.youtube.com/watch?v=iqVk-Sek8Pc">https://www.youtube.com/watch?v=iqVk-Sek8Pc&lt;/a>&lt;br>
[3] &lt;a href="https://github.com/spdx/Spdx-Java-Library">https://github.com/spdx/Spdx-Java-Library&lt;/a>&lt;br>
[4] &lt;a href="https://spdx.github.io/spdx-spec/v3.0/annexes/diffs-from-previous-editions/">https://spdx.github.io/spdx-spec/v3.0/annexes/diffs-from-previous-editions/&lt;/a>&lt;br>
[5] &lt;a href="https://github.com/spdx/spdx-3-model/releases">https://github.com/spdx/spdx-3-model/releases&lt;/a>&lt;br>
[6] &lt;a href="https://spdx.dev/use/spdx-tools/">https://spdx.dev/use/spdx-tools/&lt;/a>&lt;br>
[7] &lt;a href="https://github.com/spdx/tools-python/blob/main/README.md">https://github.com/spdx/tools-python/blob/main/README.md&lt;/a>&lt;br>
[8] &lt;a href="https://fossa.com/learn/spdx">https://fossa.com/learn/spdx&lt;/a>&lt;br>&lt;/p>
&lt;h2 id="6-sbom과-spdx-30">6. SBOM과 SPDX 3.0&lt;/h2>
&lt;p>소프트웨어 부품 목록(Software Bill of Materials, SBOM)은 소프트웨어 공급망 보안의 핵심 요소로 자리잡았습니다. SPDX 3.0은 SBOM 생성과 관리를 위한 강력한 프레임워크를 제공하며, 이를 통해 조직은 더욱 효과적으로 소프트웨어 구성 요소를 추적하고 관리할 수 있습니다.&lt;/p>
&lt;h3 id="sbom-생성-및-관리">SBOM 생성 및 관리&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>자동화된 SBOM 생성&lt;/strong>
&lt;ul>
&lt;li>SPDX 3.0은 CI/CD 파이프라인에 통합되어 자동으로 SBOM을 생성할 수 있습니다[6].&lt;/li>
&lt;li>이는 &amp;ldquo;machine-speed&amp;rdquo; SBOM 생성을 가능하게 하여, 소프트웨어 릴리스 주기에 맞춰 즉시 SBOM을 업데이트할 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>일관된 포맷 사용&lt;/strong>
&lt;ul>
&lt;li>SPDX 3.0은 표준화된 SBOM 포맷을 제공하여 일관성을 보장합니다[6].&lt;/li>
&lt;li>이를 통해 조직 간 SBOM 데이터 교환이 용이해지고, 자동화된 분석이 가능해집니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>정기적인 업데이트&lt;/strong>
&lt;ul>
&lt;li>각 소프트웨어 릴리스마다 SBOM을 업데이트해야 합니다[6].&lt;/li>
&lt;li>SPDX 3.0의 자동화 기능을 활용하면 이 프로세스를 효율적으로 관리할 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>메타데이터 포함&lt;/strong>
&lt;ul>
&lt;li>SPDX 3.0은 라이선스 정보, 패치 상태 등 풍부한 메타데이터를 SBOM에 포함할 수 있게 합니다[6].&lt;/li>
&lt;li>이는 보안 및 컴플라이언스 관리를 크게 개선합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="spdx-30을-활용한-sbom-개선">SPDX 3.0을 활용한 SBOM 개선&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>모듈화된 구조&lt;/strong>
&lt;ul>
&lt;li>SPDX 3.0의 프로필 기반 구조를 활용하여 다양한 사용 사례에 맞는 SBOM을 생성할 수 있습니다[1].&lt;/li>
&lt;li>소프트웨어, 보안, 라이선스 등 각 프로필에 특화된 정보를 SBOM에 포함시킬 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>보안 취약점 정보 통합&lt;/strong>
&lt;ul>
&lt;li>SPDX 3.0의 보안 프로필을 활용하여 SBOM에 취약점 정보를 직접 포함시킬 수 있습니다[1].&lt;/li>
&lt;li>이를 통해 보안 팀은 더 빠르고 효과적으로 취약점을 식별하고 대응할 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>라이선스 컴플라이언스 강화&lt;/strong>
&lt;ul>
&lt;li>SPDX 3.0의 라이선스 프로필을 활용하여 상세한 라이선스 정보를 SBOM에 포함시킬 수 있습니다[2].&lt;/li>
&lt;li>이는 법률 및 컴플라이언스 팀이 라이선스 의무사항을 더 쉽게 파악하고 관리할 수 있게 합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>AI/ML 모델 정보 포함&lt;/strong>
&lt;ul>
&lt;li>SPDX 3.0의 AI/ML 프로필을 활용하여 AI 모델 및 데이터셋 정보를 SBOM에 포함시킬 수 있습니다[2].&lt;/li>
&lt;li>이는 AI 시스템의 투명성과 책임성을 높이는 데 기여합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="ntia-최소-요구사항-충족">NTIA 최소 요구사항 충족&lt;/h3>
&lt;p>SPDX 3.0은 NTIA(National Telecommunications and Information Administration)가 정의한 SBOM 최소 요구사항을 충족하고 있습니다[4][5].&lt;/p>
&lt;ol>
&lt;li>&lt;strong>기본 데이터 필드&lt;/strong>
&lt;ul>
&lt;li>SPDX 3.0은 NTIA가 요구하는 7가지 기본 데이터 필드를 모두 포함합니다:
&lt;ul>
&lt;li>공급자 이름&lt;/li>
&lt;li>구성 요소 이름&lt;/li>
&lt;li>구성 요소 버전&lt;/li>
&lt;li>기타 고유 식별자&lt;/li>
&lt;li>의존성 관계&lt;/li>
&lt;li>SBOM 작성자&lt;/li>
&lt;li>타임스탬프&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>자동화 및 상호운용성&lt;/strong>
&lt;ul>
&lt;li>SPDX 3.0은 기계 판독 가능한 형식(JSON-LD, YAML, RDF)을 지원하여 NTIA의 자동화 요구사항을 충족합니다[5].&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>실행 가능성&lt;/strong>
&lt;ul>
&lt;li>SPDX 3.0은 다양한 도구와 라이브러리를 통해 SBOM 생성 및 관리를 지원하여 실행 가능성을 보장합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>확장성&lt;/strong>
&lt;ul>
&lt;li>SPDX 3.0의 모듈화된 구조는 미래의 요구사항을 수용할 수 있는 확장성을 제공합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>SPDX 3.0을 활용한 SBOM 관리는 단순히 규제 요구사항을 충족하는 것을 넘어, 조직의 소프트웨어 공급망 보안을 크게 강화하고 투명성을 높이는 데 기여합니다. 이는 궁극적으로 더 안전하고 신뢰할 수 있는 소프트웨어 생태계 구축으로 이어집니다.&lt;/p>
&lt;p>Citations:&lt;br>
[1] &lt;a href="https://spdx.dev/capturing-software-vulnerability-data-in-spdx-3-0/">https://spdx.dev/capturing-software-vulnerability-data-in-spdx-3-0/&lt;/a>&lt;br>
[2] &lt;a href="https://www.linuxfoundation.org/press/spdx-3-revolutionizes-software-management-in-systems-with-enhanced-functionality-and-streamlined-use-cases">https://www.linuxfoundation.org/press/spdx-3-revolutionizes-software-management-in-systems-with-enhanced-functionality-and-streamlined-use-cases&lt;/a>&lt;br>
[3] &lt;a href="https://www.legitsecurity.com/blog/best-practices-for-managing-maintaining-sboms">https://www.legitsecurity.com/blog/best-practices-for-managing-maintaining-sboms&lt;/a>&lt;br>
[4] &lt;a href="https://www.ntia.gov/report/2021/minimum-elements-software-bill-materials-sbom">https://www.ntia.gov/report/2021/minimum-elements-software-bill-materials-sbom&lt;/a>&lt;br>
[5] &lt;a href="https://cybellum.com/blog/ntia-minimum-elements-for-a-software-bill-of-materials-sbom-a-guide/">https://cybellum.com/blog/ntia-minimum-elements-for-a-software-bill-of-materials-sbom-a-guide/&lt;/a>&lt;br>
[6] &lt;a href="https://jfrog.com/devops-tools/article/best-practices-for-software-bill-of-materials-management/">https://jfrog.com/devops-tools/article/best-practices-for-software-bill-of-materials-management/&lt;/a>&lt;br>
[7] &lt;a href="https://about.gitlab.com/blog/2022/10/25/the-ultimate-guide-to-sboms/">https://about.gitlab.com/blog/2022/10/25/the-ultimate-guide-to-sboms/&lt;/a>&lt;br>
[8] &lt;a href="https://scribesecurity.com/sbom/how-to-generate-an-sbom/">https://scribesecurity.com/sbom/how-to-generate-an-sbom/&lt;/a>&lt;br>&lt;/p>
&lt;h2 id="7-보안-및-취약점-관리">7. 보안 및 취약점 관리&lt;/h2>
&lt;p>SPDX 3.0은 소프트웨어 보안 및 취약점 관리를 위한 강력한 기능을 제공합니다. 이를 통해 조직은 소프트웨어 공급망의 보안을 더욱 효과적으로 관리할 수 있습니다.&lt;/p>
&lt;h3 id="cve-정보-통합">CVE 정보 통합&lt;/h3>
&lt;p>CVE(Common Vulnerabilities and Exposures) 정보를 SPDX 3.0 문서에 통합하는 것은 보안 관리의 핵심 요소입니다.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>CVE 참조 방법&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>SPDX 3.0은 &lt;code>ExternalReference&lt;/code> 클래스를 사용하여 CVE 정보를 참조합니다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>예시:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;@type&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;ExternalReference&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;referenceType&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;SecurityAdvisory&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;referenceLocator&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;CVE-2021-44228&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;referenceCategory&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;CVE&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>CVE 상세 정보 포함&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>CVSS(Common Vulnerability Scoring System) 점수&lt;/li>
&lt;li>영향을 받는 버전 범위&lt;/li>
&lt;li>패치 가능 여부 및 패치 정보&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>자동 CVE 업데이트&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>SPDX 3.0 도구들은 NVD(National Vulnerability Database)와 같은 외부 소스에서 자동으로 CVE 정보를 가져와 SPDX 문서를 업데이트할 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>CVE 정보와 구성 요소 연결&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>SPDX 3.0은 특정 소프트웨어 구성 요소와 관련 CVE 정보를 명확하게 연결할 수 있습니다.&lt;/li>
&lt;li>이를 통해 취약한 구성 요소를 쉽게 식별하고 추적할 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="취약점-추적-및-보고">취약점 추적 및 보고&lt;/h3>
&lt;p>SPDX 3.0은 취약점을 효과적으로 추적하고 보고하기 위한 기능을 제공합니다.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>취약점 라이프사이클 관리&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>발견 날짜, 보고 날짜, 패치 날짜 등 취약점의 전체 라이프사이클을 추적할 수 있습니다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>예시:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;@type&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Vulnerability&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;CVE-2021-44228&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;description&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Log4j RCE vulnerability&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;discoveredDate&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;2021-12-09&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;publishedDate&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;2021-12-10&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;patchedDate&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;2021-12-14&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>취약점 심각도 평가&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>CVSS 점수를 사용하여 취약점의 심각도를 평가하고 기록할 수 있습니다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>예시:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;@type&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;VulnerabilityAssessment&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;vulnerability&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;CVE-2021-44228&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;cvssV3&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;baseScore&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10.0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;vectorString&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>취약점 보고서 생성&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>SPDX 3.0 데이터를 기반으로 자동화된 취약점 보고서를 생성할 수 있습니다.&lt;/li>
&lt;li>보고서에는 영향을 받는 구성 요소, 심각도, 패치 상태 등이 포함됩니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>취약점 트렌드 분석&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>시간에 따른 취약점 발생 패턴을 분석할 수 있습니다.&lt;/li>
&lt;li>이를 통해 보안 팀은 장기적인 보안 전략을 수립할 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="보안-프로필-활용">보안 프로필 활용&lt;/h3>
&lt;p>SPDX 3.0의 보안 프로필은 보안 관련 정보를 체계적으로 관리할 수 있게 해줍니다.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>보안 프로필 구조&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>Vulnerability&lt;/code>: 취약점 정보를 나타내는 클래스&lt;/li>
&lt;li>&lt;code>VulnerabilityAssessment&lt;/code>: 취약점 평가 정보를 나타내는 클래스&lt;/li>
&lt;li>&lt;code>SecurityAdvisory&lt;/code>: 보안 권고사항을 나타내는 클래스&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>보안 프로필 사용 예시&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;@type&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;SecurityProfile&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;vulnerabilities&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;@type&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Vulnerability&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;CVE-2021-44228&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;description&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Log4j RCE vulnerability&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;assessments&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;@type&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;VulnerabilityAssessment&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;vulnerability&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;CVE-2021-44228&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;cvssV3&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;baseScore&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10.0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;vectorString&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;advisories&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;@type&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;SecurityAdvisory&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;title&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Update Log4j to version 2.15.0 or later&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;description&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Upgrade Log4j to mitigate CVE-2021-44228&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>보안 프로필 활용 방안&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>취약점 스캐닝 도구와 연동하여 자동으로 보안 프로필 업데이트&lt;/li>
&lt;li>보안 대시보드 구축을 위한 데이터 소스로 활용&lt;/li>
&lt;li>컴플라이언스 감사 시 보안 상태 증명 자료로 사용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>보안 메트릭 추적&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>오픈 취약점 수, 평균 패치 시간, 고위험 취약점 비율 등의 보안 메트릭을 SPDX 3.0 데이터를 기반으로 추적할 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>SPDX 3.0의 보안 및 취약점 관리 기능을 활용함으로써, 조직은 소프트웨어 공급망의 보안을 크게 강화할 수 있습니다. CVE 정보의 통합, 체계적인 취약점 추적 및 보고, 그리고 보안 프로필의 활용은 보안 팀이 더 효과적으로 위협에 대응하고 조직의 전반적인 보안 태세를 개선하는 데 도움을 줍니다.&lt;/p>
&lt;h2 id="8-라이선스-컴플라이언스">8. 라이선스 컴플라이언스&lt;/h2>
&lt;p>SPDX 3.0은 소프트웨어 라이선스 컴플라이언스를 효과적으로 관리할 수 있는 강력한 기능을 제공합니다. 이를 통해 조직은 오픈 소스 및 상용 소프트웨어의 라이선스 의무사항을 더욱 쉽게 파악하고 준수할 수 있습니다.&lt;/p>
&lt;h3 id="라이선스-정보-관리">라이선스 정보 관리&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>라이선스 식별자&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>SPDX 3.0은 표준화된 라이선스 식별자를 사용합니다.&lt;/li>
&lt;li>예: &amp;ldquo;MIT&amp;rdquo;, &amp;ldquo;Apache-2.0&amp;rdquo;, &amp;ldquo;GPL-3.0-only&amp;rdquo;&lt;/li>
&lt;li>이를 통해 라이선스 정보의 일관성과 정확성을 보장합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>라이선스 텍스트 포함&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>전체 라이선스 텍스트를 SPDX 문서에 포함시킬 수 있습니다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>예시:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;@type&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;License&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;licenseId&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;MIT&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;MIT License&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;text&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;MIT License\\n\\nCopyright (c) [year] [fullname]\\n\\nPermission is hereby granted, ...&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>사용자 정의 라이선스&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>표준 SPDX 라이선스 목록에 없는 라이선스의 경우, 사용자 정의 라이선스를 정의할 수 있습니다.&lt;/li>
&lt;li>이 경우 &amp;ldquo;LicenseRef-&amp;rdquo; 접두사를 사용합니다.&lt;/li>
&lt;li>예: &amp;ldquo;LicenseRef-CompanyA-Proprietary&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>라이선스 표현식&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>복잡한 라이선스 조합을 표현할 수 있습니다.&lt;/li>
&lt;li>예: &amp;ldquo;(MIT OR Apache-2.0) AND CC-BY-4.0&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>파일 및 패키지 수준 라이선스&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>개별 파일, 스니펫, 패키지 수준에서 라이선스 정보를 지정할 수 있습니다.&lt;/li>
&lt;li>이를 통해 세분화된 라이선스 관리가 가능합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="라이선스-호환성-검사">라이선스 호환성 검사&lt;/h3>
&lt;p>SPDX 3.0 데이터를 활용하여 라이선스 호환성을 자동으로 검사할 수 있습니다.&lt;/p>
&lt;ol>
&lt;li>&lt;strong>라이선스 그래프 생성&lt;/strong>
&lt;ul>
&lt;li>소프트웨어 구성 요소 간의 의존성과 각 구성 요소의 라이선스 정보를 바탕으로 라이선스 그래프를 생성합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>호환성 규칙 정의&lt;/strong>
&lt;ul>
&lt;li>라이선스 간의 호환성 규칙을 정의합니다.&lt;/li>
&lt;li>예: GPL-3.0은 Apache-2.0과 호환되지만, GPL-2.0은 Apache-2.0과 호환되지 않습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>자동 호환성 검사&lt;/strong>
&lt;ul>
&lt;li>정의된 규칙을 바탕으로 라이선스 그래프를 분석하여 호환성 문제를 자동으로 식별합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>충돌 해결 제안&lt;/strong>
&lt;ul>
&lt;li>라이선스 충돌이 발견된 경우, 가능한 해결 방안을 제안합니다.&lt;/li>
&lt;li>예: 특정 구성 요소의 대체 버전 사용, 라이선스 예외 요청 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>동적 분석&lt;/strong>
&lt;ul>
&lt;li>소프트웨어 빌드 과정에서 실시간으로 라이선스 호환성을 검사할 수 있습니다.&lt;/li>
&lt;li>이를 통해 개발 초기 단계에서 라이선스 문제를 식별하고 해결할 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="컴플라이언스-보고서-생성">컴플라이언스 보고서 생성&lt;/h3>
&lt;p>SPDX 3.0 데이터를 기반으로 상세한 라이선스 컴플라이언스 보고서를 생성할 수 있습니다.&lt;/p>
&lt;ol>
&lt;li>&lt;strong>보고서 구성 요소&lt;/strong>
&lt;ul>
&lt;li>사용된 모든 소프트웨어 구성 요소 목록&lt;/li>
&lt;li>각 구성 요소의 라이선스 정보&lt;/li>
&lt;li>라이선스 의무사항 요약&lt;/li>
&lt;li>잠재적 라이선스 충돌 및 해결 방안&lt;/li>
&lt;li>저작권 고지 텍스트&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>의무사항 추적&lt;/strong>
&lt;ul>
&lt;li>각 라이선스의 주요 의무사항을 추적하고 이행 상태를 보고합니다.&lt;/li>
&lt;li>예: 소스 코드 공개 의무, 저작권 고지 의무, 라이선스 텍스트 포함 의무 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>리스크 평가&lt;/strong>
&lt;ul>
&lt;li>각 라이선스 및 라이선스 조합에 대한 법적 리스크를 평가하고 보고합니다.&lt;/li>
&lt;li>고위험 라이선스 사용에 대한 경고를 제공합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>컴플라이언스 워크플로우 통합&lt;/strong>
&lt;ul>
&lt;li>보고서 생성을 자동화하여 정기적인 컴플라이언스 검토 프로세스에 통합할 수 있습니다.&lt;/li>
&lt;li>CI/CD 파이프라인에 통합하여 각 빌드 또는 릴리스마다 컴플라이언스 보고서를 생성할 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>맞춤형 보고서&lt;/strong>
&lt;ul>
&lt;li>다양한 이해관계자(법무팀, 개발팀, 경영진 등)의 요구에 맞는 맞춤형 보고서를 생성할 수 있습니다.&lt;/li>
&lt;li>예: 법무팀을 위한 상세 보고서, 경영진을 위한 요약 보고서 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>이력 관리&lt;/strong>
&lt;ul>
&lt;li>시간에 따른 컴플라이언스 상태 변화를 추적할 수 있습니다.&lt;/li>
&lt;li>이를 통해 라이선스 컴플라이언스 개선 노력의 효과를 측정할 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>SPDX 3.0의 라이선스 컴플라이언스 기능을 활용함으로써, 조직은 복잡한 소프트웨어 생태계에서 라이선스 의무사항을 효과적으로 관리하고 준수할 수 있습니다. 이는 법적 리스크를 줄이고, 오픈 소스 커뮤니티와의 관계를 개선하며, 전반적인 소프트웨어 개발 프로세스의 투명성과 신뢰성을 높이는 데 기여합니다.&lt;/p>
&lt;h2 id="9-spdx-30-활용-사례">9. SPDX 3.0 활용 사례&lt;/h2>
&lt;p>SPDX 3.0은 다양한 산업 분야에서 소프트웨어 관리와 보안을 향상시키는 데 활용될 수 있습니다. 주요 활용 사례는 다음과 같습니다:&lt;/p>
&lt;h3 id="소프트웨어-공급망-보안">소프트웨어 공급망 보안&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>취약점 식별 및 관리&lt;/strong>
&lt;ul>
&lt;li>SPDX 3.0의 보안 프로필을 활용하여 소프트웨어 구성 요소의 취약점을 체계적으로 추적합니다.&lt;/li>
&lt;li>CVE 정보를 SPDX 문서에 통합하여 실시간으로 보안 위험을 평가할 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>공급망 투명성 확보&lt;/strong>
&lt;ul>
&lt;li>SPDX 3.0을 통해 소프트웨어의 전체 구성 요소와 출처를 명확히 문서화할 수 있습니다.&lt;/li>
&lt;li>이는 악성 코드 삽입이나 공급망 공격의 위험을 줄이는 데 도움이 됩니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>빌드 프로세스 보안&lt;/strong>
&lt;ul>
&lt;li>SPDX 3.0의 빌드 프로필을 사용하여 소프트웨어 빌드 과정의 무결성을 보장할 수 있습니다.&lt;/li>
&lt;li>빌드 도구, 환경, 스크립트 등의 정보를 문서화하여 재현 가능한 빌드를 지원합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>신속한 보안 패치 적용&lt;/strong>
&lt;ul>
&lt;li>SPDX 3.0 문서를 통해 취약한 구성 요소를 신속하게 식별하고 패치할 수 있습니다.&lt;/li>
&lt;li>자동화된 도구와 연계하여 보안 업데이트 프로세스를 최적화할 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="오픈소스-관리">오픈소스 관리&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>라이선스 컴플라이언스&lt;/strong>
&lt;ul>
&lt;li>SPDX 3.0의 라이선스 프로필을 활용하여 오픈소스 라이선스 의무사항을 체계적으로 관리합니다.&lt;/li>
&lt;li>복잡한 라이선스 조합을 정확히 표현하고 분석할 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>오픈소스 기여 추적&lt;/strong>
&lt;ul>
&lt;li>SPDX 3.0을 통해 프로젝트 내 오픈소스 구성 요소의 출처와 기여자 정보를 명확히 기록할 수 있습니다.&lt;/li>
&lt;li>이는 오픈소스 커뮤니티와의 협력을 강화하고 기여를 인정하는 데 도움이 됩니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>오픈소스 정책 시행&lt;/strong>
&lt;ul>
&lt;li>SPDX 3.0 문서를 조직의 오픈소스 정책과 연계하여 승인된 라이선스 및 구성 요소만 사용되도록 보장할 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>오픈소스 감사 효율화&lt;/strong>
&lt;ul>
&lt;li>SPDX 3.0의 표준화된 형식을 통해 오픈소스 감사 프로세스를 자동화하고 간소화할 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="규제-준수">규제 준수&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>SBOM 요구사항 충족&lt;/strong>
&lt;ul>
&lt;li>SPDX 3.0은 미국 정부의 행정명령 14028 및 EU의 사이버 복원력 법(Cyber Resilience Act) 등에서 요구하는 SBOM 생성 요구사항을 충족합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>산업별 규제 대응&lt;/strong>
&lt;ul>
&lt;li>의료기기, 자동차, 항공우주 등 다양한 산업 분야의 소프트웨어 관련 규제 요구사항을 SPDX 3.0을 통해 효과적으로 대응할 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>데이터 프라이버시 규정 준수&lt;/strong>
&lt;ul>
&lt;li>SPDX 3.0의 데이터셋 프로필을 활용하여 GDPR, CCPA 등 데이터 프라이버시 규정 준수를 지원할 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>감사 및 보고 지원&lt;/strong>
&lt;ul>
&lt;li>SPDX 3.0 문서를 통해 규제 기관이나 감사자에게 필요한 소프트웨어 구성 및 보안 정보를 쉽게 제공할 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>AI 규제 대응&lt;/strong>
&lt;ul>
&lt;li>SPDX 3.0의 AI/ML 프로필을 활용하여 AI 모델의 훈련 데이터, 알고리즘, 성능 메트릭 등을 문서화함으로써 향후 AI 규제에 선제적으로 대응할 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>SPDX 3.0의 이러한 활용 사례들은 조직이 소프트웨어 관리, 보안, 컴플라이언스를 통합적으로 개선할 수 있게 해줍니다. 표준화된 접근 방식을 통해 조직 간 협력을 촉진하고, 소프트웨어 생태계 전반의 투명성과 신뢰성을 높이는 데 기여합니다.&lt;/p>
&lt;p>Citations:&lt;br>
[1] &lt;a href="https://linuxsecurity.com/news/organizations-events/spdx-3-0">https://linuxsecurity.com/news/organizations-events/spdx-3-0&lt;/a>&lt;br>
[2] &lt;a href="https://spdx.dev/spdx-announces-3-0-release-candidate-with-new-use-cases/">https://spdx.dev/spdx-announces-3-0-release-candidate-with-new-use-cases/&lt;/a>&lt;br>
[3] &lt;a href="https://www.linuxfoundation.org/press/spdx-3-revolutionizes-software-management-in-systems-with-enhanced-functionality-and-streamlined-use-cases">https://www.linuxfoundation.org/press/spdx-3-revolutionizes-software-management-in-systems-with-enhanced-functionality-and-streamlined-use-cases&lt;/a>&lt;br>
[4] &lt;a href="https://www.prnewswire.com/news-releases/spdx-3-0-revolutionizes-software-management-in-systems-with-enhanced-functionality-and-streamlined-use-cases-302118321.html">https://www.prnewswire.com/news-releases/spdx-3-0-revolutionizes-software-management-in-systems-with-enhanced-functionality-and-streamlined-use-cases-302118321.html&lt;/a>&lt;br>
[5] &lt;a href="https://spdx.dev/leveraging-profiles-for-license-compliance-insights-from-spdx-mini-summit/">https://spdx.dev/leveraging-profiles-for-license-compliance-insights-from-spdx-mini-summit/&lt;/a>&lt;br>
[6] &lt;a href="https://www.synopsys.com/blogs/software-security/sboms-and-spdx.html">https://www.synopsys.com/blogs/software-security/sboms-and-spdx.html&lt;/a>&lt;br>
[7] &lt;a href="https://spdx.dev/understanding-spdx-profiles/">https://spdx.dev/understanding-spdx-profiles/&lt;/a>&lt;br>&lt;/p>
&lt;h2 id="10-spdx-30-도입-전략">10. SPDX 3.0 도입 전략&lt;/h2>
&lt;p>SPDX 3.0을 조직에 성공적으로 도입하기 위해서는 체계적인 접근이 필요합니다. 다음은 SPDX 3.0 도입을 위한 상세한 전략입니다.&lt;/p>
&lt;h3 id="단계별-구현-계획">단계별 구현 계획&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>현황 분석&lt;/strong>
&lt;ul>
&lt;li>현재 SBOM 생성 및 관리 프로세스 평가&lt;/li>
&lt;li>기존 도구 및 워크플로우 분석&lt;/li>
&lt;li>SPDX 3.0 도입으로 얻을 수 있는 이점 식별&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>파일럿 프로젝트 선정&lt;/strong>
&lt;ul>
&lt;li>규모가 작고 중요도가 낮은 프로젝트 선택&lt;/li>
&lt;li>SPDX 3.0의 특정 프로필(예: 보안 또는 라이선스) 선택하여 적용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>도구 선택 및 구성&lt;/strong>
&lt;ul>
&lt;li>SPDX 3.0 지원 도구 평가 (예: SPDX 도구, FOSSology)&lt;/li>
&lt;li>선택한 도구를 기존 CI/CD 파이프라인에 통합&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>프로세스 정의&lt;/strong>
&lt;ul>
&lt;li>SPDX 3.0 문서 생성, 검증, 관리를 위한 워크플로우 설계&lt;/li>
&lt;li>책임자 및 역할 정의&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>확장 계획&lt;/strong>
&lt;ul>
&lt;li>파일럿 프로젝트의 결과를 바탕으로 개선점 식별&lt;/li>
&lt;li>단계적으로 다른 프로젝트 및 부서로 확대 적용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>모니터링 및 최적화&lt;/strong>
&lt;ul>
&lt;li>SPDX 3.0 도입 효과 측정을 위한 KPI 설정&lt;/li>
&lt;li>정기적인 검토 및 프로세스 개선&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="조직-내-교육-및-인식-제고">조직 내 교육 및 인식 제고&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>경영진 지원 확보&lt;/strong>
&lt;ul>
&lt;li>SPDX 3.0 도입의 비즈니스 가치 제시&lt;/li>
&lt;li>규제 준수 및 리스크 관리 측면 강조&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>부서별 맞춤 교육&lt;/strong>
&lt;ul>
&lt;li>개발팀: SPDX 3.0 문서 생성 및 관리 방법&lt;/li>
&lt;li>법무팀: 라이선스 컴플라이언스 개선 방안&lt;/li>
&lt;li>보안팀: 취약점 관리 및 보안 프로필 활용법&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>워크숍 및 핸즈온 세션&lt;/strong>
&lt;ul>
&lt;li>SPDX 3.0 도구 사용법 실습&lt;/li>
&lt;li>실제 프로젝트에 SPDX 3.0 적용 연습&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>내부 커뮤니케이션&lt;/strong>
&lt;ul>
&lt;li>SPDX 3.0 관련 뉴스레터 발행&lt;/li>
&lt;li>인트라넷에 SPDX 3.0 리소스 센터 구축&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>성공 사례 공유&lt;/strong>
&lt;ul>
&lt;li>파일럿 프로젝트의 성과 및 교훈 공유&lt;/li>
&lt;li>SPDX 3.0 도입으로 인한 개선 사항 강조&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="성공적인-도입을-위한-팁">성공적인 도입을 위한 팁&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>점진적 접근&lt;/strong>
&lt;ul>
&lt;li>한 번에 모든 것을 바꾸려 하지 말고, 단계적으로 도입&lt;/li>
&lt;li>각 단계마다 피드백을 수집하고 개선점 파악&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>크로스 펑셔널 팀 구성&lt;/strong>
&lt;ul>
&lt;li>개발, 법무, 보안, 운영 등 다양한 부서의 전문가로 팀 구성&lt;/li>
&lt;li>정기적인 미팅을 통해 진행 상황 및 이슈 논의&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>자동화 강조&lt;/strong>
&lt;ul>
&lt;li>SPDX 3.0 문서 생성 및 관리 프로세스 자동화&lt;/li>
&lt;li>CI/CD 파이프라인에 SPDX 3.0 관련 단계 통합&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>외부 전문가 활용&lt;/strong>
&lt;ul>
&lt;li>필요시 SPDX 커뮤니티 또는 컨설팅 업체의 도움 요청&lt;/li>
&lt;li>다른 조직의 성공 사례 벤치마킹&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>유연성 유지&lt;/strong>
&lt;ul>
&lt;li>SPDX 3.0의 모든 기능을 한 번에 도입하려 하지 않음&lt;/li>
&lt;li>조직의 니즈에 맞는 프로필과 기능부터 시작&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>지속적인 학습 강조&lt;/strong>
&lt;ul>
&lt;li>SPDX 커뮤니티 활동 참여 권장&lt;/li>
&lt;li>관련 컨퍼런스 및 웨비나 참석 지원&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>성과 측정 및 보고&lt;/strong>
&lt;ul>
&lt;li>SPDX 3.0 도입 전후의 메트릭 비교 (예: 취약점 대응 시간, 라이선스 컴플라이언스 개선도)&lt;/li>
&lt;li>정기적으로 경영진에게 진행 상황 및 ROI 보고&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>문화적 변화 관리&lt;/strong>
&lt;ul>
&lt;li>SPDX 3.0을 단순한 도구가 아닌 새로운 업무 방식으로 인식하도록 유도&lt;/li>
&lt;li>변화에 대한 저항을 극복하기 위한 전략 수립&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>SPDX 3.0의 성공적인 도입은 기술적 구현뿐만 아니라 조직 문화와 프로세스의 변화를 수반합니다. 체계적인 계획, 지속적인 교육, 그리고 유연한 접근을 통해 SPDX 3.0의 이점을 최대한 활용할 수 있습니다[1][2].&lt;/p>
&lt;p>Citations:&lt;br>
[1] &lt;a href="https://www.linuxfoundation.org/press/spdx-3-revolutionizes-software-management-in-systems-with-enhanced-functionality-and-streamlined-use-cases">https://www.linuxfoundation.org/press/spdx-3-revolutionizes-software-management-in-systems-with-enhanced-functionality-and-streamlined-use-cases&lt;/a>&lt;br>
[2] &lt;a href="https://spdx.dev/unpacking-the-spdx-3-0-tooling-mini-summit-a-new-era-of-compliance-and-security/">https://spdx.dev/unpacking-the-spdx-3-0-tooling-mini-summit-a-new-era-of-compliance-and-security/&lt;/a>&lt;br>
[3] &lt;a href="https://spdx.dev/spdx-announces-3-0-release-candidate-with-new-use-cases/">https://spdx.dev/spdx-announces-3-0-release-candidate-with-new-use-cases/&lt;/a>&lt;br>
[4] &lt;a href="https://openchainproject.org/news/2023/03/31/webinar-50">https://openchainproject.org/news/2023/03/31/webinar-50&lt;/a>&lt;br>
[5] &lt;a href="https://nand-research.com/quick-take-spdx-3-0-release/">https://nand-research.com/quick-take-spdx-3-0-release/&lt;/a>&lt;br>
[6] &lt;a href="https://linuxsecurity.com/news/organizations-events/spdx-3-0">https://linuxsecurity.com/news/organizations-events/spdx-3-0&lt;/a>&lt;br>
[7] &lt;a href="https://spdx.dev/leveraging-profiles-for-license-compliance-insights-from-spdx-mini-summit/">https://spdx.dev/leveraging-profiles-for-license-compliance-insights-from-spdx-mini-summit/&lt;/a>&lt;br>&lt;/p>
&lt;h2 id="11-향후-전망-및-발전-방향">11. 향후 전망 및 발전 방향&lt;/h2>
&lt;p>SPDX 3.0의 출시는 소프트웨어 공급망 관리의 새로운 장을 열었습니다. 이 섹션에서는 SPDX의 미래와 발전 방향에 대해 자세히 살펴보겠습니다.&lt;/p>
&lt;h3 id="spdx-커뮤니티-참여">SPDX 커뮤니티 참여&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>오픈 참여 모델&lt;/strong>
&lt;ul>
&lt;li>SPDX는 개방형 커뮤니티 모델을 채택하고 있어, 누구나 참여할 수 있습니다[1].&lt;/li>
&lt;li>개인, 기업, 단체 등 다양한 이해관계자들이 SPDX의 발전에 기여할 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>참여 방법&lt;/strong>
&lt;ul>
&lt;li>메일링 리스트 구독: 일반 SPDX 메일링 리스트에 가입하여 최신 소식을 받아볼 수 있습니다[1].&lt;/li>
&lt;li>정기 회의 참석: 월간 일반 회의에 참여하여 프로젝트 진행 상황을 파악하고 의견을 제시할 수 있습니다[1].&lt;/li>
&lt;li>작업 그룹 활동: 기술, 법률, 아웃리치 등 다양한 작업 그룹에 참여할 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>도구 개발 참여&lt;/strong>
&lt;ul>
&lt;li>SPDX 도구 개발에 직접 참여할 수 있습니다. 예를 들어, Google Summer of Code 프로젝트를 통해 학생들이 SPDX 관련 프로젝트에 기여할 수 있습니다[7].&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="향후-업데이트-및-개선-사항">향후 업데이트 및 개선 사항&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>AI/ML 관련 기능 강화&lt;/strong>
&lt;ul>
&lt;li>AI 모델 훈련 및 특성화, 데이터셋 출처 등에 대한 프로필이 더욱 발전될 것으로 예상됩니다[4].&lt;/li>
&lt;li>AI 윤리 및 책임성과 관련된 메타데이터 추가가 고려될 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>보안 기능 확장&lt;/strong>
&lt;ul>
&lt;li>취약점 정보와 SBOM의 연계가 더욱 강화될 것으로 보입니다.&lt;/li>
&lt;li>실시간 위협 인텔리전스와의 통합 가능성이 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>자동화 및 통합 개선&lt;/strong>
&lt;ul>
&lt;li>CI/CD 파이프라인과의 더 깊은 통합이 예상됩니다.&lt;/li>
&lt;li>자동 SBOM 생성 및 업데이트 기능이 더욱 정교해질 것입니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>사용자 경험 개선&lt;/strong>
&lt;ul>
&lt;li>더 직관적인 사용자 인터페이스와 시각화 도구가 개발될 수 있습니다.&lt;/li>
&lt;li>비기술적 사용자를 위한 간소화된 버전의 SPDX 도구가 나올 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="글로벌-표준화-동향">글로벌 표준화 동향&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>ISO 표준으로서의 위치 강화&lt;/strong>
&lt;ul>
&lt;li>SPDX는 이미 ISO/IEC 5962:2021 표준으로 채택되었으며, 3.0 버전도 ISO에 제출될 예정입니다[5].&lt;/li>
&lt;li>이는 SPDX의 글로벌 채택을 더욱 가속화할 것으로 예상됩니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>국제 규제 대응&lt;/strong>
&lt;ul>
&lt;li>미국의 행정명령 14028과 EU의 사이버 복원력 법(Cyber Resiliency Act) 등 국제적인 소프트웨어 공급망 보안 규제에 대응하는 핵심 도구로 자리잡을 것입니다[6].&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>산업별 표준화&lt;/strong>
&lt;ul>
&lt;li>자동차, 의료기기, 항공우주 등 다양한 산업 분야에서 SPDX를 기반으로 한 산업별 표준이 개발될 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>국제 협력 강화&lt;/strong>
&lt;ul>
&lt;li>SPDX 커뮤니티는 다른 국제 표준 기구 및 오픈소스 재단들과의 협력을 강화할 것으로 예상됩니다.&lt;/li>
&lt;li>이를 통해 소프트웨어 공급망 보안에 대한 글로벌 접근 방식이 더욱 통일될 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>SPDX 3.0은 소프트웨어 관리의 미래를 형성하는 중요한 이정표입니다. 지속적인 커뮤니티 참여와 기술 발전, 그리고 국제적인 표준화 노력을 통해 SPDX는 앞으로도 소프트웨어 공급망 보안과 투명성 향상에 크게 기여할 것으로 전망됩니다.&lt;/p>
&lt;p>Citations:
[1] &lt;a href="https://spdx.dev/engage/participate/">https://spdx.dev/engage/participate/&lt;/a>&lt;br>
[2] &lt;a href="https://www.linuxinsider.com/story/spdx-becomes-new-standard-for-open-source-software-security-87265.html">https://www.linuxinsider.com/story/spdx-becomes-new-standard-for-open-source-software-security-87265.html&lt;/a>&lt;br>
[3] &lt;a href="https://spdx.dev/engage/join/">https://spdx.dev/engage/join/&lt;/a>&lt;br>
[4] &lt;a href="https://sbomify.com/2024/04/28/exploring-the-new-spdx-3-0-a-game-changer-for-sboms/">https://sbomify.com/2024/04/28/exploring-the-new-spdx-3-0-a-game-changer-for-sboms/&lt;/a>&lt;br>
[5] &lt;a href="https://www.prnewswire.com/news-releases/spdx-3-0-revolutionizes-software-management-in-systems-with-enhanced-functionality-and-streamlined-use-cases-302118321.html">https://www.prnewswire.com/news-releases/spdx-3-0-revolutionizes-software-management-in-systems-with-enhanced-functionality-and-streamlined-use-cases-302118321.html&lt;/a>&lt;br>
[6] &lt;a href="https://spdx.dev/spdx-announces-3-0-release-candidate-with-new-use-cases/">https://spdx.dev/spdx-announces-3-0-release-candidate-with-new-use-cases/&lt;/a>&lt;br>
[7] &lt;a href="https://wiki.spdx.org/view/GSOC/GSOC_ProjectIdeas">https://wiki.spdx.org/view/GSOC/GSOC_ProjectIdeas&lt;/a>&lt;br>
[8] &lt;a href="https://linuxsecurity.com/news/organizations-events/spdx-3-0">https://linuxsecurity.com/news/organizations-events/spdx-3-0&lt;/a>&lt;br>&lt;/p>
&lt;h2 id="12-결론-기업의-오픈소스-관리자를-위한-spdx-30-활용-전략">12. 결론: 기업의 오픈소스 관리자를 위한 SPDX 3.0 활용 전략&lt;/h2>
&lt;p>SPDX 3.0은 기업의 오픈소스 관리자에게 강력하고 유연한 도구를 제공합니다. 다음은 SPDX 3.0을 효과적으로 활용하기 위한 전략적 접근 방법입니다:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>전략적 도입&lt;/strong>
&lt;ul>
&lt;li>SPDX 3.0을 단순한 도구가 아닌 전략적 자산으로 인식합니다.&lt;/li>
&lt;li>조직의 오픈소스 정책과 SPDX 3.0을 연계하여 일관된 관리 체계를 구축합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>자동화 우선&lt;/strong>
&lt;ul>
&lt;li>SPDX 3.0 문서 생성 및 관리 프로세스를 최대한 자동화합니다.&lt;/li>
&lt;li>CI/CD 파이프라인에 SPDX 3.0 관련 단계를 통합하여 지속적인 모니터링을 실현합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>리스크 관리 강화&lt;/strong>
&lt;ul>
&lt;li>SPDX 3.0의 보안 및 라이선스 프로필을 활용하여 오픈소스 사용에 따른 리스크를 체계적으로 관리합니다.&lt;/li>
&lt;li>정기적인 오픈소스 감사를 SPDX 3.0 기반으로 수행하여 컴플라이언스를 보장합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>의사결정 지원&lt;/strong>
&lt;ul>
&lt;li>SPDX 3.0 데이터를 기반으로 오픈소스 채택 및 사용에 대한 정보에 입각한 의사결정을 지원합니다.&lt;/li>
&lt;li>데이터 기반의 오픈소스 전략 수립에 활용합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>협업 촉진&lt;/strong>
&lt;ul>
&lt;li>SPDX 3.0을 통해 개발팀, 법무팀, 보안팀 간의 협업을 강화합니다.&lt;/li>
&lt;li>표준화된 형식을 통해 외부 파트너와의 정보 교환을 원활히 합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>교육 및 역량 강화&lt;/strong>
&lt;ul>
&lt;li>오픈소스 관리자는 SPDX 3.0에 대한 깊이 있는 이해를 바탕으로 조직 내 교육을 주도합니다.&lt;/li>
&lt;li>SPDX 커뮤니티 활동에 적극 참여하여 최신 동향을 파악하고 모범 사례를 학습합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>규제 대응 준비&lt;/strong>
&lt;ul>
&lt;li>SPDX 3.0을 활용하여 SBOM 관련 규제 요구사항에 선제적으로 대응합니다.&lt;/li>
&lt;li>향후 발생할 수 있는 규제 변화에 유연하게 대처할 수 있는 체계를 구축합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>가치 창출&lt;/strong>
&lt;ul>
&lt;li>SPDX 3.0을 통해 오픈소스 관리의 효율성을 높이고, 이를 조직의 경쟁력 강화로 연결합니다.&lt;/li>
&lt;li>오픈소스 기여 활동을 SPDX 3.0으로 문서화하여 기업의 기술력과 평판을 향상시킵니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>지속적인 개선&lt;/strong>
&lt;ul>
&lt;li>SPDX 3.0 활용 현황을 정기적으로 평가하고 개선점을 식별합니다.&lt;/li>
&lt;li>새로운 프로필이나 기능이 추가될 때마다 조직의 프로세스에 신속히 통합합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>혁신 주도&lt;/strong>
&lt;ul>
&lt;li>SPDX 3.0을 기반으로 조직 고유의 오픈소스 관리 모델을 개발합니다.&lt;/li>
&lt;li>이를 통해 업계 내에서 오픈소스 관리의 선도적 위치를 확보합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>결론적으로, SPDX 3.0은 기업의 오픈소스 관리자에게 오픈소스 생태계를 효과적으로 관리하고 활용할 수 있는 강력한 도구를 제공합니다. 전략적이고 체계적인 접근을 통해 SPDX 3.0을 활용한다면, 조직은 오픈소스의 이점을 최대화하면서 관련 리스크를 최소화할 수 있을 것입니다. 오픈소스 관리자는 이러한 도구를 통해 조직의 디지털 혁신과 경쟁력 강화에 핵심적인 역할을 수행할 수 있을 것입니다.&lt;/p>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>&lt;em>이 글은 Perplexity (&lt;a href="https://www.perplexity.ai/">https://www.perplexity.ai/&lt;/a>)와 함께 작성하였습니다.&lt;/em>&lt;/p>
&lt;p>&lt;em>SKT고객은 Perplexicy Pro를 1년간 무료로 이용할 수 있습니다.: &lt;a href="https://perplexity.sktadotevent.com/">https://perplexity.sktadotevent.com/&lt;/a>&lt;/em>&lt;/p>
&lt;p>&lt;img src="./image.png" alt="image.png">&lt;/p>
&lt;/div></description></item><item><title>Blog: 프랑스 법원, 대형 통신사 Orange에게 GPL 위반으로 손해배상 판결</title><link>/blog/2024/20240219_orange_lasso/</link><pubDate>Mon, 19 Feb 2024 00:00:00 +0000</pubDate><guid>/blog/2024/20240219_orange_lasso/</guid><description>
&lt;img src="/blog/2024/20240219_orange_lasso/featured_lasso_hu2be1628cf2eec4d7efae0b7b34a4e256_61950_640x0_resize_catmullrom_2.png" width="640" height="142"/>
&lt;p>안녕하세요.&lt;/p>
&lt;p>오늘은 프랑스 법원이 GPL 위반으로 통신사인 Orange에게 손해배상을 판결한 사건에 대해 살펴보려 합니다. 이 사건은 두 가지 주요 측면에서 특별히 주목할 만한 점이 있어 보였습니다.&lt;/p>
&lt;ul>
&lt;li>첫째, 이 사건의 피고인이 대형 통신사인 Orange라는 점입니다. (제가 통신사에 몸 담고 있다보니&amp;hellip;)&lt;/li>
&lt;li>둘째, GPL 위반 소송이 주로 임베디드 디바이스에서 발생하는 반면, 이 사건에서는 B2B 형태의 웹서비스 구축에 사용된 오픈소스가 이슈가 되었다는 점입니다. 이는 오픈소스 라이선스 준수가 모든 소프트웨어 개발 영역에서 중요하다는 것을 강조합니다.&lt;/li>
&lt;/ul>
&lt;p>이 사건은 이러한 측면들을 통해 오픈소스 라이선스 준수의 중요성을 재확인하는 계기가 될 것으로 보입니다. 이는 기업들이 오픈소스를 사용할 때 라이선스 요구사항을 철저히 이해하고 준수해야 함을 강조하는 중요한 사례가 될 것입니다.&lt;/p>
&lt;blockquote>
&lt;p>감수 및 보완 내용 의견 주신 SK텔레콤의 박철웅 매니저님께 감사 드립니다.&lt;/p>
&lt;/blockquote>
&lt;h2 id="gpl이란">GPL이란?&lt;/h2>
&lt;p>GNU General Public License의 약자로, 대표적인 오픈소스 라이선스 중 하나인 GPL은 소프트웨어의 저작권자가 &amp;ldquo;누구든지 소프트웨어를 자유롭게 사용하고, 수정하고, 배포할 수 있도록 허용하는 동시에, 수정된 버전이나 파생된 저작물도 GPL을 따라야 한다는 조건을 부과&amp;quot;하는 강력한 Copyleft 성격의 라이선스입니다.&lt;/p>
&lt;ul>
&lt;li>참고 - GPL-2.0 가이드 : &lt;a href="https://sktelecom.github.io/guide/use/obligation/gpl-2.0/">https://sktelecom.github.io/guide/use/obligation/gpl-2.0/&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="원고-엔트루베르-entrouvert">원고: 엔트루베르 (Entr’Ouvert)&lt;/h2>
&lt;p>2002년 9월에 설립된 프랑스의 소프트웨어 회사인 엔트루베르는 &lt;a href="https://lasso.entrouvert.org">Lasso&lt;/a>라는 이름의 C 라이브러리를 개발하였습니다. Lasso는 Liberty Alliance의 SAML 표준과 같은 인증 프로토콜을 구현하는 라이브러리입니다.&lt;/p>
&lt;p>&lt;img src="./featured_lasso.png" alt="lasso">&lt;/p>
&lt;p>Lasso는 현재 두 가지 라이선스로 제공됩니다.&lt;/p>
&lt;ul>
&lt;li>오픈소스 라이선스 : GPL-2.0 + OpenSSL exception (소스 코드 공개 필요)&lt;/li>
&lt;li>상용 라이선스 (유료 구매 필요)&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;em>We strongly recommend the use of the GNU General Public License each time it is possible. But for proprietary projects, that wouldn&amp;rsquo;t want to use it, we designed a commercial license.&lt;/em>&lt;/p>
&lt;p>&lt;em>&lt;a href="https://lasso.entrouvert.org/">https://lasso.entrouvert.org/&lt;/a>&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;h2 id="피고-orange">피고: Orange&lt;/h2>
&lt;p>프랑스의 대형 통신사인 Orange는 2005년, 프랑스 전자 행정 개발청(ADAE, 현재 DGME)과 &amp;ldquo;My Public Service&amp;rdquo; 포털(현재 &lt;a href="https://www.service-public.fr/">https://www.service-public.fr/&lt;/a>)을 개발하기 위한 계약을 체결했습니다.&lt;/p>
&lt;p>&lt;img src="./orange.png" alt="orange">&lt;/p>
&lt;p>당시 이 포털은 ID 관리 서비스를 지원하기 위해 SAML 프로토콜을 사용해야 했습니다. Orange는 이를 구현하기 위해 Lasso를 사용하였는데, GPL-2.0 라이선스 조건을 준수하지 않았습니다. 즉, Orange는 Lasso 소프트웨어의 출처와 라이선스를 명시하지 않았으며, 수정된 소스 코드를 공개하지 않았습니다.&lt;/p>
&lt;p>엔트루베르는 이를 발견하고 2011년 Orange사를 상대로 손해배상을 청구하는 소를 제기하였습니다.&lt;/p>
&lt;h2 id="판결">판결&lt;/h2>
&lt;p>소송은 10년 이상 진행되었고, 마침내 2024년 2월 14일, 파리 항소 법원은 GNU GPL v2 라이선스를 준수하지 않은 이유로 Orange에게 엔트루베르에 총 650,000유로(한화 약 9억4천만원)를 지불하라고 명령했습니다. Orange는 엔트루베르에게 경제적 손실에 대한 보상으로 500,000유로를 지불하고 도덕적 피해에 대해 150,000유로를 지불해야 합니다.&lt;/p>
&lt;p>법원은 &amp;ldquo;Orange가 라이선스 계약을 존중하고 유료 라이선스를 체결했다면 그들은 엔트루베르에게 로열티를 지불했어야 했다.&amp;ldquo;라고 말했습니다. 또한, 법원은 Orange가 Lasso 소프트웨어를 무료로 활용함으로써 7년 동안 지속된 이 대규모 공공 시장에서 부당하게 이익을 창출했다고 지적했습니다.&lt;/p>
&lt;h2 id="시사점">시사점&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>5G의 성장 한계에 도달하면서 비통신 전략을 가속화하고 있는 통신사가 소송의 대상이 된 것은 흥미로운 점입니다. AI, 클라우드, IoT, 로보틱스, 반도체, UAM 등 첨단 기술 분야에서 다양한 제품과 서비스를 출시하고, B2B 영역을 함께 공략하고 있는 통신사들은 이제 다른 산업 분야의 회사와 마찬가지로 소프트웨어 개발 환경에서 오픈소스를 필수적으로 사용하게 되었습니다. 따라서, 오픈소스 관리를 위한 정책과 프로세스를 수립하는 것이 중요하게 되었습니다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>오픈소스 라이선스 분쟁 사례는 주로 오픈소스를 사용하여 개발한 디바이스나 소프트웨어 상품이 무단으로 배포될 때 발생하였습니다. 그러나 이번 사례에서는 정부 기관의 웹사이트를 구축하기 위해 소프트웨어 공급 계약자가 사용한 오픈소스가 분쟁의 대상이 되었습니다. 따라서 기업들은 소프트웨어 디바이스, 앱 등의 배포 대상뿐만 아니라, B2B 형태로 웹서비스 구축 계약을 체결하여 정부기관이나 고객사에 소프트웨어를 공급할 때에도 오픈소스 관리를 위한 프로세스를 적용해야 함에 유의해야 합니다.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>French Court Issues Damages Award for Violation of GPL: &lt;a href="https://heathermeeker.com/2024/02/17/french-court-issues-damages-award-for-violation-of-gpl/amp/">https://heathermeeker.com/2024/02/17/french-court-issues-damages-award-for-violation-of-gpl/amp/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.entrouvert.com/actualites/2019/entrouvert-versus-orange/">https://www.entrouvert.com/actualites/2019/entrouvert-versus-orange/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.zdnet.fr/blogs/l-esprit-libre/non-respect-de-la-licence-gpl-orange-condamne-en-appel-39964312.htm">https://www.zdnet.fr/blogs/l-esprit-libre/non-respect-de-la-licence-gpl-orange-condamne-en-appel-39964312.htm&lt;/a>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>이 블로그는 불어로 작성된 기사 등의 번역본을 기반으로 작성하였으며, 저의 법률적인 지식은 극히 제한적이기 때문에 오류가 있을 수 있습니다.
혹시 오류를 발견하시면 알려주세요~ (&lt;a href="mailto:haksung@sk.com">haksung@sk.com&lt;/a>)&lt;/p>
&lt;p>바로바로 업데이트하겠습니다. ^^&lt;/p>
&lt;/blockquote></description></item><item><title>Blog: 기업의 효과적인 오픈소스 관리 방안 (2) OpenChain Korea Work Group</title><link>/blog/2023/20230403_openchain_kwg/</link><pubDate>Mon, 03 Apr 2023 00:00:00 +0000</pubDate><guid>/blog/2023/20230403_openchain_kwg/</guid><description>
&lt;img src="/blog/2023/20230403_openchain_kwg/featured_kwg_huf5217035a555feebe1e3786185241884_581219_640x0_resize_catmullrom_2.png" width="640" height="233"/>
&lt;p>이전 글에서는 기업의 효과적인 오픈소스 관리 방안으로 &lt;a href="https://devocean.sk.com/blog/techBoardDetail.do?ID=164676">글로벌 협력을 위한 OpenChain Project&lt;/a>를 소개했습니다. 이번에는 한국 기업이 오픈소스를 효과적으로 관리하기 위한 협업 커뮤니티인 &lt;a href="https://openchain-project.github.io/OpenChain-KWG/">OpenChain Korea Work Group&lt;/a>에 대해 소개하려고 합니다.&lt;/p>
&lt;h2 id="openchain-korea-work-group">OpenChain Korea Work Group&lt;/h2>
&lt;p>&lt;a href="https://openchain-project.github.io/OpenChain-KWG/">OpenChain Korea Work Group&lt;/a>(KWG)은 Linux Foundation의 &lt;a href="https://openchainproject.org/">OpenChain Project&lt;/a>의 하위 그룹입니다. 이 그룹은 오픈소스 정신인 협업과 공유를 통해 모두가 효과적으로 오픈소스 관리에 성공하기 위한 방법을 고민하고 공유하는 모임입니다. KWG에는 한국의 &lt;a href="https://openchain-project.github.io/OpenChain-KWG/about/member/">주요 ICT 기업&lt;/a>의 오픈소스 담당자들이 참여하고 있습니다.&lt;/p>
&lt;p>&lt;img src="./featured_kwg.png" alt="featured_kwg">&lt;/p>
&lt;h2 id="openchain-kwg-정기-미팅">OpenChain KWG 정기 미팅&lt;/h2>
&lt;p>오픈소스 관리를 위한 정책과 프로세스를 이미 구축한 대기업들도, 현대의 거대하고 복잡한 소프트웨어 공급망을 고려한다면 오픈소스 라이선스나 보안 취약점 리스크에서 벗어나기 어렵습니다. 결국, 소프트웨어 공급망 내 모든 기업의 오픈소스 관리 수준을 높이는 것이 중요합니다. 이를 위해서는 오픈소스 관리 방법에 대한 이해도가 높은 기업이 먼저 노하우를 공유하고, 다른 기업에서 쉽게 참여할 수 있도록 안내하는 길잡이가 필요합니다.&lt;/p>
&lt;p>기업이 보유한 오픈소스 관리 자산을 경쟁사와 공유한다고 해도 매출에 악영향을 끼치지 않습니다. 반면, 경쟁사의 오픈소스 관리 정책을 알아내더라도 이를 기업의 이익과 연결할 수 없습니다. 기업들이 서로 오픈소스 관리 Best Practice를 공유한다면, 각 기업은 적은 비용과 리소스 투입으로도 큰 효과를 얻을 수 있습니다. 이러한 아이디어에 공감하여, LG전자, SK텔레콤, 카카오, 현대자동차, 삼성전자의 오픈소스 담당자들이 참여한 첫 번째 &lt;a href="https://openchain-project.github.io/OpenChain-KWG/meeting/">OpenChain KWG 모임&lt;/a>이 2019년 1월에 개최되었습니다.&lt;/p>
&lt;h2 id="17차-미팅-오프라인">17차 미팅 (오프라인)&lt;/h2>
&lt;p>모임은 매 분기 진행하고 있으며, 코로나 기간 동안 온라인으로 진행되었습니다. 그러다가, 지난 2023년 3월 28일에는 3년 만에 &lt;a href="https://openchain-project.github.io/OpenChain-KWG/meeting/17th/">오프라인 모임을 개최&lt;/a>했습니다. 19개 기업/기관에서 50여 명의 오픈소스 담당자가 참석했습니다. 이번 오프라인 모임은 라인플러스에서 준비해 주었습니다. 쾌적한 장소와 음료, 그리고 기념품 등을 제공해주신 라인플러스의 오픈소스 매니저 &lt;a href="https://engineering.linecorp.com/ko/blog/line-opensource-manager-interview">이서연&lt;/a>, 김동혁 님께 감사드립니다! ^^&lt;/p>
&lt;p>&lt;img src="./Untitled_1.png" alt="Untitled">&lt;/p>
&lt;p>이번 모임의 첫 번째 부분에서는 OpenChain Project의 국내외 최신 동향과 보안 보증 규격에 대한 발표가 있었으며, AI 기술에 대한 법적 이슈 및 사례 연구에 대한 발표도 있었습니다. 두 번째 부분에서는 기업의 오픈 소스 관리를 위한 도구를 오픈 소스로 개발하여 공유하는 세션 발표가 있었습니다. 자세한 발표 내용은 이어지는 소개에서 다루겠습니다.&lt;/p>
&lt;h2 id="1부--세션-발표">1부 : 세션 발표&lt;/h2>
&lt;h3 id="openchain-global-updat-linux-foundation-shane-coughlan">OpenChain Global Updat (Linux Foundation, Shane Coughlan)&lt;/h3>
&lt;p>Linux Foundation의 OpenChain Project General Manager &lt;a href="https://jp.linkedin.com/in/shanecoughlan">Shane Coughlan&lt;/a>은 직접 참석하여 &lt;a href="https://openchain-project.github.io/OpenChain-KWG/meeting/17th/global-updates-public.pdf">OpenChain Project의 Global Trend&lt;/a>를 소개했습니다.&lt;/p>
&lt;p>&lt;img src="./Untitled_2.png" alt="Untitled">&lt;/p>
&lt;p>오픈소스 컴플라이언스를 위한 표준인 ISO/IEC 5230뿐만 아니라 보안을 위한 표준인 &lt;a href="https://www.iso.org/standard/86450.html">ISO/IEC DIS 18974&lt;/a>도 개발 중입니다. 이 표준은 곧 공식 ISO 표준으로 등록될 예정이며, 기업이 준수해야 할 &lt;a href="https://github.com/OpenChain-Project/Reference-Material/blob/master/Self-Certification/Checklist/DIS-18974/en/DIS-18974-Self-Certification-Checklist-2.0.md">Self-Checklist&lt;/a>도 공개되어 있습니다. 이러한 자료들을 활용하여 기업은 효율적인 오픈소스 리스크 관리를 수행할 수 있습니다.&lt;/p>
&lt;p>Shane은 KWG 멤버들을 위한 기념품도 가져와서 큰 호응을 얻기도 하였습니다. (Thank you, Shane 😊 )&lt;/p>
&lt;p>&lt;img src="./Untitled_3.png" alt="Untitled">&lt;/p>
&lt;h3 id="openchain-보안-표준-소개-sk텔레콤-장학성">OpenChain 보안 표준 소개 (SK텔레콤, 장학성)&lt;/h3>
&lt;p>&lt;a href="https://www.iso.org/standard/81039.html">ISO/IEC 5230&lt;/a>은 오픈소스 컴플라이언스를 위한 국제 표준입니다. 이 표준은 2020년에 ISO에 등록되었으며, 세계의 &lt;a href="https://www.openchainproject.org/community-of-conformance">많은 기업이 이 표준을 준수&lt;/a>하여 오픈소스 컴플라이언스 관리를 훌륭하게 수행하고 있습니다. 기업이 오픈소스를 관리해야 하는 이유는 라이선스 컴플라이언스 뿐만 아니라 보안 취약점에 대한 리스크도 존재하기 때문입니다. OpenChain Project에서는 보안 취약점 관리를 위한 표준, &lt;a href="https://www.iso.org/standard/86450.html">ISO/IEC DIS 18974&lt;/a>, OpenChain security assurance specification을 만들었습니다. 저는 이 표준이 어떤 내용으로 구성되어 있는지를 &lt;a href="https://openchain-project.github.io/OpenChain-KWG/meeting/17th/OpenChain%EB%B3%B4%EC%95%88%EB%B3%B4%EC%A6%9D%EA%B7%9C%EA%B2%A9%EC%86%8C%EA%B0%9C_20230328_%EC%9E%A5%ED%95%99%EC%84%B1.pdf">간단히 요약하여 소개&lt;/a>하였습니다.&lt;/p>
&lt;p>&lt;img src="./Untitled_4.png" alt="Untitled">&lt;/p>
&lt;p>이 보안 표준은 ISO/IEC 5230과 동일한 포맷으로 구성되어 있습니다. 라이선스 컴플라이언스 대신 보안 취약점 관리를 위해 수행해야 할 요구 사항을 정의합니다. 기업은 라이선스 컴플라이언스 이외에도 보안 취약점 관리를 위한 정책과 프로세스를 구축해야 합니다. 또한, 발견된 보안 취약점에 대응할 수 있는 절차를 마련해야 합니다.&lt;/p>
&lt;h3 id="legal-issues-of-ai-technologies--case-study-getty-images-v-stability-ai-etri-박정숙">Legal Issues of AI Technologies / Case Study: Getty Images v. Stability AI (ETRI 박정숙)&lt;/h3>
&lt;p>&lt;img src="./Untitled_5.png" alt="Untitled">&lt;/p>
&lt;p>ETRI의 박정숙 님은 최근 제기된 Stable Diffusion 관련 소송을 분석하여 AI 법률 이슈를 소개하였습니다. 발표 자료는 &lt;a href="https://openchain-project.github.io/OpenChain-KWG/meeting/17th/OpenChain-KWG_2023%EB%85%843%EC%9B%94_ETRI_%EB%B0%95%EC%A0%95%EC%88%99.pdf">여기&lt;/a>에서 확인할 수 있습니다.&lt;/p>
&lt;p>&lt;img src="./Untitled_6.png" alt="Untitled">&lt;/p>
&lt;p>박정숙님은 AI 관련 법률 제정 현황을 분석하고, 이를 기반으로 AI 관련 오픈소스 컴플라이언스 대응 방안을 모색하여 공유해주셨습니다.&lt;/p>
&lt;p>&lt;img src="./Untitled_7.png" alt="Untitled">&lt;/p>
&lt;h2 id="2부--mini-summit---오픈소스-관리-자동화-도구">2부 : Mini Summit - 오픈소스 관리 자동화 도구&lt;/h2>
&lt;p>2부에서는 오픈소스 관리를 자동화하기 위한 각 기업의 Best Practice를 공유하는 세션 발표가 있었습니다.&lt;/p>
&lt;h3 id="도구-별-의존성-분석-방식-카카오-임현지">도구 별 의존성 분석 방식 (카카오, 임현지)&lt;/h3>
&lt;p>카카오 임현지님은 오픈소스 분석 도구의 의존성 분석 방식을 비교 분석하여 발표하셨습니다. 발표 자료는 &lt;a href="https://openchain-project.github.io/OpenChain-KWG/meeting/17th/%EB%8F%84%EA%B5%AC%EB%B3%84_%EC%9D%98%EC%A1%B4%EC%84%B1_%EB%B6%84%EC%84%9D_%EB%B0%A9%EC%8B%9D.pdf">여기&lt;/a>에서 확인할 수 있습니다.&lt;/p>
&lt;p>&lt;img src="./Untitled_8.png" alt="Untitled">&lt;/p>
&lt;p>대표적인 오픈소스 분석 도구인 FOSSA, FOSSLight, ORT (OSS Review Toolkit), OLIVE Platform 별로 의존성 분석 방식을 파악하여 공유하였습니다.&lt;/p>
&lt;p>&lt;img src="./Untitled_9.png" alt="Untitled">&lt;/p>
&lt;h3 id="소리소리-osori-lg전자-김소임">소리소리 OSORI (LG전자, 김소임)&lt;/h3>
&lt;p>LG전자 김소임님은 OSORI 프로젝트에 대해 소개하는 &lt;a href="https://openchain-project.github.io/OpenChain-KWG/meeting/17th/230328_History_of_OSORI_%EB%B0%9C%ED%91%9C%EC%9A%A9.pdf">세션 발표&lt;/a>를 하였습니다.&lt;/p>
&lt;p>&lt;img src="./Untitled_10.png" alt="Untitled">&lt;/p>
&lt;p>OSORI는 오픈소스 정보 데이터를 공개하여 누구나 쉽게 오픈소스 정보를 확인하고 필요한 의무 사항을 준수할 수 있게 하기 위한 오픈소스 프로젝트입니다. LG전자, 삼성전자, 카카오가 보유한 오픈소스 프로젝트에 대한 주요 정보, 라이선스 종류, 이에 따른 주요 준수 사항 및 제약 사항을 항목별로 테이블을 구성한 정보를 데이터베이스화하기 위한 스키마를 정의하였고, 앞으로 데이터 정제, 운영 Policy 정립, 가이드 페이지 구축 등의 로드맵을 소개하였습니다.&lt;/p>
&lt;p>&lt;img src="./Untitled_11.png" alt="Untitled">&lt;/p>
&lt;h3 id="fosslight-roadmap-lg전자-김경애">FOSSLight Roadmap (LG전자, 김경애)&lt;/h3>
&lt;p>&lt;a href="https://fosslight.org/">FOSSLight&lt;/a>는 LG전자에서 자체 개발하여 사용하고 있는 오픈소스 관리 통합 시스템을 누구나 사용할 수 있도록 &lt;a href="https://live.lge.co.kr/lg-fosslight/">2021년 오픈소스로 공개&lt;/a>한 프로젝트입니다. LG전자의 김경애 님은 2023년 &lt;a href="https://openchain-project.github.io/OpenChain-KWG/meeting/17th/230328_FOSSLight_2023_%EB%A1%9C%EB%93%9C%EB%A7%B5_%EA%B3%B5%EC%9C%A0.pdf">FOSSLight Roadmap&lt;/a>을 소개하였습니다.&lt;/p>
&lt;p>&lt;img src="./Untitled_12.png" alt="Untitled">&lt;/p>
&lt;p>FOSSLight Project는 2023년 보안 취약점 기능을 개선하고, SBOM 기능 강화, UX개선 등의 로드맵을 가지고 있습니다.&lt;/p>
&lt;p>&lt;img src="./Untitled_13.png" alt="Untitled">&lt;/p>
&lt;h3 id="요즘-olive-써봤니-카카오-황은경">요즘 OLIVE 써봤니? (카카오, 황은경)&lt;/h3>
&lt;p>&lt;a href="https://olive.kakao.com/">OLIVE Platform&lt;/a>은 카카오에서 개발한 오픈소스 라이선스 검증 서비스이며, 카카오 계정 뿐만 아니라 GitHub, Google, Facebook 등의 계정만 있으면 누구나 무료로 사용할 수 있습니다.&lt;/p>
&lt;p>카카오의 황은경 님은 OLIVE Platform의 주요 기능을 소개하였습니다.&lt;/p>
&lt;p>&lt;img src="./Untitled_14.png" alt="Untitled">&lt;/p>
&lt;p>OLIVE Platform은 소스 코드 노출이 우려되는 경우에도 안심하고 사용할 수 있는 OLIVE CLI 기능이 추가되어 보안에 민감한 금융권에서도 도입될 수 있었습니다.&lt;/p>
&lt;p>&lt;img src="./Untitled_15.png" alt="Untitled">&lt;/p>
&lt;h3 id="onot-이제-제법-쓸만해졌어요-카카오-한현민">onot, 이제 제법 쓸만해졌어요! (카카오, 한현민)&lt;/h3>
&lt;p>&lt;a href="https://github.com/sktelecom/onot">onot&lt;/a>은 SK텔레콤과 카카오가 공동 개발한 오픈소스 프로젝트 입니다. &lt;a href="https://spdx.org/">SPDX&lt;/a> 규격으로 작성된 SBOM을 오픈소스 고지문으로 자동 변환하는 도구입니다. 카카오의 한현민 님은 최근 onot에 추가된 신규 기능에 대해 소개하였습니다. 발표 자료는 &lt;a href="https://openchain-project.github.io/OpenChain-KWG/meeting/17th/openchain_kwg_17th_onot.pdf">여기&lt;/a>에서 확인할 수 있습니다.&lt;/p>
&lt;p>&lt;img src="./Untitled_16.png" alt="Untitled">&lt;/p>
&lt;p>onot은 Package 정보뿐만 아니라 File 정보도 추출하게 되었고, Multi License 표기도 지원하게 되었습니다. RDF/xml 형태의 SPDX 문서도 오픈소스 고지문을 생성할 수 있으며, 특히 Windows PC에서의 GUI와 같은 보다 편리한 사용 환경을 지원하게 되었습니다.&lt;/p>
&lt;p>&lt;img src="./Untitled_17.png" alt="Untitled">&lt;/p>
&lt;h2 id="글을-마치며">글을 마치며&lt;/h2>
&lt;p>3년여만에 오프라인으로 모인 모임은 짧은 시간이 아쉬울 정도로 알찼습니다. 멋진 장소와 기념품, 추첨 상품까지 준비해준 라인플러스 이서연 님, 김동혁 님께 다시 한번 감사드립니다.&lt;/p>
&lt;p>&lt;img src="./Untitled_18.png" alt="Untitled">&lt;/p>
&lt;p>기업들은 오픈소스 관리 업무에서 비슷한 어려움을 겪게 되는데, 이를 어떻게 극복하고 효율화하였는지를 공유하는 것은 서로에게 큰 도움이 됩니다. OpenChain Korea Work Group은 이러한 공감을 갖는 기업의 담당자가 자발적으로 참여하는 모임입니다. OpenChain Korea Work Group은 기업/기관에서 오픈소스 관리 업무를 담당하시는 누구나 참여할 수 있습니다. : &lt;a href="https://openchain-project.github.io/OpenChain-KWG/about/subscribe/">가입 방법&lt;/a>&lt;/p>
&lt;p>끝으로, OpenChain KWG는 분기마다 정기 미팅을 개최하고 있습니다. 다음 모임은 카카오에서 만날 수 있을 것 같습니다.&lt;/p>
&lt;p>그때까지 모두 행복하세요! 😃&lt;/p></description></item><item><title>Blog: 기업의 효과적인 오픈소스 관리 방안 (1) 글로벌 협력을 위한 OpenChain Project</title><link>/blog/2023/20230327_openchain_project/</link><pubDate>Tue, 28 Mar 2023 00:00:00 +0000</pubDate><guid>/blog/2023/20230327_openchain_project/</guid><description>
&lt;img src="/blog/2023/20230327_openchain_project/featured_meeting_hubba6bb9c56471dcb0bb524b477f05d67_720074_640x0_resize_catmullrom_2.png" width="640" height="390"/>
&lt;p>기업이 개발하는 제품 소프트웨어의 93% 이상이 오픈소스를 사용한다고 할 정도로 현대 소프트웨어 개발에 오픈소스를 사용하는 건 거의 필수적입니다. 그런데, 사용하는 오픈소스의 53%는 라이선스 컴플라이언스 이슈가 있고, 81%는 보안 취약점을 갖고 있다는 &lt;a href="https://www.synopsys.com/blogs/software-security/open-source-trends-ossra-report/">보고가 있습니다&lt;/a>. 복잡한 현대 소프트웨어의 개발환경과 방대한 Software Supply Chain을 고려한다면, 기업이 오픈소스로 제품을 개발하면서 라이선스 컴플라이언스와 보안 취약점 리스크 최소화를 위한 오픈소스 관리 노력이 필요한데요, &lt;a href="https://www.linuxfoundation.org/">Linux Foundation&lt;/a>의 &lt;a href="openchainproject.org">OpenChain Project&lt;/a>는 이러한 노력을 커뮤니티 차원에서 여러 기업이 공유와 협업으로 함께 하기 위한 Project입니다.&lt;/p>
&lt;p>2023년 3월 27일, OpenChain Project의 General Manager인 &lt;a href="https://github.com/shanecoughlan">Shane Coughlan&lt;/a>이 SK텔레콤을 방문하여 OpenChain Project의 주요 활동, 오픈소스 관련 국제 표준 및 글로벌 동향에 관해 설명하는 시간을 가졌습니다.&lt;/p>
&lt;p>&lt;img src="Untitled.png" alt="Untitled">&lt;/p>
&lt;p>이 자리에는 SK텔레콤 &lt;a href="https://sktelecom.github.io/about/osrb/">OSRB&lt;/a>와 SK그룹 오픈소스 협의체 멤버(SK플래닛, SK쉴더스, SK(주), Supex추구협의회 등)가 참여하여 다양한 의견을 나누었는데요,&lt;/p>
&lt;p>&lt;img src="featured_meeting.png" alt="Untitled">&lt;/p>
&lt;p>이날 Shane은 OpenChain Project에 대해 소개하고, 어떻게 글로벌 협력을 통해 Software Supply Chain에서의 오픈소스 관리 이슈를 공동으로 해결해 가는지 설명하였습니다. 이 글에서는 주요 내용을 소개하려고 합니다.&lt;/p>
&lt;h2 id="openchain-project-global-community">OpenChain Project Global Community&lt;/h2>
&lt;p>Software Supply Chain 이슈 관리를 위해 OpenChain Project를 통해 여러 글로벌 기업이 협력하고 있습니다. : &lt;a href="https://www.openchainproject.org/community">https://www.openchainproject.org/community&lt;/a>&lt;/p>
&lt;h3 id="platinum-members">Platinum Members&lt;/h3>
&lt;p>&lt;img src="Untitled_2.png" alt="Untitled">&lt;/p>
&lt;h3 id="community-structure">Community Structure&lt;/h3>
&lt;p>OpenChain Project에는 &lt;a href="https://www.openchainproject.org/participate">다수의 Work Group&lt;/a>이 있으며, 각 Work Group에서는 오픈소스 관리를 위한 표준을 만들고 자동화 도구를 함께 개발하고 있습니다. 또한 국가별로 Work Group이 결성되어 있습니다.&lt;/p>
&lt;p>&lt;img src="Untitled_3.png" alt="Untitled">&lt;/p>
&lt;h2 id="openchain-standard">OpenChain Standard&lt;/h2>
&lt;h3 id="isoiec-52302020-isoiec-dis-18974">ISO/IEC 5230:2020, ISO/IEC DIS 18974&lt;/h3>
&lt;p>가장 가시적인 결과는 오픈소스 관리를 위한 최초의 국제 표준을 개발한 것입니다. 2020년 12월, &lt;a href="https://www.iso.org/standard/81039.html">ISO/IEC 5230&lt;/a>이 오픈소스 컴플라이언스를 위한 유일한 국제 표준으로 등록되었습니다. &lt;a href="https://www.iso.org/standard/86450.html">ISO/IEC DIS 18974&lt;/a>는 오픈소스 보안 보증 컴플라이언스를 위한 사실상의 표준이며, 2023년 하반기에 ISO 표준으로 공식 등록될 예정입니다.&lt;/p>
&lt;p>이들 표준은 기업이 오픈소스를 관리하는데 꼭 필요한 핵심 요구사항을 정의하고 있습니다. 기업은 이 표준의 요구사항을 준수함으로 Software Supply Chain 내에서 오픈소스 관리가 이뤄지고 있음을 투명하게 나타낼 수 있습니다.&lt;/p>
&lt;p>&lt;img src="Untitled_4.png" alt="Untitled">&lt;/p>
&lt;h3 id="self-certification">Self-Certification&lt;/h3>
&lt;p>OpenChain Project에서는 &lt;a href="https://github.com/OpenChain-Project/Reference-Material/tree/master/Self-Certification">Self-Certification&lt;/a>을 위한 Checklist도 제공하는데요. 기업은 Checklist 항목을 하나하나 준수해 가면서 기업의 오픈소스 관리 수준을 높일 수 있습니다.&lt;/p>
&lt;p>&lt;img src="Untitled_5.png" alt="Untitled">&lt;/p>
&lt;h3 id="adoption-of-openchain-isoiec-52302020">Adoption of OpenChain ISO/IEC 5230:2020&lt;/h3>
&lt;p>Checklist의 모든 항목을 준수하는 기업이라면, ISO/IEC 5230 준수 기업으로 선언할 수 있게 됩니다. ISO/IEC 5230을 채택하였다고 선언한 기업 리스트는 다음과 같습니다. LG전자, 카카오, 삼성전자, 네이버, SK텔레콤, NCSOFT, 현대자동차그룹 등 여러 국내 기업도 볼 수 있습니다.&lt;/p>
&lt;p>&lt;img src="Untitled_6.png" alt="Untitled">&lt;/p>
&lt;h2 id="other-interesting-items">Other Interesting Items&lt;/h2>
&lt;h3 id="online-webinar">Online Webinar&lt;/h3>
&lt;p>OpenChain Project에서는 오픈소스 관리에 대한 &lt;a href="https://www.openchainproject.org/webinars">온라인 웨비나&lt;/a>를 계속하고 있습니다.&lt;/p>
&lt;p>&lt;img src="Untitled_7.png" alt="Untitled">&lt;/p>
&lt;h3 id="training-courses">Training Courses&lt;/h3>
&lt;p>오픈소스 라이선스 컴플라이언스를 위한 &lt;a href="https://www.openchainproject.org/resources">Free Training Course&lt;/a>가 제공되고 있으며, 이수 시 Badge도 취득할 수 있습니다.&lt;/p>
&lt;p>&lt;img src="Untitled_8.png" alt="Untitled">&lt;/p>
&lt;p>이러한 Training Course는 여러 기업이 소속 직원 혹은 Supplier에게 이수를 요구하는 등 다양하게 활용되기도 합니다.&lt;/p>
&lt;p>&lt;img src="Untitled_9.png" alt="Untitled">&lt;/p>
&lt;h2 id="update-on-china-and-japan">Update on China and Japan&lt;/h2>
&lt;h3 id="china">China&lt;/h3>
&lt;p>중국에서도 OpenChain Project와의 협력이 활발히 일어나고 있습니다. 특히 &lt;a href="http://www.caict.ac.cn/english/">CAICT&lt;/a>와 &lt;a href="https://www.cc.cesi.cn/english.aspx">CESI&lt;/a>와 같은 중국 정부 기관과도 협력 방안을 논의하고 있습니다.&lt;/p>
&lt;p>OpenChain China Work Group에는 Huawie, Honor 및 OPPO와 같은 기업도 활발히 참여하고 있으며, 약 250명의 멤버로 구성되어 있습니다.&lt;/p>
&lt;p>2023년 2분기부터 매 분기 OpenChain과 CAICT가 공동 주관하는 이벤트가 예정되어 있으며, &lt;a href="https://openinventionnetwork.com/">OIN&lt;/a>과 함께하는 Asian Legal Network (ALN)도 다시 시작하기로 하였다고 합니다.&lt;/p>
&lt;h3 id="japan">Japan&lt;/h3>
&lt;p>&lt;a href="https://openchain-project.github.io/OpenChain-JWG/">OpenChain Japan Work Group&lt;/a>은 약 190명의 멤버가 참여하고 있습니다. Fujitsu, Hitachi, NEC, Panasonic, Sony, Toshiba 및 Toyota가 지속적으로 지원하고 있으며, 격월로 커뮤니티 이벤트가 개최됩니다.&lt;/p>
&lt;p>&lt;a href="https://todogroup.org/">TODO Group&lt;/a>과 협력하여 2주마다 OSPO 이벤트도 개최하고 있습니다.&lt;/p>
&lt;h2 id="korea-market---challenge-and-opportunities">Korea market - challenge and opportunities&lt;/h2>
&lt;h3 id="current-situation">Current situation&lt;/h3>
&lt;p>&lt;a href="https://openchain-project.github.io/OpenChain-KWG/">OpenChain Korea Work Group&lt;/a>은 규모나 열정 측면에서 일본에 이어 세계에서 두 번째로 영향력 있는 훌륭한 Work Group입니다. SK텔레콤, LG전자, 삼성전자, 현대자동차 등 주요 기업이 참여하고 있으며, NIPA에서도 후원 등의 방식으로 참여하고 있습니다.&lt;/p>
&lt;p>그러나 글로벌 경기 침체에서 한국도 자유롭지 못하다는 위기는 있습니다. 또한, &lt;a href="https://www.openchainproject.org/community">OpenChain Board&lt;/a>에 한국 기업 멤버가 없다는 점도 아쉽습니다.&lt;/p>
&lt;h3 id="opportunities">Opportunities&lt;/h3>
&lt;p>OpenChain Korea Work Group이 지금처럼 커뮤니티 미팅과 활동을 지속한다면 기회는 계속될 것입니다. 가능하다면, 일본과 중국처럼 정부의 오픈소스 정책에 OpenChain 표준을 포함시키기 위해 노력하고 이를 위해 정부 기관의 참여를 촉진하면 좋을 것입니다.&lt;/p>
&lt;p>끝으로, OpenChain Board에 한국 기업이 참여한다면, OpenChain Project의 전략적 다양성이 증대되고, 글로벌 Supply Chain에서의 영향력을 키울 수 있을 것입니다.&lt;/p>
&lt;h2 id="글을-마치며">글을 마치며&lt;/h2>
&lt;p>OpenChain Project는 기업의 오픈소스 관리 영역도 오픈소스의 공유와 협업 방식을 적용하여 모두 함께 적은 비용과 리소스로 높은 수준의 리스크 관리 practice를 달성하기 위한 커뮤니티입니다. 이러한 취지에 공감하는 기업들이 모여 있는 곳이 &lt;a href="https://openchain-project.github.io/OpenChain-KWG/">OpenChain Korea Work Group&lt;/a>입니다. OpenChain Korea Work Group에는 100명에 가까운 기업의 오픈소스 담당자들이 메일링리스트에 가입하여 활동하고 있습니다. 마침 코로나 이후 3년만에 오프라인 모임이 3월 28일에 있었습니다. 다음 글에서 이에 대해 자세히 다루겠습니다.&lt;/p>
&lt;p>Shane과의 미팅 세션 이후에는 SK텔레콤 Tech HR팀의 후원으로 맛있는 점심을 즐겼습니다. (&lt;a href="https://kr.linkedin.com/in/ksangki">상기&lt;/a>님 감사합니다~ ^^ )&lt;/p>
&lt;p>&lt;img src="Untitled_10.png" alt="Untitled">&lt;/p>
&lt;p>감사합니다.&lt;/p></description></item><item><title>Blog: Akka는 더 이상 오픈소스가 아닙니다.</title><link>/blog/2022/20220930_akka_license_change/</link><pubDate>Fri, 30 Sep 2022 00:00:00 +0000</pubDate><guid>/blog/2022/20220930_akka_license_change/</guid><description>
&lt;img src="/blog/2022/20220930_akka_license_change/featured_akka_hu515c71a488a6766b364d7f25ac0e66ab_48953_640x0_resize_catmullrom_2.png" width="640" height="235"/>
&lt;blockquote>
&lt;p>오픈소스로 시작한 소프트웨어 기업이 라이선스 정책을 변경하는 사례가 증가하고 있는데요, 그동안 Apache-2.0으로 오픈소스 라이선스 정책을 유지해오던 미국의 Lightbend사도 2022년 9월, Akka의 라이선스를 BUSL-1.1 (Business Source License)로 변경한다고 발표하였습니다.&lt;br>
Business Source License가 무엇인지, Lightbend가 Akka의 라이선스를 BSL로 변경한 배경과 그 영향은 무엇인지에 대해 알아보겠습니다.&lt;/p>
&lt;/blockquote>
&lt;h2 id="akka란">Akka란?&lt;/h2>
&lt;p>&lt;a href="https://github.com/akka/akka">Akka&lt;/a>는 JVM에서 여러 개의 thread가 동시에 작업하는 분산 애플리케이션을 &lt;a href="https://doc.akka.io/docs/akka/current/typed/guide/actors-intro.html">Actor Model&lt;/a>을 기반으로 단순화하는 툴킷으로 live chatting 등 주로 고성능이 요구되는 백엔드 플랫폼에 사용된다고 합니다.&lt;/p>
&lt;p>&lt;img src="./featured_akka.png" alt="">&lt;/p>
&lt;h2 id="라이선스-변경">라이선스 변경&lt;/h2>
&lt;p>미국의 Ligntbend 사는 2022년 9월 Akka의 라이선스를 &lt;a href="https://akka.io/">변경&lt;/a>하였습니다.&lt;/p>
&lt;p>&lt;img src="./akka_license_change.png" alt="">&lt;/p>
&lt;p>라이선스 변경의 주요 내용은 다음과 같습니다.&lt;/p>
&lt;ul>
&lt;li>오픈소스(Apache-2.0)이었던 Akka가 v2.7 부터 새로운 라이선스가 적용된다.&lt;/li>
&lt;li>새로운 라이선스는 &lt;a href="https://spdx.org/licenses/BUSL-1.1.html">BUSL-1.1&lt;/a> (Business Source License)이다.&lt;/li>
&lt;li>상업적 목적이 아닌 경우 무료로 사용할 수 있으나, 상업용에 대해서는 라이선스 비용을 지불해야 한다.&lt;/li>
&lt;/ul>
&lt;p>Lightbend는 지난 십여 년간 Apache-2.0으로 Akka 오픈소스 프로젝트를 지원해 왔지만 이를 지속하기가 어려워졌다고 &lt;a href="https://www.lightbend.com/blog/why-we-are-changing-the-license-for-akka">밝혔습니다&lt;/a>.&lt;/p>
&lt;blockquote>
&lt;p>Over the years, Lightbend has steadily borne more of the support for Akka. With Akka now considered critical infrastructure for many large organizations, the Apache 2.0 model becomes increasingly risky when a small company solely carries the maintenance effort. Balancing the global demands of our corporate community while supporting these needs of a vast open source base is a tremendous weight to bear.&lt;/p>
&lt;/blockquote>
&lt;p>결국 Lightbend도 Apache-2.0 오픈소스 모델을 지속하는 것을 포기하고, BUSL-1.1이란 &amp;ldquo;Source Available&amp;rdquo; 라이선스를 도입하여 커뮤니티에는 소스 코드를 공개하지만, 기업 사용자에게는 라이선스 비용을 청구하여 수익을 창출하고자 하였습니다. 오픈소스로 소프트웨어를 개발하는 기업이 수익성을 향상하기 위해 라이선스 정책을 변경하는 사례는 2018년 이후 증가하고 있습니다. MongoDB의 SSPL이 대표적인 사례이며, Elasticsearch는 Elastic License를 도입하였습니다. 이에 대한 세부 내용은 이전 글, &amp;lsquo;&lt;a href="https://devocean.sk.com/opensource/techBoardDetail.do?ID=163055">Elastic License 2.0 (부제: 진화하는 오픈소스 라이선스)&lt;/a>&amp;lsquo;에서 확인하실 수 있습니다. Lightbend도 이러한 배경과 수익성을 고려하여 라이선스 변경을 결정하였다고 추측할 수 있습니다.&lt;/p>
&lt;p>BUSL-1.1은 Akka 이전에도 여러 오픈소스이었던 프로젝트에 적용된 바 있습니다.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mariadb.com/bsl-faq-mariadb/">MariaDB&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.cockroachlabs.com/blog/oss-relicensing-cockroachdb/">CockroachDB&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.sentry.io/2019/11/06/relicensing-sentry/">Sentry&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/MaterializeInc/materialize/blob/main/LICENSE">materialize&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="business-source-license">Business Source License&lt;/h2>
&lt;p>&lt;a href="https://spdx.org/licenses/BUSL-1.1.html">BUSL-1.1&lt;/a>은 오픈소스 라이선스와 무엇이 다를까요?&lt;/p>
&lt;h3 id="non-production-use에-한하여-사용-권리-부여">non-production use에 한하여 사용 권리 부여&lt;/h3>
&lt;p>BUSL-1-1은 일반적인 오픈소스 라이선스와는 달리 &lt;code>non-production use&lt;/code>에 한하여 복사, 수정, 재배포 등을 할 수 있는 권리를 부여합니다.&lt;/p>
&lt;blockquote>
&lt;p>The Licensor hereby grants you the right to copy, modify, create derivative works, redistribute, and make non-production use of the Licensed Work.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>non-production use&lt;/code>에 해당하지 않을 경우, Licensor에게 commercial license를 구매할 것을 요구합니다.&lt;/p>
&lt;blockquote>
&lt;p>If your use of the Licensed Work does not comply with the requirements currently in effect as described in this License, you must purchase a commercial license from the Licensor, &amp;hellip;&lt;/p>
&lt;/blockquote>
&lt;p>따라서, BUSL-1.1이 적용된 Akka 버전 (v2.7 이후)를 사용하는 기업은 더 이상 무료로 Akka를 사용할 수 없으며, Lightbend에게 &lt;a href="https://www.lightbend.com/akka#pricing">상용 라이선스를 구매&lt;/a>해야 합니다.&lt;/p>
&lt;h3 id="change-date-change-license">Change Date, Change License&lt;/h3>
&lt;p>BUSL-1.1 또 다른 특징은 &lt;code>Change Date&lt;/code>와 &lt;code>Change License&lt;/code>입니다. BUSL-1.1이 적용된 버전의 소프트웨어가 릴리즈된 이후 &lt;code>Change Date&lt;/code>가 지나면 &lt;code>Change License&lt;/code>가 적용되며 더 이상 BUSL-1.1이 적용되지 않게 됩니다.&lt;/p>
&lt;blockquote>
&lt;p>Effective on the Change Date, or the fourth anniversary of the first publicly available distribution of a specific version of the Licensed Work under this License, whichever comes first, the Licensor hereby grants you rights under the terms of the Change License, and the rights granted in the paragraph above terminate.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://www.lightbend.com/akka/license">Akka의 BUSL-1.1&lt;/a>의 경우 &lt;code>Change Date&lt;/code>는 릴리즈 후 3년이며, &lt;code>Change License&lt;/code>는 Apache-2.0입니다.&lt;/p>
&lt;p>&lt;img src="./akka_busl.png" alt="">&lt;/p>
&lt;p>예를 들어, Akka 2.8이 2023년 1월 1일에 릴리즈되었다면, 3년이 지난 후, 2026년 1월 1일부터는 Apache-2.0이 적용되어 기업도 무료로 사용이 가능합니다. BUSL-1.1은 이러한 &lt;code>Change License&lt;/code> 조항을 제공하여 신규 버전을 사용하려면 돈을 내고 써야 하지만 오래된 버전은 상용 목적의 사용이라고 하더라도 무료로 사용할 수 있게 하였습니다. 이는 소프트웨어의 Heavy user인 대기업에는 비용을 청구하겠다는 의지로 보입니다.&lt;/p>
&lt;h3 id="additional-use-grant">Additional Use Grant&lt;/h3>
&lt;p>BUSL-1.1은 Licensor가 일정 조건 하에 상용 목적의 사용자에게 권리를 부여할 수 있도록 하는 &lt;code>Additioanl Use Grant&lt;/code> 조항을 갖고 있습니다.&lt;/p>
&lt;blockquote>
&lt;p>The Licensor may make an Additional Use Grant, above, permitting limited production use.&lt;/p>
&lt;/blockquote>
&lt;p>따라서, Licensor는 필요에 따라 사용자의 상용 목적의 소프트웨어 사용을 허락할 수 있습니다. 예를 들어, Lightbend는 &lt;a href="https://www.playframework.com/">Play Framework&lt;/a>를 사용하여 application을 개발하는 과정에서 akka가 활용되는 경우는 akka를 사용할 수 있다고 &lt;a href="https://www.lightbend.com/akka/license">허용하였습니다&lt;/a>.&lt;/p>
&lt;blockquote>
&lt;p>Additional Use Grant: If you develop an application using a version of Play Framework that utilizes binary versions of akka-streams and its dependencies, you may use such binary versions of akka-streams and its dependencies in the development of your application only as they are incorporated into Play Framework and solely to implement the functionality provided by Play Framework; provided that, they are only used in the following way: Connecting to a Play Framework websocket and/or Play Framework request/response bodies for server and play-ws client.&lt;/p>
&lt;/blockquote>
&lt;h2 id="akka의-라이선스-faq">Akka의 라이선스 FAQ&lt;/h2>
&lt;p>Lightbend는 Akka의 라이선스 변경과 관련한 &lt;a href="https://www.lightbend.com/akka/license-faq">FAQ를 제공&lt;/a>하고 있는데요, 여기서는 몇 가지 주요한 내용만 소개하겠습니다.&lt;/p>
&lt;h3 id="스타트업-규모의-회사에는-무료로-제공">스타트업 규모의 회사에는 무료로 제공&lt;/h3>
&lt;p>먼저 &lt;a href="https://www.lightbend.com/akka#pricing">Akka의 가격표&lt;/a>를 보면 연간 매출이 2,500만 달러 미만의 스타트업 회사에는 무료로 제공됩니다.&lt;/p>
&lt;h3 id="이전-버전의-akka는-계속-사용할-수-있나">이전 버전의 Akka는 계속 사용할 수 있나?&lt;/h3>
&lt;p>이전 버전의 라이선스는 변경 없이 Apache-2.0입니다. 그러나 추가적인 기능, 개선 사항, non-critical security updates, non-critical bug fix는 제공되지는 않습니다. 2.6.x 버전의 경우, 향후 1년간, 즉 2023년 9월까지만 Apache-2.0으로 critical security updates와 critical bug fix만 제공됩니다.&lt;/p>
&lt;h3 id="production을-위해-사용하기도-하고-개발-테스트-나-staging으로사용하기도-합니다-어떤-경우에-상용-라이선스가-필요한가요">Production을 위해 사용하기도 하고, 개발, 테스트 나 Staging으로사용하기도 합니다. 어떤 경우에 상용 라이선스가 필요한가요?&lt;/h3>
&lt;p>Production을 위해 사용하는 소프트웨어 사본에 대한 상용 라이선스만 있으면 됩니다.&lt;/p>
&lt;h3 id="수익과-관련-없는-정부-부처에서-일하는데-상용-라이선스-구매가-필요한가요">수익과 관련 없는 정부 부처에서 일하는데, 상용 라이선스 구매가 필요한가요?&lt;/h3>
&lt;p>&lt;code>non-production use&lt;/code>가 아닌 production에 Akka를 사용한다면 정부 부처에서도 상용 라이선스 구매가 요구됩니다.&lt;/p>
&lt;blockquote>
&lt;p>Government departments using Akka in production will require a commercial license.&lt;/p>
&lt;/blockquote>
&lt;h3 id="busl-11이-적용된-소프트웨어의-일부를-apache-20이-적용된-older-version에-backport해도-되나요">BUSL-1.1이 적용된 소프트웨어의 일부를 Apache-2.0이 적용된 older version에 backport해도 되나요?&lt;/h3>
&lt;p>아니요, 이는 Lightbend의 저작권을 침해하는 것뿐만 아니라 Apache-2.0을 위반하는 것입니다.&lt;/p>
&lt;blockquote>
&lt;p>No. In this circumstance, you would either violate Lightbend’s copyright by re-releasing the code under Open Source, or you would violate the earlier Akka version’s Apache license by introducing incompatible BSL code (i.e., code subject to a use limitation not allowed by the Open Source Apache 2.0 license).&lt;/p>
&lt;/blockquote>
&lt;h2 id="마치며">마치며&lt;/h2>
&lt;p>기업의 오픈소스 거버넌스 역할은 갈수록 중요해지고 있습니다. 오픈소스를 제품에 사용하면서 오픈소스 라이선스의 의무를 준수하여 오픈소스 고지, 소스 코드 공개 등의 활동은 기업이 지켜야 할 기본적인 컴플라이언스 활동입니다. 그런데 얼마 전부터는 오픈소스 라이선스 의무 준수뿐만 아니라 오픈소스이었던 소프트웨어가 BUSL-1.1과 같이 상용 구매를 요구하는 라이선스로 변경되는 사례가 증가하고 있습니다. 따라서, 오픈소스를 사용하여 제품/서비스를 개발하는 기업은 이러한 라이선스 변경 소프트웨어에 대한 빠른 대처가 필요합니다. 그렇지 않을 경우, 라이선스 위반으로 큰 손실이 발생 될 수 있음을 기억해야 합니다.&lt;/p>
&lt;p>특히 기업은 SBOM(Software Bill of Materials) 관리 체계를 구축하여, 이번 Akka와 같이 라이선스 변경 사례를 확인하였을 경우, 기업 내 어느 제품/서비스 혹은 내부 시스템에 Akka가 사용되고 있는지, 그 버전은 무엇인지를 바로 확인하고, 필요한 조치 (older version 사용, 혹은 사용 라이선스 구매)를 취할 수 있어야 하겠습니다.&lt;/p>
&lt;p>감사합니다.&lt;/p></description></item><item><title>Blog: SFC vs. Vizio 판결 겉핥기</title><link>/blog/2022/20220614_sfc_vizio/</link><pubDate>Tue, 14 Jun 2022 00:00:00 +0000</pubDate><guid>/blog/2022/20220614_sfc_vizio/</guid><description>
&lt;blockquote>
&lt;p>안녕하세요, &lt;a href="https://haksungjang.github.io/">장학성&lt;/a>입니다.&lt;/p>
&lt;p>&lt;a href="https://sfconservancy.org/">SFC&lt;/a>(Software Freedom Conservancy)가 GPL 위반을 이유로 미국의 스마트 TV 제조사인 &lt;a href="https://www.vizio.com/">Vizio&lt;/a>에 소송을 제기하였는데요, 지난 2022년 5월 13일, 이와 관련한 미국 연방 법원의 &lt;a href="https://storage.courtlistener.com/recap/gov.uscourts.cacd.837808/gov.uscourts.cacd.837808.30.0.pdf">판결&lt;/a>이 있었습니다.&lt;/p>
&lt;p>이번 판결의 배경과 시사점을 수박 겉핥기로 정리해보았습니다. 제가 법률 전문가가 아니기 때문에 용어나 해석에 있어서 오류가 있을 수 있습니다. 여러 전문가분께서 &lt;a href="https://github.com/haksungjang/haksungjang.github.io/issues/new">피드백&lt;/a> 주시면 고맙겠습니다. ^^&lt;/p>
&lt;/blockquote>
&lt;h2 id="references">References&lt;/h2>
&lt;p>먼저 이 글을 작성하면서 참고한 references를 밝힙니다.&lt;/p>
&lt;ul>
&lt;li>PROCEEDINGS: (IN CHAMBERS) ORDER GRANTING PLAINTIFF’S MOTION TO REMAND : &lt;a href="https://storage.courtlistener.com/recap/gov.uscourts.cacd.837808/gov.uscourts.cacd.837808.30.0.pdf">https://storage.courtlistener.com/recap/gov.uscourts.cacd.837808/gov.uscourts.cacd.837808.30.0.pdf&lt;/a>&lt;/li>
&lt;li>Software Freedom Conservancy files right-to-repair lawsuit against California TV manufacturer Vizio Inc. for alleged GPL violations : &lt;a href="https://sfconservancy.org/copyleft-compliance/vizio.html">https://sfconservancy.org/copyleft-compliance/vizio.html&lt;/a>&lt;/li>
&lt;li>SFC Files GPL Enforcement Suit Against Vizio Advancing Novel Legal Theories : &lt;a href="https://heathermeeker.com/2021/11/09/sfc-files-gpl-enforcement-suit-against-vizio-advancing-novel-legal-theories/">https://heathermeeker.com/2021/11/09/sfc-files-gpl-enforcement-suit-against-vizio-advancing-novel-legal-theories/&lt;/a>&lt;/li>
&lt;li>First Update on the Vizio lawsuit : &lt;a href="https://sfconservancy.org/blog/2021/nov/30/vizio-update-0/">https://sfconservancy.org/blog/2021/nov/30/vizio-update-0/&lt;/a>&lt;/li>
&lt;li>SFC v. Vizio remanded back to California state courts : &lt;a href="https://lwn.net/Articles/895405/">https://lwn.net/Articles/895405/&lt;/a>&lt;/li>
&lt;li>Software Freedom Conservancy right-to-repair lawsuit against California TV manufacturer Vizio, Inc. remanded to California State Court : &lt;a href="https://sfconservancy.org/news/2022/may/16/vizio-remand-win/">https://sfconservancy.org/news/2022/may/16/vizio-remand-win/&lt;/a>&lt;/li>
&lt;li>미국 법원 &amp;ldquo;GPL도 계약&amp;rdquo;…소비자의 코드 요구권 인정 : &lt;a href="https://zdnet.co.kr/view/?no=20220518145132">https://zdnet.co.kr/view/?no=20220518145132&lt;/a>&lt;/li>
&lt;li>오픈소스 라이선스 위반과 저작권 침해 : &lt;a href="https://olis.or.kr/library/openSwDetail.do?bbsId=103&amp;amp;bbsNum=26400">https://olis.or.kr/library/openSwDetail.do?bbsId=103&amp;amp;bbsNum=26400&lt;/a>&lt;/li>
&lt;li>오픈소스 라이선스에 대한 법적 효력 : &lt;a href="https://www.copyright.or.kr/information-materials/trend/the-copyright/download.do?brdctsno=10231&amp;amp;brdctsfileno=4699">https://www.copyright.or.kr/information-materials/trend/the-copyright/download.do?brdctsno=10231&amp;amp;brdctsfileno=4699&lt;/a>&lt;/li>
&lt;li>연방 법원(Federal Court) 특징 : &lt;a href="https://lawandstory.com/%EC%97%B0%EB%B0%A9-%EB%B2%95%EC%9B%90federal-court-%ED%8A%B9%EC%A7%95/">https://lawandstory.com/연방-법원federal-court-특징/&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="1-배경지식">1. 배경지식&lt;/h2>
&lt;p>지난 5월 18일, &amp;ldquo;&lt;a href="https://zdnet.co.kr/view/?no=20220518145132">미국 법원 &amp;ldquo;GPL도 계약&amp;rdquo;…소비자의 코드 요구권 인정&lt;/a>&amp;ldquo;이라는 제목의 기사가 나왔는데요, 다음과 같은 문장은 뭔가 중요한 말인 것 같은데 정확히 어떤 의미인지 잘 이해가 되지 않았습니다.&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&amp;ldquo;조세핀 L. 스테튼 미국 지방법원 판사는 판결문에서 &amp;ldquo;GPLv2가 저작권법으로 제공하는 권리와 추가 계약 약속의 집행은 별도로 구별되는 추가 요소에 해당한다는 SFC의 주장이 연방법에 의해 선점되지 않으므로 (상급법원으로) 환송한다&amp;quot;고 밝혔다.&amp;rdquo;
&lt;/div>
&lt;p>그래서 호기심에 몇몇 자료들을 찾아보았고, 나름대로 이해한 바를 정리해 보았습니다. 저와 비슷한 고민이 있으셨던 분들께 도움이 되길 바랍니다.&lt;/p>
&lt;h3 id="1-1-저작권법과-계약법">1-1 저작권법과 계약법&lt;/h3>
&lt;h4 id="저작권법">저작권법&lt;/h4>
&lt;ul>
&lt;li>이용권자(라이선시)는 저작권법이 허락 하는 이용 방법 및 조건의 범위 안에서 저작물을 이용 가능
&lt;ul>
&lt;li>여기서 ‘이용&amp;rsquo;은 복제, 공중 송신, 배포, 이차적저작물 작성 등의 저작재산권이 부여하는 행위만을 뜻하고, ‘사용&amp;rsquo;행위는 포함하지 않음&lt;/li>
&lt;li>‘사용&amp;rsquo;행위에 대한 방법이나 조건이 있다면 이를 위반하여도 저작재산권 침해는 성립하지 않고, 계약위반으로 인한 책임만 부담&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>이용권자(라이선시)가 저작권법이 허락하는 이용 방법과 조건의 범위를 벗어나는 행위를 한다면 저작권 침해에 해당&lt;/li>
&lt;li>저작권 침해에 해당한다면 저작권법 위반으로 형사처벌, 금지 청구 가능&lt;/li>
&lt;/ul>
&lt;h4 id="계약법">계약법&lt;/h4>
&lt;ul>
&lt;li>일반적으로 계약은 라이센서(오픈소스라면 copyright owner)와 라이선시 사이의 합의&lt;/li>
&lt;li>계약법에 의한 책임을 물으려면 우선 양 당사자 사이에 정당하게 계약이 성립되었음이 요구됨&lt;/li>
&lt;li>계약(합의)’의 효력으로서 부담하는 의무에 위반한 경우에는 채무불이행으로 인한 계약 책임만 부담
&lt;ul>
&lt;li>저작권 침해처럼 형사처벌이나 금지 청구를 당할 염려는 없으며 약정된 손해배상액을 물어주어야 함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>오픈소스 라이선스 하의 저작물을 계약의 성립이 구성된다고 보는 것은 관할권마다 다툼의 여지가 있음&lt;/li>
&lt;li>손해배상의 액수나 구제 조치 등에 있어서 제한적&lt;/li>
&lt;/ul>
&lt;h4 id="사례">사례&lt;/h4>
&lt;ul>
&lt;li>GPL software의 저작권자가 저작권 침해 주장으로 소송 제기
&lt;ul>
&lt;li>예: Harald Welte, Patrick McHardy)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Jacobsen v. Katzer 판례
&lt;ul>
&lt;li>라이선스 조건을 부과하고 있는 저작권 라이선스가 준수되지 아니한 경우에는 저작권 침해&lt;/li>
&lt;li>라이선스 규정이 조건(condition)이라면 저작권법이 적용되고 합의사항 (covenants)에 불과하다면 계약법 적용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>한컴 vs. 아티팩스
&lt;ul>
&lt;li>한컴은 계약 서명과 같은 행위 또는 상호 합의 과정이 없었기 때문에 계약 위반이 아니라고 주장&lt;/li>
&lt;li>법원은 계약 위반에 해당한다고 판결&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="1-2-미국-연방-법원-federal-court와-주-법원-state-court">1-2 미국 연방 법원 (Federal Court)와 주 법원 (State Court)&lt;/h3>
&lt;ul>
&lt;li>미국에는 연방 법원과 주 법원이 있으며, 각각 다른 성격의 사건을 다룬다.
&lt;ul>
&lt;li>주 법원 : 대체로 주민의 개인적인 삶에 영향을 미치는 사건 (가정법, 유언법 등)&lt;/li>
&lt;li>연방 법원
&lt;ul>
&lt;li>지역 법원 (District Court), 항소 법원 (Appellate Court), 대법원 (Supreme Court)로 이루어져 있음&lt;/li>
&lt;li>제한된 사건만 다루고 있음 : 헌법, 연방 범죄, 군법, 지적재산권 등&lt;/li>
&lt;li>저작권법(Copyright Act)은 연방 법원에서 다룸&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>미국에서는 연방 법원에서 저작권 주장에 대한 독점적인 관할권을 갖고 있다.
&lt;ul>
&lt;li>따라서, 과거 미국에서의 GPL 소송을 위한 거의 모든 주장은 저작권법에 대한 독점 관할권을 가진 연방 법원(Federal Court)에 제기됐다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>소장을 엉뚱한 법원에 제출한다면, 사건은 기각되거나 다른 법원으로 이송된다.
&lt;ul>
&lt;li>즉, 주 법원(State Court)에 제기된 action이 연방 법원에 의해 선점(preempt)되는 경우 제거될 수 있음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="2-sfc-vs-vizio-소송-히스토리">2. SFC vs. Vizio 소송 히스토리&lt;/h2>
&lt;p>SFC는 2021년 10월에 Vizio를 상대로 소송을 제기하였습니다. 당시 소송 내용과 이후 히스토리는 다음과 같습니다.&lt;/p>
&lt;h3 id="2021-10-19">2021-10-19&lt;/h3>
&lt;ul>
&lt;li>SFC는 Vizio를 상대로 &lt;a href="https://www.vizio.com/en/smartcast">SmartCast&lt;/a> TV와 관련하여 GPL 및 LGPL을 위반했다고 주 법원에 &lt;a href="https://sfconservancy.org/docs/software-freedom-conservancy-v-vizio-complaint-2021-10-19.pdf">소송&lt;/a>을 제기
&lt;ul>
&lt;li>plaintiff : Software Freedom Conservancy, Inc. (”&lt;a href="https://sfconservancy.org/">SFC&lt;/a>”)&lt;/li>
&lt;li>defendant : Vizio, Inc. (”&lt;a href="https://www.vizio.com/">Vizio&lt;/a>”)&lt;/li>
&lt;li>allege :
&lt;ul>
&lt;li>Vizio uses “at least twenty-five programs, including the Linux kernel software” in its smart TVs that are covered by the GPL Agreements,&lt;/li>
&lt;li>Vizio does not make the corresponding source code for these programs available to purchasers of its smart TVs.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>seek :
&lt;ul>
&lt;li>to enforce SFC’s right to have access to the source code corresponding to the executable code resident on Vizio’s devices covered by the GPL Agreements.&lt;/li>
&lt;li>as a remedy to its breach of contract claim, SFC seeks to compel Vizio to make the source code available&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>claim :
&lt;ol>
&lt;li>breach of contract and&lt;/li>
&lt;li>declaratory relief (선언적 판결)
&lt;ul>
&lt;li>선언적 판결이란 미국의 민사소송법 내 절차로 판사가 민사소송에서 당사자들의 권리, 의무, 책임 등을 선언하는 것을 말하며 이때 어떤 이행 명령이나 조치, 또는 배상을 명령하지는 않음. 특허 등의 소송의 경우, 침해혐의자가 특허권자를 상대로 비침해, 무효, 권리 불행사의 확인을 구하는 소 또는 반소 등으로 사용됨.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>참고 : “&lt;a href="https://openchain-project.github.io/OpenChain-KWG/meeting/12th/">최근 소송 사례 : Stockfish v. ChessBase, SFC v. Vizio (박원재)&lt;/a>”&lt;/li>
&lt;/ul>
&lt;h3 id="2021-11-29">2021-11-29&lt;/h3>
&lt;p>이에 대해 Vizio는 다음과 같이 반박하였습니다.&lt;/p>
&lt;ul>
&lt;li>GPL을 위반하는 것은 저작권 침해에 해당&lt;/li>
&lt;li>저작권법은 연방 법원이 선점(preemption)하기 때문에 주 법원에서 다룰 사안이 아님&lt;/li>
&lt;li>저작권법하에서 저작권 소유자만 GPL 및 LGPL에 따라 소스 코드를 요청할 권리가 있고, SFC가 소비자로서 소스 코드를 요구할 권리는 없다.&lt;/li>
&lt;/ul>
&lt;p>그렇기 때문에, Vizio는 주 법원에 제기된 이 사건을 연방 법원에서 맡아줄 것을 요청(&lt;a href="https://storage.courtlistener.com/recap/gov.uscourts.cacd.837808/gov.uscourts.cacd.837808.1.0.pdf">NOTICE of REMOVAL of ACTION to FEDERAL COURT&lt;/a>)하였습니다.&lt;/p>
&lt;p>만약 이를 연방 법원이 승인할 경우, 미국 저작권법에 따라 심사가 진행되어야 하고, SFC는 저작권자가 아니기 때문에 원고로서의 자격조차 없게 됩니다.&lt;/p>
&lt;h3 id="in-response">In Response,&lt;/h3>
&lt;p>SFC는 이러한 Vizio의 주장에 반박하며 이 사건을 다시 주 법원으로 환송하기 위한 요청서(Motion to Remand)를 연방 법원에 제출하였습니다.&lt;/p>
&lt;h3 id="2022-05-13">2022-05-13&lt;/h3>
&lt;p>연방 법원은 SFC의 Motion to Remand를 승인&lt;a href="https://storage.courtlistener.com/recap/gov.uscourts.cacd.837808/gov.uscourts.cacd.837808.30.0.pdf">(ORDER GRANTING PLAINTIFF&amp;rsquo;S MOTION TO REMAND)&lt;/a>하여 이 사건을 주 법원으로 환송하였습니다.&lt;/p>
&lt;h2 id="3-주목할-만한-사항">3. 주목할 만한 사항&lt;/h2>
&lt;p>이번 소송은 기존 GPL 소송 사례와는 여러 새로운 면이 있습니다. 미국의 오픈소스 전문 변호사인 Heather Meeker는 이에 대해 아래와 같이 &lt;a href="https://heathermeeker.com/2021/11/09/sfc-files-gpl-enforcement-suit-against-vizio-advancing-novel-legal-theories">설명하였습니다&lt;/a>.&lt;/p>
&lt;h3 id="3-1-계약-위반breach-of-contract과-특정-이행specific-performance">3-1. 계약 위반(Breach of Contract)과 특정 이행(Specific Performance)&lt;/h3>
&lt;ul>
&lt;li>과거에는 거의 모든 GPL 소송이 저작권 침해 주장으로 제기되었음&lt;/li>
&lt;li>하지만, 이번 소송은 저작권법이 아닌 계약법 하의 claim&lt;/li>
&lt;li>금전적 손해 배상(monetary damages)이 아닌 모든 TV 구매자에게 copyleft license가 요구하는 technical information을 제공할 것을 요구 (소스 코드 공개)
&lt;ul>
&lt;li>“damages”에 대한 보상이 아닌 소스 코드 공개를 요구 : “specific performance”&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>계약법에서 금전적 손해를 제외한 모든 구제 청구는 특정 이행(specific performance)을 요구하는 것임 (specific performance는 계약법에서는 드문 구제 방법&lt;/li>
&lt;li>일반적으로 원고가 계약을 위반한 피고에게 보상금 대신 specific performance를 요구하는 경우는, 돈으로 대체할 수 없는 것을 원하기 때문&lt;/li>
&lt;/ul>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">specific performance&lt;/h4>
Fulfilling the requirements of a contract in exactly the way the contract specifies. When most contracts are disputed in court, the plaintiff expects to receive money, that they can use to remedy the harm that the other party caused them in not holding up their side of the deal. When a plaintiff seeks specific performance, they want something that money can’t replace.
&lt;/div>
&lt;h3 id="3-2-claim-brought-in-state-court">3-2. Claim Brought in State Court&lt;/h3>
&lt;ul>
&lt;li>미국에서는 연방 법원에서 저작권 주장에 대한 독점적인 관할권을 갖고 있음&lt;/li>
&lt;li>따라서, 과거 미국에서의 GPL 소송을 위한 거의 모든 주장은 저작권법에 대한 독점 관할권을 가진 연방 법원에 제기했다.&lt;/li>
&lt;li>하지만 이번 SFC가 제기한 소송은 Orange County, California 주 법원에 제기하였다.&lt;/li>
&lt;li>주 법원 소송은 연방 법원에 비해 예측 불가하고, 결과가 일관적이지 않으며, 새로운 법률 이론에 대해 예상치 못한 견해를 보일 가능성이 있다.&lt;/li>
&lt;/ul>
&lt;h3 id="3-3-no-author-as-plaintiff">3-3. No Author as Plaintiff&lt;/h3>
&lt;ul>
&lt;li>SFC는 제품의 구매자로서 소송을 제기&lt;/li>
&lt;li>과거 GPL 소송의 원고는 GPL software의 저작권 소유자였다.&lt;/li>
&lt;li>이와 달리, 이 소송의 원고는 SFC이고, Vizio TV를 구매한 소비자로서 소송 제기&lt;/li>
&lt;li>SFC는 저작권 소유자뿐만 아니라 제품의 소비자도 소스 GPL 코드를 받을 권리가 있음을 증명하고자 함&lt;/li>
&lt;/ul>
&lt;h3 id="3-4-declaratory-relief">3-4. Declaratory Relief&lt;/h3>
&lt;ul>
&lt;li>이 소송은 본질적으로 법원에 GPL 및 LGPL이 법적으로 집행 가능하고 (enforceable) Vizio가 이를 위반하였음을 선언하도록 요청했다.&lt;/li>
&lt;li>GPL을 계약으로 본다고 해도, 일반적으로 계약은 licensor (i.e. code copyright owner)와 licensee 사이의 계약이기 때문에 SFC는 계약 당사자로 보기 어렵다.&lt;/li>
&lt;li>그래서, SFC는 자신과 모든 소비자가 계약의 제삼자 수혜자 (third party beneficiary)라는 이론으로 소송을 제기하였다.
&lt;ul>
&lt;li>Third Party Beneficiary : 계약서의 당사자가 아니면서 계약서를 강행하도록 소송을 걸 수 있는 사람을 의미, 즉, 계약서의 당사자가 아니더라도 계약의 이익에 직접적으로 관여된 사람을 의미&lt;/li>
&lt;li>GPL의 제삼자 수혜자 : GPL 계약의 당사자는 아니지만, GPL 계약 당사자들이 계약을 성실히 수행할 때 혜택을 얻을 수 있는 자. 이러한 혜택의 한 예는 GPL software의 소스 코드를 받는 것임&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">third-party beneficiaries of the GPL&lt;/h4>
People who aren’t a party to a GPL agreement, but who would benefit from the contract if the parties to the GPL do as they promise under the agreement. An example of such a benefit might be the receipt of the source code of the GPL’d software. See also General Public License (GPL).
&lt;/div>
&lt;h2 id="4-연방-법원-판결-주요-내용-2022-05-13">4. 연방 법원 판결 주요 내용 (2022-05-13)&lt;/h2>
&lt;p>2022년 5월 13일 연방 법원에서는 어떤 내용의 판결을 했는지 살펴보겠습니다.&lt;/p>
&lt;h3 id="4-1-주요-관건">4-1. 주요 관건&lt;/h3>
&lt;p>법원은 우선 연방 법원에서 판단해야 할 주요 관건을 다음과 같이 설명하였습니다.&lt;/p>
&lt;ul>
&lt;li>법원이 결정해야 할 유일한 문제는 federal Copyright Act (연방 저작권법)이 SFC의 claim (breach of contract and declaratory relief)을 완전히 선점(preempt)하여 연방 관할권을 생성하는지 여부이다.&lt;/li>
&lt;li>만약 claim이 연방 저작권법에서 다루는 일반적인 저작권 범위 내의 권리(복제, 2차 저작물 배포 및 전시에 대한 배타적 권리 등)와 동등하다면 연방 저작권법에 의해 선점되기 때문에 연방 관할권을 생성한다.&lt;/li>
&lt;li>만약 사건이 연방 저작권법에 의해 선점되지 않는다고 주장하려면, 소송 원인이 저작권이 보호하는 권리 이외의 권리를 보호해야 하고, 이에 해당하는 “extra element”가 있어서 소송의 성격을 변경할 수 있어야 한다.&lt;/li>
&lt;/ul>
&lt;h3 id="4-2-관련-판례--versata-software-vs-ameriprise">4-2. 관련 판례 : &amp;ldquo;Versata Software vs. Ameriprise&amp;rdquo;&lt;/h3>
&lt;ul>
&lt;li>GPL이 derivative work에 대해 소스 공개를 요구하는 건 저작권 의무와는 별개이다.&lt;/li>
&lt;li>피고는 저작권 침해로 소송을 제기당한게 아니다.
&lt;ul>
&lt;li>오픈소스 프로그램을 포함하는 파생 저작물에 대한 ‘additional obligation : 소스 공개 의무 미준수’을 위반했기 때문에 원고로부터 소송을 당한 것이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>이처럼 저작권법에 의해 제공되는 권리에 해당하지 않는 “additional contractual promise”은 “extra element”에 해당한다.&lt;/li>
&lt;/ul>
&lt;h3 id="4-3-sfc의-claim이-extra-element인지-여부">4-3. SFC의 Claim이 “extra element”인지 여부&lt;/h3>
&lt;ul>
&lt;li>저작권법의 보호 목적은 저작물을 복제, 배포, 전시할 수 있는 사람을 제한하는 독점권이다.&lt;/li>
&lt;li>그러나 저작권법은 소스 코드를 받을 권리를 부여하지 않는다. 이런 권리는 오히려 저작권법이 보호하는 독점권과 정반대이다.&lt;/li>
&lt;li>저작권자가 아닌 SFC가 GPL agreement의 제삼자 수혜자로서의 지위를 주장하는 것은 저작권법에 따른 권리와는 다르다.&lt;/li>
&lt;li>즉, SFC가 GPL agreement의 제삼자 수혜자 (third-party beneficiary)로서 소스 코드를 받을 자격이 있다고 주장하는 건 “extra element”이다.&lt;/li>
&lt;/ul>
&lt;h3 id="4-4-vizio의-주장이-유효한지-여부">4-4. Vizio의 주장이 유효한지 여부&lt;/h3>
&lt;ul>
&lt;li>Vizio는 오픈소스 라이선스 위반은 저작권 침해라고 주장하지만, SFC는 이번 소송에서 저작권 침해에 대한 claim을 하지 않았다.
&lt;ul>
&lt;li>원고가 claim하지 않은 사항을 법원이 판단할 이유는 없다.&lt;/li>
&lt;li>게다가 SFC는 저작권자가 아니기 때문에 그런 주장조차 할 수 없다.&lt;/li>
&lt;li>SFC는 저작권법에 의해 Vizio의 복제, 파생저작물 제작 등을 하는 것을 제한하려는 것이 아니라, 소스 코드를 제공하도록 요청할 뿐이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Vizio는 소스 코드 제공이 라이선스의 ‘condition’이므로 이를 위반하는 건 ‘계약 위반&amp;rsquo;이 아니라 ‘저작권 침해&amp;rsquo;에 해당한다고 주장하였다.
&lt;ul>
&lt;li>따라서 SFC의 ‘contract claim’은 저작권 침해로 전환되어야 한다고 주장하였다.&lt;/li>
&lt;li>하지만 “수행 의무가 발생하기 전에 반드시 발생해야 하는 행위 또는 사건&amp;rdquo; 이라는 condition 위반 만이 저작권 침해를 구성할 수 있으며, 이외 다른 모든 license terms, covenants의 위반은 계약법에 의해서만 소송이 가능하다&lt;/li>
&lt;li>또한, 모호한 계약 조항은 condition이 아니라 covenant로 해석한다&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="4-5-판결">4-5 판결&lt;/h3>
&lt;ul>
&lt;li>SFC의 주장이 저작권법에 의해 완전히 선점되지 않았다.
&lt;ul>
&lt;li>GPL 계약은 저작권 라이선스뿐만 아니라 계약(contractual agreement)의 기능을 모두 수행한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>따라서, 연방 법원은 관할권이 없으며 주 법원으로의 환송 신청을 승인한다(the Motion to Remand is GRANTED).&lt;/li>
&lt;/ul>
&lt;h2 id="5-시사점">5. 시사점&lt;/h2>
&lt;p>이번 판결에 대해 SFC는 많은 사람이 GPL은 저작권 라이선스로만 기능한다고 알고 있는데, 저작권 라이선스 뿐만 아니라 계약으로서도 기능한다는 것을 보여준 Copyleft license 역사에서의 분수령이 된 순간이라고 말하였습니다. 또한, SFC는 이 소송이 GPL의 제삼자 수혜자로서의 개인 소비자의 권리에 초점을 맞춘 최초의 법적 사례이며, 이런 소비자의 권리를 주 법원에서 증명할 기회를 기대하고 있다고 &lt;a href="https://sfconservancy.org/news/2022/may/16/vizio-remand-win/">밝혔습니다&lt;/a>.&lt;/p>
&lt;p>사실 저는 국내 기사만을 (대충) 봤을 때는 SFC가 소송에서 이겼고, 이제 일반 소비자도 기업을 대상으로 GPL 소스 코드를 요구할 법적 권리가 생긴 줄로 생각했는데, 이번 판결 내용은 그에 대한 최종 판결을 한 것은 아니었습니다. 앞으로 주 법원에서 이를 위한 다툼을 할 수 있는 기회를 부여 받은 판결로 이해됩니다.&lt;/p>
&lt;p>끝으로, 이에 관련한 &lt;a href="https://heathermeeker.com/2021/11/09/sfc-files-gpl-enforcement-suit-against-vizio-advancing-novel-legal-theories/">Heather Meeker의 의견&lt;/a>은 좋은 참고가 됩니다.&lt;/p>
&lt;ul>
&lt;li>SFC는 GPL 소송 기준을 새롭게 만들려고 노력하고 있다. 환영할 만하지만 역효과도 우려된다.
&lt;ul>
&lt;li>지난 25년간 GPL software를 사용하여 제품을 만드는 많은 회사는 GPL 소송에 크게 걱정하지 않았다.&lt;/li>
&lt;li>만약 이번 소송에서 SFC가 승소한다면, 기업은 GPL code를 사용하는 데 부담을 가질 수 있고, 이는 free software의 확산에 걸림돌이 될 수 있다.&lt;/li>
&lt;li>또한, 일반 대중이 GPL 소송을 제기할 수 있게 되는 경우, 금전적인 이익만을 목적으로 하는 트롤이 나타날 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>SFC의 시도가 성공할 수 있을지도 아직은 모른다.
&lt;ul>
&lt;li>연방 법원이 이 사건을 기각하지 않고 주 법원으로 환송했다는 것은 SFC의 주장을 모두 받아들였다고 보기보다는 단순히 사건이 연방 법원에 적절하지 않으며, 따라서 기각할 근거도 없기 때문에 환송했다고 볼 수 있다.&lt;/li>
&lt;li>일단, SFC는 GPL의 제삼자 수혜자로서 피고에 소스 코드 공개를 요청할 자격이 있다고 주장할 입지를 얻었다.&lt;/li>
&lt;li>하지만, 앞으로 이 소송은 복잡하고, 길어질 수 있으며, 큰 비용이 들어갈 수 있다.&lt;/li>
&lt;li>대부분의 GPL 소송은 대개 신속히 합의로 해결되기도 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>이상으로 정리를 마치며, 다시 잘 이해되지 않았던 &lt;a href="https://zdnet.co.kr/view/?no=20220518145132">국내 기사&lt;/a>를 보겠습니다.&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&amp;ldquo;조세핀 L. 스테튼 미국 지방법원 판사는 판결문에서 &amp;ldquo;GPLv2가 저작권법으로 제공하는 권리와 추가 계약 약속의 집행은 별도로 구별되는 추가 요소에 해당한다는 SFC의 주장이 연방법에 의해 선점되지 않으므로 (상급법원으로) 환송한다&amp;quot;고 밝혔다.&amp;rdquo;
&lt;/div>
&lt;p>이제 이해가 되는 것 같습니다. 그런데, 여전히 왜 &amp;ldquo;(상급법원으로)&amp;rdquo; 환송한다고 표현했는지는 잘 모르겠습니다. 미국 지방법원은 연방 법원에 해당하고, 이 사건은 주 법원으로 환송하는 건데, 왜 &amp;ldquo;(상급법원으로)&amp;rdquo; 환송한다고 표현했을까요? 오타일까요, 미국에서는 주 법원을 상급법원으로 표현하나요? 아니면 제가 뭔가를 잘 못 이해하고 있는걸끼요? 법률 전문가 분의 &lt;a href="https://github.com/haksungjang/haksungjang.github.io/issues/new">의견&lt;/a> 부탁 드려봅니다. :)&lt;/p>
&lt;p>감사합니다.&lt;/p></description></item><item><title>Blog: 이너소스 도입을 위한 과제와 효과</title><link>/blog/2022/20220403_innersource/</link><pubDate>Sun, 03 Apr 2022 00:00:00 +0000</pubDate><guid>/blog/2022/20220403_innersource/</guid><description>
&lt;img src="/blog/2022/20220403_innersource/featured_innersource_hu7b241fcb77f1a51b14fea6a11068a61a_314689_640x0_resize_catmullrom_2.png" width="640" height="415"/>
&lt;p>안녕하세요, 장학성입니다.&lt;/p>
&lt;p>이너소스(Inner Source)는 오픈소스 개발방법론을 사내에 도입하여 조직간 공유와 협업을 극대화하고, 빠른 개발 속도와 투명한 커뮤니케이션, 코드 품질 향상 등의 효과를 기대하기 위한 방법입니다.&lt;/p>
&lt;p>이너소스를 위한 방법은 여러 문서에서 설명하고 있는데요, 오늘은 다음 자료에서 언급하고 있는 이너소스를 시작하는 방법과 기대효과에 대해 간략히 정리하였으니 참고하시기 바랍니다.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://little-canada.org/tmp/books/oreilly/Programming/getting-started-with-innersource.pdf">Getting Started with InnerSource (Keys to collaboration and productivity inside your company) / Adny Oram&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="./featured_innersource.png" alt="">&lt;/p>
&lt;h2 id="1-오픈소스-practice-주요-사항">1. 오픈소스 Practice 주요 사항&lt;/h2>
&lt;p>먼저, 오픈소스 개발방법론에서 강조하는 주요 Practice를 살펴보겠습니다. 어떻게 거대한 오픈소스 프로젝트가 자발적인 참여에 의해 성장해갈 수 있을까요? 왜 오픈소스 프로젝트에 참여하면 개발자 개인의 성장을 이룰 수 있다고 할까요? 오픈소스 프로젝트에는 다음과 같은 주요 Practice가 있기 때문입니다.&lt;/p>
&lt;h3 id="1-조직간-협업">(1) 조직간 협업&lt;/h3>
&lt;ul>
&lt;li>오픈소스 프로젝트에서는 코드를 전 세계에 공유하기 때문에 이를 누구나 자유롭게 보고, 배우고, 개선할 수 있습니다.&lt;/li>
&lt;li>branch를 자유롭게 만들고, 병합하기 위한 rule이 있고, 이를 가능하게 하는 tool이 있습니다.&lt;/li>
&lt;li>이로써 근무지와 무관하게 동일한 code에서 작업할 수 있습니다.&lt;/li>
&lt;/ul>
&lt;h3 id="2-문서화">(2) 문서화&lt;/h3>
&lt;ul>
&lt;li>오픈소스 프로젝트는 Code에 대해서 가능한 자세히 문서화를 합니다.&lt;/li>
&lt;li>이런 문서화가 소프트웨어 아키텍처 개선으로 이어집니다. 문서로 설명하다 보면 복잡하고 직관적이지 않은 아키텍처의 변경 필요성에 공감하게 됩니다.&lt;/li>
&lt;li>문서화가 잘 되어 있는 프로젝트는 신규 Contributor의 유입도 수월하게 합니다.&lt;/li>
&lt;/ul>
&lt;h3 id="3-continous-test">(3) Continous Test&lt;/h3>
&lt;ul>
&lt;li>일반적으로 오픈소스 프로젝트는 각 기여를 객관적으로 test하는 엄격한 시스템을 구축합니다. 이로써 collaborator 간 신뢰를 유지하게 하고, 코드 품질을 보장합니다.&lt;/li>
&lt;li>즉, 변경사항을 commit 하기 전 quality를 보장하기 위해 확인하는 tool과 절차가 있습니다.
&lt;ul>
&lt;li>unit test&lt;/li>
&lt;li>continuous integration&lt;/li>
&lt;li>code coverage&lt;/li>
&lt;li>static analysis 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>각 개발자는 자신의 code에 대한 unit test를 작성해야 합니다.&lt;/li>
&lt;/ul>
&lt;h3 id="4-모든-communication-및-의사결정이-투명하게-공개됨">(4) 모든 Communication 및 의사결정이 투명하게 공개됨&lt;/h3>
&lt;ul>
&lt;li>오픈소스 프로젝트에서의 모든 communication은 공개되고 이력으로 남습니다.&lt;/li>
&lt;li>주로 mailing list로 토론에 기반하여 의사 결정을 합니다.&lt;/li>
&lt;li>모든 communication이 문서화 되고, 이력으로 남기 때문에 누구나 문서를 통해 프로젝트를 이해하고 새롭게 참여할 수 있습니다.&lt;/li>
&lt;/ul>
&lt;h3 id="5-개발자-실력을-인정-받을-수-있고-다른-개발자-멘토링">(5) 개발자 실력을 인정 받을 수 있고, 다른 개발자 멘토링&lt;/h3>
&lt;ul>
&lt;li>많은 commit을 기여한 개발자라면 그 프로젝트에 이해도가 높은 개발자로 간주할 수 있습니다.&lt;/li>
&lt;li>이러한 개발자는 Trusted Committer로 인정 받게 됩니다.&lt;/li>
&lt;li>Trusted Committer는 다른 개발자의 작업을 review / 승인하는 자격이 주어집니다.&lt;/li>
&lt;li>또한, contributor에게 멘토링을 제공함으로 우수 개발자로 성장시키는 역할을 수행합니다.&lt;/li>
&lt;/ul>
&lt;h2 id="2-이너소스-도입-효과">2. 이너소스 도입 효과&lt;/h2>
&lt;p>기업이 1에서 설명한 오픈소스 Practice를 사내에 도입하는 것을 이너소스(Inner Source)라고 부릅니다. 참고로, Inner Source는 &lt;a href="https://innersourcecommons.org/">InnerSource Commons&lt;/a> 등의 커뮤니티에서 보다 체계적으로 기법과 Practice를 발전시키고 있습니다.&lt;/p>
&lt;p>그럼 기업이 이너소스를 도입하면 어떤 효과를 기대할 수 있을까요?&lt;/p>
&lt;ol>
&lt;li>조직 전체적으로 code 재사용이 늘어납니다.
&lt;ul>
&lt;li>각 팀의 개발자가 다른 팀이 개발한 모듈 및 아키텍처를 이해하고 활용하거나 기여할 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Code Quality가 개선됩니다.
&lt;ul>
&lt;li>unit test, code coverage, CI (continous integration), static analysis, code review 등을 통해 quality가 개선됩니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>개발 속도가 빨라진다.
&lt;ul>
&lt;li>개발자가 unit test, code coverage, CI (continous integration)를 배워 감에 따라 bug가 줄고, 개발 속도가 빨라집니다.&lt;/li>
&lt;li>communication을 written comment로 하는 것이 처음에는 시간이 걸리는 것처럼 보이지만, 새로운 개발자가 시스템을 빨리 배울 수 있게 하여 개발 속도 향상에 더 도움이 됩니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>개발자들이 code design, test, 문서화에 대한 새로운 기술을 배우면서 code design에 대해 보다 포괄적으로 고민하게 됩니다.&lt;/li>
&lt;li>개발자들이 문서화를 더 잘하게 되고, 이는 다른 팀원이 프로젝트를 더 잘 이해해서 더 많은 기여를 할 수 있게 도와줍니다.&lt;/li>
&lt;li>개발자들에게 권한을 부여함으로써 지적 성장과 직업 만족도를 높일 수 있습니다.&lt;/li>
&lt;/ol>
&lt;h2 id="3-이너소스-도입을-위한-과제">3. 이너소스 도입을 위한 과제&lt;/h2>
&lt;p>이번에는 이너소스를 도입하려는 기업이 고려해야 할 과제에 대해 알아보겠습니다.&lt;/p>
&lt;p>사내에 source code를 공개하고 공유하는 것만으로 아너소스의 효과를 기대할 수는 없습니다. 반드시 다음의 사항이 함께 수반되어야 합니다.&lt;/p>
&lt;ol>
&lt;li>Repository내의 모든 code에 대한 문서화&lt;/li>
&lt;li>협업을 위해 Github과 같은 협업 환경 및 가이드 제공&lt;/li>
&lt;li>test 환경 구축 및 rule 수립 : 신규 유입 code의 quality 보장하기 위함
&lt;ul>
&lt;li>code가 commit되기 전에 code coverage test를 code의 90% 이상에서 실행&lt;/li>
&lt;li>commit이 되면 자동 build trigger&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>다른 조직으부터의 기여를 encourage하기 위해 modular architecture와 API 정의&lt;/li>
&lt;li>참여자들에게 수행한 작업에 대한 자부심을 갖게 하고, Conference에서 발표하거나 Blog에 글을 기고하는 것을 적극 권장&lt;/li>
&lt;/ol>
&lt;h2 id="4-개발자는-왜-이너소스-프로젝트에-참여해야-하나">4. 개발자는 왜 이너소스 프로젝트에 참여해야 하나?&lt;/h2>
&lt;p>사내에 이너소스 환경이 구축되었지만, 개발자 입장에서 당장 팀 내의 과제를 수행하다 보면 다른 팀의 코드를 보거나 기여하는 게 엄두가 나지 않을 수 있습니다. 하지만, 개발자 자신의 성장을 위해서라도 이너소스 프로젝트에 참여하는 것이 도움이 됩니다.&lt;/p>
&lt;ol>
&lt;li>외부 오픈소스 프로젝트에 바로 참여하기 전에 사내 이너소스 프로젝트에 참여함으로써 오픈소스 Practice를 배우고 익숙해질 수 있습니다.
&lt;ul>
&lt;li>이너소스에서는 code review, commit, test가 오픈소스 방식으로 수행됩니다.&lt;/li>
&lt;li>문서화에 익숙해집니다.&lt;/li>
&lt;li>Test, 문서화에 대한 새로운 기술을 배우면서 code design에 대해 보다 포괄적으로 고민하는 우수 개발자가 될 수 있습니다,&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Trusted Committer와 Contributor 간의 communication을 지켜보고 있는 것 자체가 도움이 됩니다.&lt;/li>
&lt;/ol>
&lt;p>개발자가 오픈소스에 기여해야 하는 이유에 대해서는 다음 블로그에서도 언급하고 있으니 참고하시기 바랍니다. : &amp;ldquo;&lt;a href="https://devocean.sk.com/opensource/techBoardDetail.do?ID=159274">개발자가 오픈소스에 기여해야 하는 이유&lt;/a>&amp;rdquo;&lt;/p>
&lt;p>감사합니다.&lt;/p></description></item><item><title>Blog: 상용 AI 서비스에 공개 Dataset을 사용해도 되나요?</title><link>/blog/2022/20220214_ai_dataset_copyright/</link><pubDate>Mon, 14 Feb 2022 00:00:00 +0000</pubDate><guid>/blog/2022/20220214_ai_dataset_copyright/</guid><description>
&lt;img src="/blog/2022/20220214_ai_dataset_copyright/featured_procedure_hudaab2914c5c3dd86326cd7f91192134e_257378_640x0_resize_catmullrom_2.png" width="640" height="1324"/>
&lt;p>안녕하세요, 장학성입니다.&lt;/p>
&lt;p>AI는 사용하지 않는 기업이 없을 정도로 현대 비즈니스에 중요한 기술이 되었습니다. AI 서비스를 만들기 위해서는 많은 양의 data가 필요한데요, 공개 Dataset&lt;sub>publicly available datasets&lt;/sub>도 널리 사용되고 있습니다. 다만 공개 Dataset이라고 하더라도 저작권이 있기 때문에 이를 상용 AI 서비스에 사용하려면 저작권 침해 등 법적 리스크를 최소화하기 위해 라이선스 측면의 확인이 필요합니다.&lt;/p>
&lt;p>오늘은 이와 관련하여 최근 발표된 논문인 &lt;b>Can I use this publicly available dataset to build commercial AI software?&amp;ndash; A Case Study on Publicly Available Image Datasets&lt;/b>을 소개하려고 합니다. : &lt;a href="https://arxiv.org/abs/2111.02374">https://arxiv.org/abs/2111.02374&lt;/a>&lt;/p>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>&amp;ldquo;Can I use this publicly available dataset to build commercial AI software? &amp;ndash; A Case Study on Publicly Available Image Datasets&amp;rdquo;&lt;/p>
&lt;p>&lt;i>- Gopi Krishnan Rajbahadur, Erika Tuck, Li Zi, Dayi Lin, Boyuan Chen, Zhen Ming (Jack)Jiang, Daniel Morales German&lt;/i>&lt;/p>
&lt;/div>
&lt;p>이 글을 통해 공개 Dataset을 활용한 AI 서비스를 준비하면서 저작권 침해를 최소화하기 위해 어떤 노력과 절차를 거쳐야 하는지에 대한 인사이트를 얻을 수 있기를 바랍니다.&lt;/p>
&lt;h2 id="1-intro">1. Intro&lt;/h2>
&lt;p>이 논문에서는 먼저 공개 Dataset을 사용하기 위한 라이선스는 오픈소스 라이선스와는 달리 몇 가지 어려운 문제가 있다고 설명합니다.&lt;/p>
&lt;div class="alert alert-success" role="alert">
&lt;ol>
&lt;li>해당 Dataset에 대한 완전하고 정확한 라이선스를 식별하기가 어렵다.
&lt;ul>
&lt;li>예를 들어, Dataset을 제공하던 웹사이트가 폐쇄되는 경우도 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>해당 Dataset에 대한 라이선스가 유효한지 확인하는 것이 어렵다.
&lt;ul>
&lt;li>많은 Dataset은 여러 개의 Data Source를 결합하여 생성한다. 이러한 여러 Data Source는 각각 다른 라이선스가 적용된다.&lt;/li>
&lt;li>더구나 publicly available dataset의 작성자는 Dataset을 만들면서 사용한 다양한 Data Source의 라이선스를 거의 문서화하지 않는다.&lt;/li>
&lt;li>예를 들어, &lt;a href="https://www.cs.toronto.edu/~kriz/cifar.html">CIFAR-10&lt;/a> Dataset도 웹사이트에서 요구하는 유일한 라이선스는 ‘인용 요구' 뿐이고 그 외에는 설명하지 않는다.
&lt;ul>
&lt;li>하지만, &lt;a href="https://www.cs.toronto.edu/~kriz/cifar.html">CIFAR-10&lt;/a>는 상업적 이미지 사용을 제한할 수 있는 라이선스가 적용된 Google Images, Flickr와 같은 다양한 Data Source의 이미지를 크롤링하여 생성되었다.&lt;/li>
&lt;li>이러한 경우, &lt;a href="https://www.cs.toronto.edu/~kriz/cifar.html">CIFAR-10&lt;/a>의 라이선스만을 고려하는 것은 컴플라이언스 문제가 될 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Publicly available dataset에 적용된 라이선스는 일반적으로 모호하여 권리와 의무를 명확하게 설명하지 않는다.
&lt;ul>
&lt;li>이러한 Dataset을 사용하여 라이선스 리스크 없이 상용 AI software를 구축하는 것은 실제로 어렵다.&lt;/li>
&lt;li>예를 들어, GitHub Copilot은 Github에서 호스트되는 수십억 줄의 source code로 training한 대규모 AI Model을 사용한다.
&lt;ul>
&lt;li>그러나 오픈소스 라이선스에서는 소스 코드를 상업적 목적으로 AI Model을 training 하는 데 사용할 권리에 대해 명확하게 정의되지 않았다.&lt;/li>
&lt;li>이러한 모호성은 GitHub Copilot의 컴플라이언스에 대한 광범위한 법적 논쟁으로 이어졌다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;h3 id="github-copilot">GitHub Copilot&lt;/h3>
&lt;p>여기서 잠깐 GitHub Copilot과 관련한 논쟁에 대해 언급하고 넘어가겠습니다. 최근 미국의 SFC&lt;sub>Software Freedom Conversancy&lt;/sub>에서는 &amp;ldquo;&lt;a href="https://sfconservancy.org/blog/2022/feb/03/github-copilot-copyleft-gpl/">If Software is My Copilot, Who Programmed My Software?&lt;/a>&amp;ldquo;라는 글을 게재하여 Microsoft와 GitHub의 주장에 대하여 반박하였습니다.&lt;/p>
&lt;p>Copilot은 GitHub에 개발자의 코드 작성을 돕기 위해 공개된 source code를 학습한 AI 서비스이며, 여기에는 Copyleft software도 포함되어 있어서 법적 이슈가 되고 있습니다. 이에 대해 GitHub CEO인 Nat Friedman은 아래와 같이 반박하였는데요,&lt;/p>
&lt;div class="alert alert-success" role="alert">
&lt;ol>
&lt;li>ML system을 training 하기 위한 public data의 사용은 Fair Use이다.&lt;/li>
&lt;li>ML system에 의한 output은 시스템 operator에게 속한다&lt;sub>the output belongs to the operator&lt;/sub>.&lt;/li>
&lt;/ol>
&lt;/div>
&lt;p>하지만, SFC는 이러한 GitHub의 입장은 Copilot 다음과 같이 사용자에게 큰 피해를 줄 수 있다고 경고하였습니다. 따라서 다른 사람의 저작권을 침해하지 않으려면 Copilot을 사용하지 않는 것이 좋다는 입장을 표명하였습니다.&lt;/p>
&lt;div class="alert alert-success" role="alert">
&lt;ul>
&lt;li>“the output belongs to the operator”라는 GitHub의 주장은 잘못된 법적 정당성을 만든다.&lt;/li>
&lt;li>GitHub CEO의 진술은 GPL enforcement action에 직면할 수 있는 Copilot 사용자에 대한 배상 책임을 회피한다.&lt;/li>
&lt;li>결국 사용자가 Copilot의 output에 대한 ‘Fair Use’ 또는 ‘not copyrightable’하다는 방어책을 마련해야 한다는 말이다.&lt;/li>
&lt;/ul>
&lt;/div>
&lt;p>그러면서, SFC는 Microsoft와 GitHub는 copylefted code로 training 하는 것이 ‘Fair Use’인 이유와 trained model이 “work based on GPL’d software”가 아님을 증명해야 한다고 주장하였습니다.&lt;/p>
&lt;h2 id="2-background">2. Background&lt;/h2>
&lt;p>다시 오늘 살펴볼 논문으로 돌아오겠습니다. 논문에서는 Dataset과 관련한 법률 중 저작권법과 계약법에 관해 설명합니다.&lt;/p>
&lt;div class="alert alert-success" role="alert">
&lt;h4 class="alert-heading">저작권법&lt;/h4>
&lt;p>기본적으로 copyright-protected data는 저작권 소유자가 명시적으로 허용하지 않는 한 상업적으로 사용하거나 배포할 수 없다. publicly available dataset에도 저작권이 있는 data가 포함되었을 수 있다.&lt;/p>
&lt;ul>
&lt;li>이를 상업용 AI software를 개발하는 데 사용하면 잠재적으로 저작권 침해가 발생할 수 있다.&lt;/li>
&lt;li>다만, 특정 상황이나 국가에서는 저작권 소유자의 명시적 허가 없이 상업적 목적을 포함한 다양한 목적으로 저작권 보호 data를 사용하는 것이 허용될 수 있다
&lt;ul>
&lt;li>예를 들어, 미국에서는 최근 소송인 Authors Guild v. Google에서 제안한 바와 같이 저작권 보유자에게 실질적인 피해가 없을 때 Fair Use 원칙에 따라 copyrighted data를 사용하는 것이 허용된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>하지만, 이러한 Fair Use에 대한 판단은 국가마다 다를 수 있다.
&lt;ul>
&lt;li>영국과 캐나다에서는 저작권 침해에 대한 fair dealing exception에 따라 저작권 보유자의 명시적 허가 없이 copyright protected data를 비상업적 목적에 한하여 사용할 수 있다.&lt;/li>
&lt;li>EU에서는 Text and Data Mining Law에 따라 저작권 소유자의 명시적 허가 없이 비상업적 목적으로 copyright-protected material을 사용할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>이와 같이 상업용 AI software를 구축하기 위해 저작권으로 보호되는 data가 포함된 publicly available datasets를 사용하면 잠재적인 저작권 침해가 발생할 수 있다.&lt;/li>
&lt;/ul>
&lt;/div>
&lt;div class="alert alert-success" role="alert">
&lt;h4 class="alert-heading">계약법&lt;/h4>
&lt;p>계약법에 따르면 저작물(예: 이미지, 비디오)의 저작권 소유자는 다른 사람이 향유할 수 있는 권리와 그러한 권리를 향유하기 위해 이행해야 하는 의무를 설명하는 라이선스를 부여할 수 있다.&lt;/p>
&lt;ul>
&lt;li>라이선스 조건이 존중되지 않는 경우, 즉 라이선스에 의해 부여되지 않은 권리가 data에 의해 행사되거나 의무가 이행되지 않는 경우 (잠재적) 계약 위반 또는 계약 위반에 해당할 수 있다.&lt;/li>
&lt;/ul>
&lt;/div>
&lt;p>결국 공개 Dataset을 사용하여 AI 서비스를 개발하는 기업은 (Fair Use로 판단할 수 있는 경우를 제외한다면) 저작권침해, 계약법 위반 등을 방지하기 위하여 공개 Dataset과 관련된 권리와 의무를 확인하고 라이선스 컴플라이언스를 보장하기 위한 엄격한 접근 방식이 중요하다고 강조합니다.&lt;/p>
&lt;p>그런데 이후에 다시 언급하겠지만 사실 공개 Dataset을 사용하면서 Dataset, Data Source 뿐만 아니라 data point 등의 모든 라이선스를 확인하고 각각의 의무를 준수하는 것은 거의 불가능에 가깝습니다. 공개 Dataset을 사용하기 위해 일정 부분의 라이선스 리스크를 감수하거나 Fair Use라고 주장할 수 있는 법적 근거를 마련하는 것이 현실적인 대응 방안이라고 개인적으로 생각합니다.&lt;/p>
&lt;p>그럼 이 논문에서 제안하는 공개 Dataset을 상용 AI 서비스에 활용하기 위한 엄격한 접근 방식이 무엇인지 살펴보겠습니다.&lt;/p>
&lt;h2 id="3-approach">3. Approach&lt;/h2>
&lt;p>이 논문에서는 공개 Dataset을 사용하려는 AI engieer는 적용된 라이선스를 식별해야 하고, Lawyer는 해당 라이선스의 권리와 의무를 분석하여 상용 AI 서비스에 적용할 수 있는지 판단해야 함을 강조합니다.&lt;/p>
&lt;p>&lt;img src="./featured_procedure.png" alt="">&lt;/p>
&lt;p>먼저, Phase 1은 AI engineer에 의해 라이선스를 확인하는 과정입니다. 논문에서는 자세한 내용을 아래와 같이 설명합니다.&lt;/p>
&lt;div class="alert alert-success" role="alert">
&lt;h4 class="alert-heading">Phase 1 : License identification&lt;/h4>
&lt;h4 id="step-1-license-extraction">(Step 1) License extraction&lt;/h4>
&lt;ol>
&lt;li>AI engineer는 먼저 공개 Dataset을 다운로드한 웹사이트에서 라이선스를 식별한다.&lt;/li>
&lt;li>라이선스를 찾을 수 없는 경우 라이선스가 Dataset내에 별도의 파일로 제공되는지 확인한다.&lt;/li>
&lt;li>그래도 없으면 Dataset의 소유자에게 연락하여서라도 라이선스를 확인한다.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://www.cs.toronto.edu/~kriz/cifar.html">CIFAR-10&lt;/a>를 예로 들면, 웹사이트에 다음과 같이 이 Dataset을 사용하기 위한 조건이 있고, 이를 라이선스라고 간주할 수 있다.&lt;/p>
&lt;p>&lt;i> Please cite it if you intend to use this dataset. &amp;ldquo;Learning Multiple Layers of Features from Tiny Images, Alex Krizhevsky, 2009.&amp;quot;&lt;/i>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="step-2-provenance-extraction">(Step 2) Provenance extraction&lt;/h4>
&lt;p>여기서 Provenance는 Dataset의 원출처를 의미한다.&lt;/p>
&lt;ul>
&lt;li>한 연구자가 생성한 Dataset을 누군가 나중에 다른 플랫폼에서도 수정/추가 등 변경 후 배포할 수 있다.&lt;/li>
&lt;li>따라서, AI engineer는 입수한 Dataset이 원 작성자가 생성한 것과 동일한지 확인하는 것이 중요하다.&lt;/li>
&lt;li>즉, Step 1단계에서 추출한 라이선스가 Dataset의 올바른 라이선스인지 확인하기 위해 Dataset의 원출처를 확인한다.&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>(Sub-step 1) 우선 적절한 검색어로 검색 엔진에 쿼리하여 Dataset의 공식 출처(예: 공식 웹사이트, 연구 논문 또는 기술 보고서)를 찾는다.&lt;/li>
&lt;li>(Sub-step 2) 공식 출처에서 라이선스 및 metadata를 추출한다.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>&lt;a href="https://www.cs.toronto.edu/~kriz/cifar.html">CIFAR-10&lt;/a>를 예로 들면, 라이선스 및 원출처에 대한 내용을 다음과 같이 기록해 둘 수 있다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="./provenance_record.png" alt="">&lt;/p>
&lt;h4 id="step-3-lineage-extraction">(Step 3) Lineage extraction&lt;/h4>
&lt;p>컴퓨터 비전 및 NLP Dataset을 포함하여 많은 publicly available dataset은 일반적으로 이미지와 같은 data를 호스팅하거나 인기 있는 웹사이트 등 다양한 소스에서 data를 수집하여 생성된다. 이러한 Data Source의 라이선스는 Dataset의 라이선스와 다르기 때문에 추가로 확인해야 한다.&lt;/p>
&lt;ol>
&lt;li>(Sub-step 1) Dataset 생성 프로세스를 추적한다.
&lt;ul>
&lt;li>이를 별도로 기록해둔다. (위 테이블의 “Description of the data collection process” 필드 참조)&lt;/li>
&lt;li>만약, Data Source 내에 또 다른 Data Source가 있다는 것을 알게 되면 해당 Data Source도 찾아서 기록한다. (재귀적으로 반복)&lt;/li>
&lt;li>예를 들어, &lt;a href="https://www.cs.toronto.edu/~kriz/cifar.html">CIFAR-10&lt;/a>는 &lt;a href="https://groups.csail.mit.edu/vision/TinyImages/">80 Million Tiny Images&lt;/a>라는 다른 dataset의 subset이다. 논문을 통해 이 Dataset에는 Google, Flickr, Ask, Altavista, Picsearch, Webshots 및 Cydral의 7가지 Data Source가 있다는 것을 알 수 있다.
&lt;img src="./datasource.png" alt="">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>(Sub-step 2) Data Source의 공식 출처를 찾는다. (웹사이트, 검색 엔진 등 활용)
&lt;ul>
&lt;li>예를 들어, &lt;a href="https://groups.csail.mit.edu/vision/TinyImages/">80 Million Tiny Images&lt;/a> 웹사이트에서는 Dataset이 더 이상 제공되지 않는다. 이 경우, 가능한 아카이브 버전을 찾는다. (예: &lt;a href="http://web.archive.org/web/20100601000000*/http://groups.csail.mit.edu/vision/TinyImages/">http://web.archive.org/web/20100601000000*/http://groups.csail.mit.edu/vision/TinyImages/&lt;/a>)&lt;/li>
&lt;li>그런 다음, 위에 나열한 7가지 Data Source 각각에 대한 공식 웹사이트를 알아낸다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>(Sub-step 3) 시간적으로 적용 가능한 라이선스인지 확인한다.
&lt;ul>
&lt;li>Data Source의 라이선스가 시간에 따라 달라졌을 수도 있음을 염두에 둬야 한다.&lt;/li>
&lt;li>즉, Dataset이 생성된 시점의 Data Source에 대한 라이선스를 확인한다.&lt;/li>
&lt;li>예를 들어, Google Images에서 온 data인 경우, Google’s Terms of Service from 2005, and/or 2007, and/or 2012 등 중 어느 라이선스가 적용될지 확인한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>(Sub-step 4) Data Source에 대한 라이선스를 식별한다.
&lt;ul>
&lt;li>Dataset 생성에 기여한 모든 Data Source와 관련된 라이선스를 식별한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;p>여기까지가 Phase 1인데, 공개 Dataset을 사용하려는 AI engineer가 확인해야 할 내용이 적지 않습니다. 더 큰 문제는 아무리 노력을 기울인다고 해도 웹사이트에서 라이선스 정보를 제공하지 않거나, 틀린 정보를 제공한다면 AI engineer가 확인할 수 있는 범위는 제한적일 수 밖에 없을 것입니다. 아뭏든, 논문 내용을 더 살펴보겠습니다. 다음은, Phase 2이며, 변호사 등 법률전문가에 의해 라이선스의 권리와 의무를 확인하는 단계입니다.&lt;/p>
&lt;div class="alert alert-success" role="alert">
&lt;h4 class="alert-heading">Phase 2 : License compliance assessment&lt;/h4>
&lt;h4 id="step-1-license-interpretation">(Step 1) License interpretation&lt;/h4>
&lt;p>여기서는 법률전문가가 Dataset과 data의 라이선스를 보고 권리 및 의무를 추출한다.&lt;/p>
&lt;ul>
&lt;li>추출된 권리와 의무를 표준 형식으로 문서화한다.&lt;/li>
&lt;li>&lt;a href="https://arxiv.org/abs/1903.12262">Montreal Data License (MDL)&lt;/a> 형식을 보완하여 사용할 것을 제안한다. → Enhanced MDL&lt;/li>
&lt;li>여기에는 다음 내용을 기록할 수 있다.
&lt;ol>
&lt;li>License metadata
&lt;ul>
&lt;li>Licensor&lt;/li>
&lt;li>License name&lt;/li>
&lt;li>Dataset name&lt;/li>
&lt;li>Dataset version&lt;/li>
&lt;li>Credic / Attribution Notice&lt;/li>
&lt;li>License validity period&lt;/li>
&lt;li>Liability / Warranty&lt;/li>
&lt;li>Designated third parties&lt;/li>
&lt;li>Additional condition&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Data (standalone)
&lt;ul>
&lt;li>Rights / Obligations
&lt;ul>
&lt;li>Access&lt;/li>
&lt;li>Tagging&lt;/li>
&lt;li>Distribute&lt;/li>
&lt;li>Re-represent&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Data rights in conjunction with model
&lt;ul>
&lt;li>Rights / Obligations
&lt;ul>
&lt;li>Benchmark&lt;/li>
&lt;li>Research&lt;/li>
&lt;li>Publish&lt;/li>
&lt;li>Internal Use&lt;/li>
&lt;li>Commercialization
&lt;ul>
&lt;li>Output&lt;/li>
&lt;li>Model&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Model Reverse Engineer&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="./enhanced_mdl.png" alt="">&lt;/p>
&lt;h4 id="step-2-license-compatibility-analysis">(Step 2) License compatibility analysis&lt;/h4>
&lt;p>법률전문가는 Enhanced MDL의 정보를 기반으로 위험 평가를 수행하여 dataset을 상업적으로 사용할 수 있는지 결정한다.&lt;/p>
&lt;ul>
&lt;li>Dataset 라이선스가 허용하더라도 Data Source의 라이선스가 사용 사례를 제한하는 경우에 유의한다.&lt;/li>
&lt;li>예를 들어, CIFAR-10의 경우 Dataset 라이선스가 허용하는 것과 Data Source 라이선스가 허용하는 것이 서로 다른 경우가 있다.&lt;/li>
&lt;li>위의 Table에서 빨간색(x)는 Data Source의 라이선스가 제한한다는 것이다. (Google 및 Flickr의 라이선스 등)&lt;/li>
&lt;/ul>
&lt;p>요약하자면 CIFAR-10의 라이선스는 논문이 인용되는 한 dataset에 대한 모든 권리를 허용하지만, Data Source의 라이선스는 더 제한적이므로, 이 Dataset을 AI Model을 학습시키거나 또는 Dataset 자체를 수정 또는 배포를 포함한 상업적 목적으로 사용될 경우 라이선스 컴플라이언스 위반의 잠재적 위험이 발생한다.&lt;/p>
&lt;/div>
&lt;p>여기까지 Phase 2를 거치면서 법률 전문가에 의해 Enhanced MDL 포맷으로 라이선스 권리와 의무를 문서화하고 이를 활용하는 방법을 살펴 보았습니다. Dataset 뿐만 아니라 Data Source의 라이선스까지 확인해서 Data Source의 라이선스가 상업적 사용 등 제한을 가하면 Dataset을 상업용으로 사용하는 것도 리스크가 있음을 설명하고 있습니다.&lt;/p>
&lt;p>논문에서는 위와 같은 방식으로 다른 Dataset에 대해서도 Case Study를 진행하였습니다. 그 내용을 살펴보겠습니다.&lt;/p>
&lt;h2 id="4-case-study-details">4. Case Study Details&lt;/h2>
&lt;div class="alert alert-success" role="alert">
&lt;p>Case Study에서는 인기도와 상업적으로 사용될 가능성이 높은 6개의 이미지 dataset 선택하였다.&lt;/p>
&lt;ol>
&lt;li>&lt;a href="https://www.cs.toronto.edu/~kriz/cifar.html">CIFAR-10&lt;/a> : Alex Krizhevsky, Geoffrey Hinton, et al. 2009. Learning Multiple Layers of Features from Tiny Images. Technical Report. University of Toronto.&lt;/li>
&lt;li>&lt;a href="https://www.image-net.org/">ImageNet&lt;/a> : Olga Russakovsky, Jia Deng, Hao Su, Jonathan Krause, Sanjeev Satheesh, Sean Ma, Zhiheng Huang, Andrej Karpathy, Aditya Khosla, Michael Bernstein, et al. 2015. Imagenet large scale visual recognition challenge. International journal of computer vision 115 (2015), 211–252&lt;/li>
&lt;li>&lt;a href="https://www.cityscapes-dataset.com/">Cityscapes&lt;/a> : Marius Cordts, Mohamed Omran, Sebastian Ramos, Timo Scharwächter, Markus Enzweiler, Rodrigo Benenson, Uwe Franke, Stefan Roth, and Bernt Schiele. 2015. The Cityscapes Dataset. In Proceedings of the 2015 CVPR Workshop on the Future of Datasets in Vision, Boston, MA, USA, June 11.&lt;/li>
&lt;li>&lt;a href="https://github.com/NVlabs/ffhq-dataset">FFHQ&lt;/a> : Tero Karras, Samuli Laine, and Timo Aila. 2019. A style-based generator architecture for generative adversarial networks. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition. 4401–4410&lt;/li>
&lt;li>&lt;a href="https://paperswithcode.com/dataset/vggface2-1">VGGFace2&lt;/a> : Georgia M Kapitsaki, Frederik Kramer, and Nikolaos D Tselikas. 2017. Automating the License Compatibility Process in Open Source Software with SPDX. Journal of Systems and Software 131 (2017), 386–401.&lt;/li>
&lt;li>&lt;a href="https://cocodataset.org/">MS COCO&lt;/a> : Tsung-Yi Lin, Michael Maire, Serge Belongie, James Hays, Pietro Perona, Deva Ramanan, Piotr Dollár, and C Lawrence Zitnick. 2014. Microsoft coco: Common objects in context. In European conference on computer vision. Springer, 740–755.&lt;/li>
&lt;/ol>
&lt;/div>
&lt;p>이 여섯 개 dataset은 모두 이미지에 대한 것이며, 라이선스는 다음과 같은 특징을 갖습니다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Dataset&lt;/th>
&lt;th>Dataset license&lt;/th>
&lt;th>Data Source&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>CIFAR-10&lt;/td>
&lt;td>라이선스 언급 없음 (인용만 요구)&lt;/td>
&lt;td>Data Source 다수&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ImageNet&lt;/td>
&lt;td>custom license&lt;/td>
&lt;td>Data Source 다수&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Cityscapes&lt;/td>
&lt;td>custom license&lt;/td>
&lt;td>하나의 Data Source&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>FFHQ&lt;/td>
&lt;td>CC-NC-SA-4.0&lt;/td>
&lt;td>Data Source 다수&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>VGGFaces2&lt;/td>
&lt;td>CC-NC-SA-4.0&lt;/td>
&lt;td>Data Source 다수&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>MS COCO&lt;/td>
&lt;td>CC 4.0&lt;/td>
&lt;td>Data Source 다수&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>그럼 이 논문에서 여섯 개의 dataset에 대하여 연구를 수행한 결과를 살펴보겠습니다.&lt;/p>
&lt;div class="alert alert-success" role="alert">
&lt;p>이미지 Dataset의 가장 일반적인 사용 시나리오는 다음 세 가지로 볼 수 있다.&lt;/p>
&lt;ol>
&lt;li>dataset 자체를 상업적으로 배포 (DD : Distribute Datasets)&lt;/li>
&lt;li>dataset으로 AI Model을 학습하고, 이 모델을 포함하는 임베디드 제품 출시 (RPEAI : Release Product with Embedded AI Model)&lt;/li>
&lt;li>dataset으로 AI Model을 학습하고, 이 모델 산출물을 상용화 (CAI : Commercialize the Model)&lt;/li>
&lt;/ol>
&lt;p>이러한 사용 시나리오에 대한 각 Dataset의 연구 결과는 다음과 같다.&lt;/p>
&lt;p>&lt;img src="./scenario.png" alt="">&lt;/p>
&lt;ul>
&lt;li>A - Provide a link to license CC-BY-NC 4.0&lt;/li>
&lt;li>B - Provide a link to the license CC-BY 4.0&lt;/li>
&lt;li>C - Provide a link to license CC-By-NC-SA 4.0&lt;/li>
&lt;li>D - Remove infringing content as soon as possible when an infringement is detected&lt;/li>
&lt;li>E- Indicate changes&lt;/li>
&lt;/ul>
&lt;h3 id="1-dataset을-상용-ai-software와-함께-배포하는-경우----잠재적인-라이선스-컴플라이언스-위반-초래-가능-6개-중-3개">1. Dataset을 상용 AI software와 함께 배포하는 경우 &amp;ndash;&amp;gt; 잠재적인 라이선스 컴플라이언스 위반 초래 가능 (6개 중 3개)&lt;/h3>
&lt;ul>
&lt;li>CIFAR-10, ImageNet 및 CityScapes의 배포는 허용되지 않음&lt;/li>
&lt;li>이러한 제한에도 불구하고 많은 플랫폼에서 이들 Dataset을 배포하고 있다. (예: &lt;a href="https://deepai.org/datasets">https://deepai.org/datasets&lt;/a> - ImageNet, CIFAR-10 을 배포함) 이는 문제를 유발할 수 있다.&lt;/li>
&lt;li>다른 3개 Dataset도 동일한 라이선스로 배포해야 해야 하는 등의 의무를 준수해야 사용할 수 있다.&lt;/li>
&lt;/ul>
&lt;h3 id="2-dataset을-상용-ai-software-학습에-사용하는-경우----잠재적-라이선스-컴플라이언스-위반-초래-가능-6개-중-5개">2. Dataset을 상용 AI software 학습에 사용하는 경우 &amp;ndash;&amp;gt; 잠재적 라이선스 컴플라이언스 위반 초래 가능 (6개 중 5개)&lt;/h3>
&lt;ul>
&lt;li>MS COCO를 제외하고 어느 것도 Dataset을 학습한 AI Model을 상용화할 수 있는 권리를 명시적으로 허용하지 않음&lt;/li>
&lt;li>MS COCO의 경우, Dataset이 상용 AI software를 구축하는 데 사용될 때 다음 사항을 요구함
&lt;ul>
&lt;li>라이선스 링크 제공&lt;/li>
&lt;li>제품 보증을 위해 dataset를 사용하지 말아야 함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="3-6개-중-3개는-dataset이-수정될-경우-잠재적인-라이선스-컴플라이언스-위반-초래-가능">3. 6개 중 3개는 Dataset이 수정될 경우 잠재적인 라이선스 컴플라이언스 위반 초래 가능&lt;/h3>
&lt;ul>
&lt;li>AI Model의 성능 향상을 위해 Dataset을 수정하거나 추가하는 경우가 많음&lt;/li>
&lt;li>CIFAR-10, ImageNet 및 Cityscapes의 경우 Dataset을 수정할 경우 잠재적인 라이선스 컴플라이언스 위반이 발생할 수 있음&lt;/li>
&lt;li>다른 Dataset도 라이선스가 요구하는 대로 정확한 변경 사항을 표시하는 의무를 준수해야 함&lt;/li>
&lt;/ul>
&lt;p>이와 같이 Publicly available datasets는 상용 AI software를 구축하는 데 적합하지 않을 수 있다.&lt;/p>
&lt;/div>
&lt;p>논문에서 설명하는 위의 결과만을 보더라도 공개 Dataset을 상용 AI 서비스에 사용하는 것은 잠재적인 라이선스 컴플라이언스 위반을 초래할 가능성이 있습니다. 게다가 논문에서는 이번 연구에서 고려하지 않은 부분이 더 있다고 부연 설명합니다.&lt;/p>
&lt;h2 id="5-threats-to-validity">5. THREATS TO VALIDITY&lt;/h2>
&lt;div class="alert alert-success" role="alert">
&lt;h3 id="external-validity">External validity&lt;/h3>
&lt;p>이 논문에서는 라이선스 위반 측면에 대해서만 연구하였다.&lt;/p>
&lt;ul>
&lt;li>Dataset을 사용하여 AI Softwae를 구축할 때에는 개인 정보 보호, 윤리적 문제와 같은 요소도 중요하다.&lt;/li>
&lt;li>Dataset을 내부 연구, 학문적 목적으로 사용하는 경우도 다루지 않았다.&lt;/li>
&lt;li>Fair Use, fair dealing, 기타 유사한 법률에 따라 사용할 수 있는지도 다루지 않았다.&lt;/li>
&lt;li>이 연구에서는 이미지 Dataset에 대해서만 다루었다. video, text 등 다른 Dataset에서는 또 다른 문제가 제기될 수 있기에 추가 연구가 필요하다.&lt;/li>
&lt;/ul>
&lt;h3 id="internal-validity">Internal validity&lt;/h3>
&lt;p>이 연구에서는 Data Source의 라이선스까지만 고려하고, 개별 data point (예: 개별 이미지)와 관련된 라이선스는 고려하지 않았다.&lt;/p>
&lt;ul>
&lt;li>개별 이미지에도 저작권이 있을 수 있다.&lt;/li>
&lt;li>하지만, 각 Data Source에는 수천, 수만 개의 data point가 있는데, 이에 대한 각 라이선스를 추출하는 것은 사실상 불가능하다.&lt;/li>
&lt;li>따라서, 이 부분은 여전히 위협으로 남아 있다.&lt;/li>
&lt;/ul>
&lt;h3 id="construct-validity">Construct validity&lt;/h3>
&lt;p>이 연구에서 확인한 각 Dataset에 대한 provenance나 lineage가 정확하지 않을 수 있다.&lt;/p>
&lt;ul>
&lt;li>Dataset이 언제, 어디에서 생성되었는지를 정확히 확인하는 것은 불가능하다.&lt;/li>
&lt;li>ImageNet과 같은 경우, 정확한 Data Source를 알 수도 없다.&lt;/li>
&lt;li>가능한 관련 문서를 통해 Data Source를 유추하여 라이선스를 유추할 수 있도록 최선을 다할 뿐이다.&lt;/li>
&lt;/ul>
&lt;/div>
&lt;p>이럻게 위에서 설명한 data point의 라이선스나 정확하지 않은 정보로 라이선스를 확인할 수 없는 어려움까지 고려한다면 공개 Dataset을 상용 AI 서비스에 라이선스 리스크 없이 사용하는 것은 정말 거의 불가능하다고 봐야 하는 것 아닌가 싶습니다. 그렇다고 AI 제품을 연구하는 데 공개 Dataset을 아예 배제할 수도 없습니다. GitHub가 저작권 침해 이슈가 있음에도 불구하고 Copilot 서비스를 준비하는 것은 일정 부분 법적 리스크를 감수하고, 필요에 따라 법정 다툼도 이어가는 것과 같이 기업이 AI 기술 활용을 위해 어느정도의 잠재적인 저작권 침해 리스크는 부담하는 것도 고려할 필요가 있어 보입니다. 사실, Dataset을 Machine Learning 학습에만 사용하는 것은 저작권 침해에 해당하지 않는다는 견해도 있습니다.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://glaw.scourt.go.kr/wsjo/lawod/sjo192.do?contId=2135829&amp;amp;jomunNo=35&amp;amp;jomunGajiNo=2">저작권법 제35조의 2&lt;/a>에 따르면 &amp;lsquo;저작물을 그 컴퓨터에 일시적으로 복제할 수 있다&amp;rsquo;고 허용합니다. 이에 따라 Machine Learning training 과정에서 공개 Dataset을 메모리에 일시적으로 복제하는 것도 허용된다고 주장할 여지가 있습니다.&lt;/li>
&lt;li>&lt;a href="https://glaw.scourt.go.kr/wsjo/lawod/sjo192.do?contId=2135829&amp;amp;jomunNo=35&amp;amp;jomunGajiNo=3">저작권법 제35조의3&lt;/a>에서는 저작물의 통상적인 이용 방법과 충돌하지 아니하고 저작자의 정당한 이익을 부당하게 해치지 아니하는 경우 공정 이용에 해당하여 저작물을 이용할 수 있다고 허용합니다. 이미지 정보로 구성된 공개 Dataset을 Machine Learning 학습에만 사용하는 것은 그림이나 사진의 통상적인 이용 방법과 충돌하지 않고, 저작자의 이익을 해치지 않기 때문에 공정이용에 해당한다고 주장할 수 있을 것입니다.&lt;/li>
&lt;/ul>
&lt;p>다만, 아직 이에 대한 명확한 판례가 없기 때문에 리스크가 전혀 없다고 할 수는 없습니다. (아참, 저는 법률가가 아니기 때문에 이 내용은 법적인 효력이 전혀 없음을 알려 드립니다. ^^)&lt;/p>
&lt;p>유럽, 일본, 미국 등 해외에서는 AI 학습을 위한 빅데이터 이용을 허용하기 위해 법 개정이 되었으며, 우리나라도 이를 위한 저작권법 개정안이 국회에 상정된 것으로 알고 있습니다. 국내 기업들이 공개 Dataset을 보다 수월하게 사용하여 AI 기술 혁신에 박차를 가할 수 있도록 정부에서도 필요한 법안을 신속히 처리해주면 좋겠습니다.&lt;/p>
&lt;p>감사합니다.&lt;/p></description></item><item><title>Blog: SaaS로 서비스를 제공할 때에도 오픈소스 컴플라이언스가 필요한가요?</title><link>/blog/2021/20211220-saas_compliance/</link><pubDate>Mon, 20 Dec 2021 00:00:00 +0000</pubDate><guid>/blog/2021/20211220-saas_compliance/</guid><description>
&lt;p>대부분의 오픈소스 라이선스는 오픈소스를 실행시키는 것에는 아무 제한을 두지 않으며, 오픈소스를 재배포할 때 소스 코드 공개, 고지 등의 의무 준수를 요구합니다. 여기서 배포라고 하면, 소프트웨어를 탑재한 임베디드 디바이스의 판매, 앱 마켓을 통한 모바일 앱의 배포 등 일반적으로 소프트웨어의 물리적인 전달을 의미합니다.&lt;/p>
&lt;p>SaaS 서비스 제공 업체는 서비스를 위해 소프트웨어를 배포하지 않기 때문에 오픈소스를 사용하더라도 라이선스 의무에서 비교적 자유로울 수 있습니다. 하지만, AGPL 등 네트워크를 통한 서비스 제공 시에도 라이선스 의무를 준수하는 오픈소스 라이선스도 있기 때문에 이에 대해서는 주의가 필요합니다.&lt;/p>
&lt;p>미국의 저명한 오픈소스 전문 변호사인 Heather Meeker는 &lt;a href="https://heathermeeker.com/2021/11/23/open-source-compliance-for-saas-vendors/">Open Source Compliance for SaaS Vendors&lt;/a>라는 글을 게재하여 SaaS 공급업체가 주의해야 할 Open Source Compliance에 대해 설명하였는데요, 오늘은 이 내용을 소개하겠습니다.&lt;/p>
&lt;hr>
&lt;h2 id="1-client-side로-배포되는-소프트웨어를-고려하라">1. Client Side로 배포되는 소프트웨어를 고려하라.&lt;/h2>
&lt;p>Heather는 먼저 Client Side Software에 대해 언급하였습니다. SaaS Platform에서는 대부분의 소프트웨어가 공급업체의 Server-side에 존재하지만, 일부 소프트웨어는 사용자의 컴퓨터(“Client-Side”)로 전달이 되어 동작하게 됩니다.&lt;/p>
&lt;p>Heather는 SaaS 형태로 웹사이트 제작 기능을 제공하는 &lt;a href="https://wordpress.com/">워드프레스&lt;/a>를 예로 들어 설명하였습니다. Chrome 브라우저로 워드프레스에 접속하여 블로그를 제작하는 화면을 가정하겠습니다. 거기에서 control-u(맥북 환경에서는 Command + Option + U)를 누르면 page source code를 볼 수 있는데, 3천 라인 가량의 소스 코드가 있는 것을 볼 수 있습니다(물론 블로그 작성 기능을 구성하는 대부분의 소스 코드는 &lt;a href="http://WordPress.com">WordPress.com&lt;/a> 측 서버에서 구동됩니다).&lt;/p>
&lt;p>이러한 Client-side의 코드는 주로 웹페이지 내 입력 ‘form’에 날짜나 주소 등의 값이 유효한지 여부를 체크하는 등 단순한 로직 정도입니다. 이런 small task는 굳이 서버와 연동하느라 시간을 소요할 필요가 없습니다. 이런 Client-side의 코드는 주로 “scripting language” 코드이며, 대개 HTML, Javascript, CSS 입니다. 여기서 주목할 점은 이런 스크립트 코드는 브라우저에서 볼 수 있듯이 항상 소스 코드 형태로 전달이 된다는 겁니다. 그래서, LGPL 같은 Copyleft 라이선스가 적용된 코드라고 하더라도 별도로 소스 코드를 제공해야할 필요가 없습니다.&lt;/p>
&lt;h3 id="고지-내용-제공은-어떻게">고지 내용 제공은 어떻게?&lt;/h3>
&lt;p>Heather는 그래도 고지 의무는 고려해야 한다고 설명하면서 한가지 문제를 제기합니다. 개발자들은 오픈소스인 HTML/CSS/Javascript를 사용할때 로딩 속도를 빠르게 하기 위하여 최소한의 코드만 남기기를 원하고, 이 때문에 코드 내 저작권, 라이선스 표시 부분을 지우는 경우가 많다는 겁니다. 그런데, LGPL과 같은 Copyleft가 적용된 소프트웨어를 배포할 때에는 소스 코드를 제공해야 할 뿐만 아니라 라이선스 전문도 함께 제공해야 합니다.&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://www.gnu.org/licenses/old-licenses/lgpl-2.1.html">LGPL-2.1&lt;/a>&lt;/p>
&lt;ol>
&lt;li>&amp;hellip; &lt;em>and distribute a copy of this License along with the Library.&lt;/em>&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>그럼 LGPL인 Javascript 코드를 Client-side로 전달하면서 어떻게 LGPL 라이선스 전문을 전달해야 할까요?&lt;/p>
&lt;p>Heather가 제안한 한가지 방법으로는 SaaS 시스템의 대시보드와 같은 화면 내 오픈소스 고지를 위한 페이지를 만들고 여기에 라이선스 전문을 보여주는 링크를 포함하는 것입니다.&lt;/p>
&lt;p>하지만 Heather는 이 방법도 100% 라이선스 조건을 충족한다고 볼 수 있을지에 대해서는 다소 의문을 제기합니다. 사실 대부분의 오픈소스 라이선스의 고지 의무 조항은 웹서비스가 존재하기 훨씬 전에 만들어졌고, 당시의 프로그램 전달 방식만을 고려하여 고지 내용이 설치 프로그램과 함께 전달될 것으로 가정하고 있기 때문입니다.&lt;/p>
&lt;p>MIT의 경우도 다음과 같이 요구합니다.&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://opensource.org/licenses/MIT">MIT&lt;/a>&lt;/p>
&lt;p>&lt;em>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;p>이런 조항을 고려하면, SaaS 시스템 내 별도의 웹페이지에서 라이선스 고지를 하는 방법도 충분하지는 않다는 주장이 있을 수도 있습니다. 물론, 이런 방법이라도 제공하는 것이 안하는 것보다는 훨씬 낫겠지만요. 🙂&lt;/p>
&lt;h3 id="minified-javascript는-소스-코드-공개-방법으로-적절한가">Minified Javascript는 소스 코드 공개 방법으로 적절한가?&lt;/h3>
&lt;p>개발자는 Client-side로 전달하는 코드의 로딩 타임을 최소화 하기 위하여 가급적 코드 사이즈를 경량화합니다. 이를 위해 Javascript 코드 내 불필요한 주석을 제거하고, “white space”도 제거하는 등 Minify 처리를 합니다.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">script&lt;/span> &lt;span style="color:#c4a000">id&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#a40000">’&lt;/span>&lt;span style="color:#c4a000">wp&lt;/span>&lt;span style="color:#a40000">-&lt;/span>&lt;span style="color:#c4a000">media&lt;/span>&lt;span style="color:#a40000">-&lt;/span>&lt;span style="color:#c4a000">utils&lt;/span>&lt;span style="color:#a40000">-&lt;/span>&lt;span style="color:#c4a000">js&lt;/span>&lt;span style="color:#a40000">-&lt;/span>&lt;span style="color:#c4a000">translations&lt;/span>&lt;span style="color:#a40000">’&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#204a87;font-weight:bold">function&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">domain&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">translations&lt;/span> &lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">localeData&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">translations&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">locale_data&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span> &lt;span style="color:#000">domain&lt;/span> &lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">||&lt;/span>
&lt;span style="color:#000">translations&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">locale_data&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">messages&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000">localeData&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#a40000">“”&lt;/span>&lt;span style="color:#000;font-weight:bold">].&lt;/span>&lt;span style="color:#000">domain&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">domain&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000">wp&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">i18n&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">setLocaleData&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">localeData&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">domain&lt;/span> &lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#000;font-weight:bold">)(&lt;/span> &lt;span style="color:#a40000">“&lt;/span>&lt;span style="color:#204a87;font-weight:bold">default&lt;/span>&lt;span style="color:#a40000">”&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#a40000">“&lt;/span>&lt;span style="color:#000">locale_data&lt;/span>&lt;span style="color:#a40000">”&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#a40000">“&lt;/span>&lt;span style="color:#000">messages&lt;/span>&lt;span style="color:#a40000">”&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#a40000">“”&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{}&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">&amp;lt;/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">script&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>예를 들어, 위의 코드를 Minify하면 다음과 같이 변환되고, 당연히 가독성은 떨어지게 됩니다.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">scriptid&lt;/span>&lt;span style="color:#a40000">=’&lt;/span>&lt;span style="color:#c4a000">wp&lt;/span>&lt;span style="color:#a40000">-&lt;/span>&lt;span style="color:#c4a000">media&lt;/span>&lt;span style="color:#a40000">-&lt;/span>&lt;span style="color:#c4a000">utils&lt;/span>&lt;span style="color:#a40000">-&lt;/span>&lt;span style="color:#c4a000">js&lt;/span>&lt;span style="color:#a40000">-&lt;/span>&lt;span style="color:#c4a000">translations&lt;/span>&lt;span style="color:#a40000">’&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">function&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">domain&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">translations&lt;/span>&lt;span style="color:#000;font-weight:bold">){&lt;/span>&lt;span style="color:#000">varlocaleData&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">translations&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">locale_data&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">domain&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">||&lt;/span>&lt;span style="color:#000">translations&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">locale_data&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">messages&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#000">localeData&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#a40000">“”&lt;/span>&lt;span style="color:#000;font-weight:bold">].&lt;/span>&lt;span style="color:#000">domain&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">domain&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#000">wp&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">i18n&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">setLocaleData&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">localeData&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">domain&lt;/span>&lt;span style="color:#000;font-weight:bold">);})(&lt;/span>&lt;span style="color:#a40000">“&lt;/span>&lt;span style="color:#204a87;font-weight:bold">default&lt;/span>&lt;span style="color:#a40000">”&lt;/span>&lt;span style="color:#000;font-weight:bold">,{&lt;/span>&lt;span style="color:#a40000">“&lt;/span>&lt;span style="color:#000">locale_data&lt;/span>&lt;span style="color:#a40000">”&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">“&lt;/span>&lt;span style="color:#000">messages&lt;/span>&lt;span style="color:#a40000">”&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">“”&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#000;font-weight:bold">{}}}});&amp;lt;/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">script&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>그런데, 소스 코드 공개를 요구 하는 오픈소스 라이선스에서는 ‘소스 코드&amp;rsquo;를 수정이 용이한 형태여야 한다고 정의하고 있습니다.&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://www.gnu.org/licenses/old-licenses/gpl-2.0.html">GPL-2.0&lt;/a>&lt;/p>
&lt;p>&lt;em>3. &amp;hellip;
The source code for a work means the preferred form of the work for making modifications to it.&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;p>그렇다면, LGPL인 Javascript 코드가 Client-side로 전달되면서 Minified된다면, 이는 소스 코드 제공의 의무를 준수한 것으로 볼 수 있을까요? Minified 상태로는 사용자가 수정이 곤란하기 때문에 Unminify 상태의 가독성 좋은 코드를 별도로 제공해야 하는건 아닐까요?&lt;/p>
&lt;p>이에 대해 Heather는 Minified Javascfript 코드라도 대부분의 개발 도구에서는 자동으로 white space를 삽입하는 등의 가독성을 향상시켜주는 기능을 제공하기 때문에 문제가 되지 않는다고 말하고 있습니다. 즉, Minified Javascript 코드를 전달하는 것도 GPL, LGPL에서 소스 코드의 정의로 요구하는 “the preferred form of the work for making modifications”로 볼 수 있다고 설명하였습니다.&lt;/p>
&lt;h2 id="2-네트워크-copyleft-라이선스를-주의하라">2. 네트워크 Copyleft 라이선스를 주의하라.&lt;/h2>
&lt;p>Heather가 언급한 SaaS에서의 또 다른 잠재적인 이슈는 네트워크 Copyleft 라이선스입니다. AGPL 등 일부 오픈소스 라이선스는 소프트웨어의 물리적인 배포가 없더라도 네트워크를 통해 사용자와 상호 작용(interacting)할 경우 Server-side 소스 코드의 공개를 요구합니다. Heather는 이런 라이선스를 “네트워크 Copyleft 라이선스&amp;quot;라고 불렀는데요, 대표적인 네트워크 Copyleft 라이선스인 AGPL-3.0은 13조에서 Remote Network Interaction에 대한 의무를 아래와 같이 정의합니다.&lt;/p>
&lt;blockquote>
&lt;p>AGPL-3.0&lt;/p>
&lt;ol start="13">
&lt;li>Remote Network Interaction; Use with the GNU General Public License.&lt;/li>
&lt;/ol>
&lt;p>&lt;em>&amp;hellip; if you modify the Program, your modified version must prominently offer all users interacting with it remotely through a computer network (if your version supports such interaction) an opportunity to receive the Corresponding Source of your version by providing access to the Corresponding Source from a network server at no charge, through some standard or customary means of facilitating copying of software.&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;p>즉, AGPL 소프트웨어를 다음 두가지 방식으로 사용한다면, 소스 코드를 제공해야 합니다.&lt;/p>
&lt;ol>
&lt;li>소프트웨어를 수정하고,&lt;/li>
&lt;li>사용자가 네트워크를 통해 소프트웨어와 상호작용 (interacting)하는 방식으로 사용&lt;/li>
&lt;/ol>
&lt;p>그럼, 수정하지 않고 사용하는건 얼마든지 가능한 것 아니냐고 반문할 수 있는데요, 개발자가 처음 AGPL-3.0 오픈소스를 도입하는 단계에서는 수정하지 않고 사용한다고 해도, 시간이 지나면서 수정해야만 하는 경우가 발생할 수 있습니다. 하지만 시간이 지나면서 누군가 다른 개발자가 AGPL 라이선스를 고려하지 않고 기능상, 성능상, 호환성 등의 여러 이유로 수정을 가할 수 있습니다. 따라서, 누군가 AGPL-3.0 오픈소스를 수정하지 않고 사용할테니 라이선스 의무 준수가 필요 없을 것이다라고 주장한다면 당장은 그럴듯해 보이지만, 미래의 변동 가능성까지 책임 질 수는 없습니다.&lt;/p>
&lt;p>참고로, Google은 “&lt;a href="https://opensource.google/docs/using/agpl-policy/">AGPL Policy&lt;/a>”를 만들어서 Google에서는 AGPL하의 코드를 사용할 수 없음을 분명히 하였습니다.&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://opensource.google/docs/using/agpl-policy/">Google’s AGPL Policy&lt;/a>&lt;/p>
&lt;p>*&lt;strong>WARNING:&lt;/strong> Code licensed under the GNU Affero General Public License (&lt;a href="https://en.wikipedia.org/wiki/GNU_Affero_General_Public_License">AGPL&lt;/a>) MUST NOT be used at Google.&lt;/p>
&lt;p>The license places restrictions on software used over a network which are extremely difficult for Google to comply with. Using AGPL software requires that anything it links to must also be licensed under the AGPL. Even if you think you aren’t linking to anything important, it still presents a huge risk to Google because of how integrated much of our code is. &lt;strong>The risks heavily outweigh the benefits.&lt;/strong>*&lt;/p>
&lt;/blockquote>
&lt;p>Google은 다음과 같은 이유료 AGPL Policy를 만들었다고 설명합니다.&lt;/p>
&lt;ul>
&lt;li>AGPL은 AGPL 소프트웨어와 링크하는 모든 것도 AGPL로 라이선스를 부여할 것을 요구한다. → 바이러스 효과&lt;/li>
&lt;li>이런 바이러스 효과가 발생하는 시점은 소프트웨어를 배포할 때 뿐만 아니라 사용자가 제품이나 서비스를 원격 네트워크 인터페이스를 통해 액세스 할 때도 포함한다.&lt;/li>
&lt;li>Google의 핵심 제품(Search, Gmail, Map, Youtube 등)은 사용자가 원격 네트워크 인터페이스를 통해 상호작용하는 서비스이기 때문에 엔지니어가 이런 서비스를 AGPL에 의존적으로 개발할 경우 상황은 심각해진다.&lt;/li>
&lt;li>이런 상황을 고려했을때 Google은 AGPL의 네트워크를 통해 사용되는 소프트웨어에 대한 요구사항을 준수하기 매우 어렵다.&lt;/li>
&lt;/ul>
&lt;p>이와 같이 네트워크 조항을 포함하는 라이선스는 AGPL-3.0말고도 여러 라이선스가 있다고 Heather는 설명합니다.&lt;/p>
&lt;ul>
&lt;li>Server Side Public License&lt;/li>
&lt;li>Open Software License&lt;/li>
&lt;li>Non-Profit Open Source License&lt;/li>
&lt;li>Artistic 2.0&lt;/li>
&lt;li>Apple Public Source License&lt;/li>
&lt;li>RealNetworks Public Source License&lt;/li>
&lt;li>Reciprocal Public License&lt;/li>
&lt;li>Honest Public License&lt;/li>
&lt;li>Academic Free License &lt;em>&lt;strong>[Note: this license is permissive. The others are copyleft.]&lt;/strong>&lt;/em>&lt;/li>
&lt;/ul>
&lt;p>Heather는 대부분의 회사는 이러한 네트워크 Copyleft 라이선스를 위험도가 높은 라이선스로 분류하고 SaaS 개발에 사용하지 않는 정책을 갖고 있다고 말하였습니다.&lt;/p>
&lt;p>사실, 저도 예전에는 AGPL-3.0은 수정한 경우에만 소스 공개 의무를 부여하기 때문에 수정하지 않고 사용하는건 문제가 없다고 생각했습니다. 그래서 굳이 회사에서 정책적으로 AGPL-3.0의 사용을 막을 필요까지는 없는 것 아닌가라는 입장이었습니다. 그런데, AGPL-3.0 오픈소스를 도입하는 시기에는 수정하지 않고 사용한다고 하더라도, 수년이 지나면서도 수정하지 않도록 보장할 수 있는 체계가 회사 내부에 갖춰져 있냐를 봤을때에는 수정하지 않겠다는 것을 장담할 수 없게 됩니다. 따라서, Google과 같이 기본 정책으로는 AGPL-3.0 오픈소스는 사용을 제한하는 정책을 가져가는 것이 라이선스 관리 측면에서 합리적이라고 생각합니다.&lt;/p>
&lt;h2 id="3-saas-코드도-언젠가는-배포해야-할-수-있음을-고려하라">3. SaaS 코드도 언젠가는 배포해야 할 수 있음을 고려하라.&lt;/h2>
&lt;p>Heather는 SaaS 플랫폼의 서버 측 코드도 거의 항상 언젠가는 배포된다는 점을 고려하여 서버 측 코드에 대해서도 오픈소스 컴플라이언스를 고려해야 한다고 말합니다. SaaS 코드를 배포하게 되는 경우는 다음과 같습니다.&lt;/p>
&lt;ul>
&lt;li>SaaS 담당 조직의 매각&lt;/li>
&lt;li>SaaS 서버를 고객 서버로 이전
&lt;ul>
&lt;li>금융, Health 등 강력한 규제 산업의 요구 사항으로 인해 서버 이전&lt;/li>
&lt;li>보안 이슈로 서버 이전&lt;/li>
&lt;li>국가 간 데이터 이동으로 발생하는 개인 정보 문제 방지를 위해 서버 이전 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>내부 SaaS 도구의 제품화 등&lt;/li>
&lt;/ul>
&lt;p>Heather는 이러한 상황이 발생할 수 있음을 고려하여 SaaS 서비스를 개발할 때에도 향후 배포될 경우를 고려하여 GPL 또는 AGPL 오픈소스와 자체 개발 코드를 결합하는 것을 피해야 한다고 설명합니다.&lt;/p>
&lt;p>과도한 정책이라도 보시는 분들도 있을 것 같지만, 충분히 고려할 만한 주장이라고 생각합니다. 특히, 근래에 들어서 주로 서버에 사용하는 오픈소스가 라이선스를 변경하고 있는 추세를 고려하면 서버용 프로그램에 대해서도 Software BOM을 파악하여 관리하는 체계를 갖추는 것은 기업에 꼭 필요한 절차가 되고 있습니다.&lt;/p>
&lt;hr>
&lt;p>과거에는 기업의 오픈소스 컴플라이언스 정책에서 외부로 배포하지 않고 내부 서버에만 사용하는 오픈소스인 경우에는 오픈소스 점검 대상에서 아예 제외시키기도 하였습니다. 하지만, (1) AGPL과 같은 네트워크 Copyleft 조항이 있는 오픈소스 라이선스나 (2) 오픈소스였다가 상용 소프트웨어러 라이선스 정책을 변경하는 추세를 고려하면 Server-side의 소프트웨어에 대해서도 라이선스 컴플라이언스 측면의 관리 체계가 필요해지고 있습니다. 기업은 이를 위한 정책, 절차를 개선하고, Server-side 소프트웨어에 대한 Bill of Materials를 자동으로 생성할 수 있는 도구를 도입해야 할 것입니다.&lt;/p>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>This paper was translated by Haksung Jang from the English version available at this &lt;a href="https://heathermeeker.com/2021/11/23/open-source-compliance-for-saas-vendors/">white paper&lt;/a>. The original author, &lt;a href="https://heathermeeker.com/about-me/">Heather Meeker&lt;/a>, has not reviewed this translation.&lt;/p>
&lt;/div></description></item><item><title>Blog: 중국 첫 GPL 소송 사례, VirtualApp</title><link>/blog/2021/20211115-virtualapp_gpl/</link><pubDate>Mon, 15 Nov 2021 00:00:00 +0000</pubDate><guid>/blog/2021/20211115-virtualapp_gpl/</guid><description>
&lt;img src="/blog/2021/20211115-virtualapp_gpl/featured_va_logo_hu3f2b62dbbfb088b725f7604ec6c3a43c_9684_640x0_resize_catmullrom_2.png" width="640" height="330"/>
&lt;blockquote>
&lt;p>&lt;i>안녕하세요, 장학성입니다.&lt;/p>
&lt;p>지난 2021년 9월, 중국내 최초의 GPL 관련 판결이 있었다는 &lt;a href="https://www.oschina.net/news/159435">중국 기사&lt;/a>를 통해 공개되었습니다. 번역기를 활용해 이해한 내용을 정리해보았습니다.&lt;br>
제가 법률가도 아니고, 중국어도 모르다보니 틀린 내용이 있을 수도 있음을 감안해주시기 바랍니다. :)&lt;br>
오류를 발견하신 분은 언제든 알려주시면 감사하겠습니다! (&lt;a href="mailto:haksung@sk.com">haksung@sk.com&lt;/a>)&lt;/p>
&lt;p>(감수에 도움을 주신 한국저작권위원회 &lt;a href="https://www.linkedin.com/in/jin-young-choi-20174b44">최진영 센터장&lt;/a>님께 감사 드립니다. ^^)&lt;/i>&lt;/p>
&lt;/blockquote>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>출처 : &amp;ldquo;首例！违反 GPL 协议致侵权，被判赔偿 50 万元&amp;rdquo; - &lt;a href="https://www.oschina.net/news/159435">https://www.oschina.net/news/159435&lt;/a>&lt;/p>
&lt;/div>
&lt;h2 id="요약">요약&lt;/h2>
&lt;p>지난 2021년 4월, 중국에서 저작권 침해 분쟁에 대한 민사 1심 &lt;a href="https://www.iphouse.cn/cases/detail/woznd0v9pek4jx35ovdj8y5gxrm371q2.html?keyword=GPL">판결&lt;/a>이 있었습니다. 피고가 원고가 GPL-3.0으로 공개한 코드를 사용하면서 GPL-3.0의 의무수항을 준수하지 않음으로써 GPL-3.0이 부여한 라이선스 권리가 종료되고, 이로 인해 침해가 구성되었다는 판결입니다. 법원은 침해 사실을 확인하고, 피고에게 500,000 RMB (약 1억 원)의 배상금을 부과하였습니다.&lt;/p>
&lt;h2 id="분쟁-주체">분쟁 주체&lt;/h2>
&lt;p>이 분쟁의 원고와 피고, 그리고 분쟁 대상 소프트웨어는 다음과 같습니다.&lt;/p>
&lt;h3 id="원고">원고&lt;/h3>
&lt;p>원고는 &lt;strong>Jining Luohe Network Technology Co., Ltd&lt;/strong> 이며, VirtualApp 저작권자입니다.&lt;/p>
&lt;h3 id="피고">피고&lt;/h3>
&lt;p>피고는 모두 세 곳의 회사입니다.&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Fujian Fengling Chuangjing Technology Co., Ltd.&lt;/strong>
&lt;ul>
&lt;li>Dim Sum Desktop 저작권 소유자&lt;/li>
&lt;li>Dim Sum Desktop 공식 웹사이트 운영&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Beijing Fengling Chuangjing Technology Co., Ltd.&lt;/strong> (Fujian Fengling의 모회사)
&lt;ul>
&lt;li>Dim Sum Desktop 개발사로 표시됨&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Shenzhen Tencent Computer System Co., Ltd.&lt;/strong>
&lt;ul>
&lt;li>&amp;ldquo;Application Bao&amp;rdquo; (Dim Sum Desktop을 다운로드, 설치 및 운영하기 위한 서비스를 제공) 운영&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="분쟁-대상-소프트웨어">분쟁 대상 소프트웨어&lt;/h2>
&lt;h3 id="1-virtualapp-원고-측-소프트웨어">1. VirtualApp (원고 측 소프트웨어)&lt;/h3>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 210px">
&lt;img class="card-img-top" src="/blog/2021/20211115-virtualapp_gpl/featured_va_logo_hu3f2b62dbbfb088b725f7604ec6c3a43c_9684_200x0_resize_catmullrom_2.png" width="200" height="103">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>원고는 가상 Android 환경을 제공하는 소프트웨어인 VirtualApp을 개발하여 배포하였습니다.&lt;/p>
&lt;ul>
&lt;li>Gitee : &lt;a href="https://gitee.com/mirrors/VirtualApp">https://gitee.com/mirrors/VirtualApp&lt;/a>&lt;/li>
&lt;li>GitHub : &lt;a href="https://github.com/asLody/VirtualApp">https://github.com/asLody/VirtualApp&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 610px">
&lt;img class="card-img-top" src="/blog/2021/20211115-virtualapp_gpl/virtualapp_hucf2e3ee6baafa9749e90be990a82fea7_639852_600x0_resize_catmullrom_2.png" width="600" height="532">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
http://www.downcc.com/soft/359746.html
&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>히스토리를 조금 더 자세히 살펴 보겠습니다.&lt;/p>
&lt;ol>
&lt;li>원고 회사의 설립자 중 한 명이자 VirtualApp의 Original Contributor인 Lody는 2016년 7월 7일, VirtualApp을 &lt;a href="https://github.com/asLody/VirtualApp/commit/136fdba24e8770b009882369a778d468ce600bed">GitHub에 공개&lt;/a>하였습니다.&lt;/li>
&lt;li>2016년 7월 8일, &lt;a href="https://github.com/asLody/VirtualApp/commit/7a610f0abf1852c5cc8134134b44f11de6d2b566">LGPL-3.0을 적용&lt;/a>하였으며,&lt;/li>
&lt;li>2016년 8월 12일, &lt;a href="https://github.com/asLody/VirtualApp/commit/38cc2086ea88dd69009093d4d28fe2d11ee445b9">GPL-3.0으로 라이선스를 변경&lt;/a>하였습니다.
&lt;ul>
&lt;li>&lt;a href="https://github.com/asLody/VirtualApp/tree/38cc2086ea88dd69009093d4d28fe2d11ee445b9">당시 시점의 코드&lt;/a>를 보면, Repository 내 GPL-3.0 라이선스 사본이 포함되어 있고, README 내 License 정보도 &amp;ldquo;GPL-3.0&amp;quot;으로 명시하고 있음을 확인할 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>그런데, 2017년 1월 24일, 갑자기 &amp;ldquo;&lt;a href="https://github.com/asLody/VirtualApp/commit/7c8bfa40b2b301828cbaafefca122a3b5fc141d9">당신은 이 프로젝트를 무료로 사용할 수 있는 권한이 없다&lt;/a>&amp;ldquo;는 안내가 추가됩니다.
&lt;ul>
&lt;li>이후, 2017년 3월부터 7월까지 이 프로젝트를 상용으로 이용하기 위해서는 상용 라이선스 취득이 필요하다는 안내가 여러 차례 추가됩니다.&lt;/li>
&lt;li>이러한 라이선싱 정책 변화에 대해 중국 내 한 변호사는 Lody가 개발 초기에는 VirtualApp을 오픈소스 라이선스 하에 무료로 공개하였지만, 나중에 이를 이용하여 수익을 창출하려고 마음이 바뀐 것으로 추측하였습니다.&lt;/li>
&lt;li>다만, 이렇게 GPL로 공개한 오픈소스에 조건을 추가하는건 GPL에서 허용하지 않은 방식인데요, Lody는 오픈소스 라이선스에 대하여 제대로 이해하지 못하고 있었기 때문에 GPL-3.0에 위반하는 라이선싱 정책을 시도한 것으로 보인다고 중국 변호사는 언급한 바 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>2017년 8월, Lody는 VirtualApp(원고)을 설립합니다. 본격적으로 VirtualApp으로 비즈니스를 하겠다는 거죠.&lt;/li>
&lt;li>그리고, Lody는 결국, 2017년 10월 29일, GitHub에서 &lt;a href="https://github.com/asLody/VirtualApp/commit/44529892fc2e6198928196c80c5766e6453bf81e">오픈소스 라이선스를 제거&lt;/a>합니다.
&lt;ul>
&lt;li>&lt;a href="https://github.com/asLody/VirtualApp/commit/00f152f98a922ced0d858c31e1a9c2f0afb53ab6">https://github.com/asLody/VirtualApp/commit/00f152f98a922ced0d858c31e1a9c2f0afb53ab6&lt;/a>&lt;br>
&lt;img src="./github_delete.png" alt="github_delete">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>2017년 11월 8일, 원고는 VirtualApp v1.0에 대한 소프트웨어 저작권을 등록하여 등록증을 취득하고, 소프트웨어 저작권의 모든 권리를 향유하려고 합니다.&lt;/li>
&lt;li>2017년 12월 30일, VirtualApp을 상용으로 사용 시, 아래와 같이 &lt;a href="https://github.com/asLody/VirtualApp/commit/8e6d9cd925af55b53a7e93046c469dd69676c38b">반드시 상용라이선스 구매가 필요함&lt;/a>을 알리고, 이후, 더 이상 GitHub Repo에 소스 코드를 업데이트하지 않았습니다.&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>&amp;quot;VirtualApp(중국명: Luo box)은 2017년 8월에 정식으로 설립되었습니다.
VirtualApp을 상업적 목적으로 사용해야 하는 경우 반드시 QQ: 10890으로
연락하여 상업용 라이선스를 구매하시기 바랍니다.
VirtualApp의 코드를 상업적 이익, 내부 사용을 위해 자신의 코드로 사용하거나
승인 없이 소프트웨어 시장에 업로드하는 경우 당사에서 직접 경찰에 신고(저작권 침해)
하여 귀하의 회사에 법적 소송 및 형사 책임이 발생합니다.&amp;quot;
&lt;/code>&lt;/pre>&lt;p>참고로, VirtualApp은 Lody가 주요 기여자이고, 이후 30여 명의 개발자가 추가로 기여하였습니다.&lt;/p>
&lt;h3 id="2-dim-sum-desktop-피고-측-소프트웨어">2. Dim Sum Desktop (피고 측 소프트웨어)&lt;/h3>
&lt;p>Dim Sum Desktop은 VirtualApp과 마찬가지로 가상 안드로이드 환경을 제공하는 소프트웨어이며, 피고 Fujian Fengling Chuangjing Technology Co., Ltd.가 개발하였습니다.&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 610px">
&lt;img class="card-img-top" src="/blog/2021/20211115-virtualapp_gpl/dimsum_hu6d272197161dca7c802de3f115de61eb_572370_600x0_resize_catmullrom_2.png" width="600" height="488">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
http://www.appchina.com/app/com.dianxinos.dxhome
&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>피고는 Dim Sum Desktop을 개발하면서 &lt;a href="https://github.com/asLody/VirtualApp/tree/13808a689e0da48d31bdba4b8724891a1dbf84e1">GitHub에 공개된 VirtualApp의 2017년 8월 16일자&lt;/a> 버전을 받아서 포함하였습니다. 이 버전은 GPL-3.0이 적용된 상태이면서 (앞뒤가 맞지 않지만) 상업적 사용을 금지한다는 문구도 포함하고 있습니다.&lt;/p>
&lt;p>2018년 9월, 원고는 &amp;ldquo;Dim Sum Desktop v6.5.8&amp;quot;이 VirtualApp V1.0의 코드를 사용하고 있음을 확인하였습니다.&lt;/p>
&lt;ul>
&lt;li>두 소프트웨어 간 비교 가능한 코드 421개 중 다음과 같은 유사성을 발견하였습니다.
&lt;ul>
&lt;li>308 codes - substantial similarity&lt;/li>
&lt;li>27 codes - high similarity&lt;/li>
&lt;li>78 codes - general similarity&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="청구-취지">청구 취지&lt;/h2>
&lt;p>원고는 2019년 아래와 같은 청구 취지로 소송을 제기하였습니다.&lt;/p>
&lt;ol>
&lt;li>피고 Fujian Fengling Company와 피고 Beijing Fengling Company는 즉시 원고의 컴퓨터 소프트웨어 저작권 침해를 중단할 것
&lt;ul>
&lt;li>즉, 인터넷을 통한 모든 버전의 &amp;ldquo;Dim Sum Desktop&amp;rdquo; 소프트웨어 다운로드, 설치 및 운영 서비스 제공을 즉시 중단해야 함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>피고 Fujian Fengling Company와 피고 Beijing Fengling Company는 원고에게 &lt;strong>2천만 위안&lt;/strong>의 경제적 손실을 배상할 것&lt;/li>
&lt;li>피고 Fujian Fengling Company와 피고 Beijing Fengling Company는 침해에 대해 원고에게 &lt;strong>50만 위안&lt;/strong>의 합리 비용을 배상할 것 &lt;sub>compensate the plaintiff for a reasonable fee of 500,000 yuan for stopping the infringement&lt;/sub>&lt;/li>
&lt;li>피고 Fujian Fengling Company와 피고 Beijing Fengling Company는 이 case에 대한 소송 비용을 부담할 것&lt;/li>
&lt;/ol>
&lt;h2 id="법원-판결">법원 판결&lt;/h2>
&lt;p>2021년 4월, 법원은 이 사건이 컴퓨터 소프트웨어의 저작권 침해에 관한 분쟁이고 오픈소스와 관련된 문제라고 &lt;a href="https://www.iphouse.cn/cases/detail/woznd0v9pek4jx35ovdj8y5gxrm371q2.html?keyword=GPL">판결&lt;/a>하며 다음과 같은 쟁점에 대한 의견을 제시하였습니다.&lt;/p>
&lt;p>&lt;img src="china_judegement.png" alt="china_judegement">&lt;/p>
&lt;h3 id="쟁점-1-gpl-30의-법적-효력-여부">쟁점 1. GPL-3.0의 법적 효력 여부&lt;/h3>
&lt;p>법원은 GPL-3.0이 계약적 성격을 띠고 라이선스 제공자와 사용자 간의 저작권 계약으로 판단할 수 있으며 중국 &amp;lsquo;계약법&amp;rsquo;의 조정 범위에 해당한다고 판단하였습니다. 더불어 GPL-3.0 위반에 대한 불법 행위 책임을 아래와 같이 설명하였습니다.&lt;/p>
&lt;h4 id="gpl-30-위반에-대한-불법-행위-책임">GPL-3.0 위반에 대한 불법 행위 책임&lt;/h4>
&lt;ul>
&lt;li>저작권법은 저작권자의 배타적 권리를 보호함
&lt;ul>
&lt;li>복제, 수정, 배포 등의 권리는 저작권자에게만 있음 (저작권자 외에는 &amp;ldquo;공정 이용&amp;quot;의 범위 내에서만 저작물을 사용할 수 있음)&lt;/li>
&lt;li>누구든지 허가 없이 이런 행위를 하는 것은 침해에 해당함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://www.gnu.org/licenses/gpl-3.0.html">GPL-3.0&lt;/a> 8. Termination
&lt;ul>
&lt;li>GPL-3.0의 사용 조건을 위반하는 경우 GPL-3.0을 통해 얻은 권한은 자동으로 종료됨&lt;/li>
&lt;li>&amp;ldquo;You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>중국 민법 총칙 제158조
&lt;ul>
&lt;li>“민사법률행위는 조건이 있을 수 있다… 해제 조건이 있는 민사법률행위는 조건이 충족되면 무효”라고 규정&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>오픈소스 소프트웨어의 특성상 GPL-3.0서에 명시된 사용조건(소스코드 공개, 저작권 / 수정 정보 표시 등)은 라이선스 제공자가 사용자가 이를 사용할 수 있도록 하기 위한 전제조건임
&lt;ul>
&lt;li>사용자가 사용 전제조건을 위반한 경우 라이선스 제공자와 사용자 간의 GPL-3.0 계약은 자동으로 해지&lt;/li>
&lt;li>계약에 따른 사용자의 라이선스는 즉시 종료됨&lt;/li>
&lt;li>이후 사용자가 수행하는 복제, 수정, 배포 등의 행위는 권리의 상실로 인한 침해에 해당함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="쟁점-2-원고가-이-소송을-제기할-권리가-있는지-여부">쟁점 2. 원고가 이 소송을 제기할 권리가 있는지 여부&lt;/h3>
&lt;p>법원은 GitHub에서 여러 기여자가 만든 저작물에 대해 소유권의 성격(예: 단독저작물, 공동저작물, 결합저작물 등)을 명확하게 설명하지는 않았습니다. 다만, 원고가 VirtualApp에 대한 저작권 등록을 했다는 등의 이유로 원고가 저작권을 가지며, 다른 기여자의 동의 없이 소송을 제기할 권리가 있다고 판단했습니다.&lt;/p>
&lt;ol>
&lt;li>코드 호스팅 웹사이트의 업로드 기록과 인증 내역에 따라 원고가 VirtualApp의 저작권 소유자임을 입증할 수 있음&lt;/li>
&lt;li>원고는 소송을 제기하는데 기여자의 동의 또는 승인 없이 소송을 제기할 권리가 있음
&lt;ul>
&lt;li>원고의 주주인 Lody는 프로젝트 Owner로서 원고 주장의 근거가 되는 GitHub에 VirtualApp 초기버전의 소스 코드 중 총 31,097줄을 공개함.&lt;/li>
&lt;li>기여자는 GPL-3.0에 따라 VirtualApp 프로젝트에 자신의 소스 코드를 업로드하고, 라이선스도 부여함.
&lt;ul>
&lt;li>이는 자신이 기여한 기여물에 대한 라이선스를 프로젝트 소유자 및 기타 사용자에게 부여하는데 동의한 것으로 간주.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>만약, 모든 기여자의 만장일치 동의 또는 승인이 필요하게 요구한다면 실제로 권리 보호 조치를 시작조차 못하게 될 것임. 이는 오픈소스 프로젝트의 소송 권리 보호에 도움이 디지 않을 것.&lt;/li>
&lt;li>즉, 원고는 소송을 시작하기 위해 기여자의 동의나 승인이 필요하지 않음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>GPL-3.0은 라이선스 제공자가 사용자에 대한 특허권을 주장하는 것을 제한할 뿐 라이선스 계약을 위반한 사용자에 대한 저작권 주장을 제한하지 않음 
&lt;ul>
&lt;li>따라서 원고의 소송은 분쟁 해결 방식에 관한 GPL-3.0 합의를 위반하지 않았다고 볼 수 있음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>다만, 법원은 원고가 VirtualApp을 Relicense할 권리가 있는지에 관해서는 판단하지 않았습니다. 또한, 다른 기여자의 기여물까지 포함하여 Relicense함으로써 GPL-3.0을 오염시킨 부분에 관해서도 판단하지 않았습니다.&lt;/p>
&lt;h3 id="쟁점-3-피고의-행위가-원고의-저작권을-침해했는지-여부">쟁점 3. 피고의 행위가 원고의 저작권을 침해했는지 여부&lt;/h3>
&lt;p>법원은 VirtualApp의 &amp;ldquo;상용 사용 금지 문구&amp;quot;가 GPL-3.0 (7조 Additional Terms, 10조 Automatic Licensing of Downstream Recipients)을 위반한다고 지적하며, 여전히 GPL-3.0 라이선스가 우선한다고 판단하였습니다.&lt;/p>
&lt;ol>
&lt;li>원고는 VirtualApp을 오픈소스 버전과 상용버전으로 나누고, 후속 오픈소스 버전에서 &amp;ldquo;GPL-3.0&amp;rdquo; 라이선스를 삭제함
&lt;ul>
&lt;li>이와 별도로 원고는 오픈소스 버전의 VirtualApp을 권리 근거로 주장함. 따라서, VirtualApp의 오픈소스 버전과 상용버전의 관계 및 영향을 판단할 필요는 없음&lt;/li>
&lt;li>GPL-3.0에 따르면 GPL-3.0을 따르는 이전 버전의 파일은 후속 버전에서도 여전히 GPL-3.0에 구속됨&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>GPL-3.0은 사용자가 상업적 사용을 수행할 수 있도록 허용하며, 라이선스 제공자가 이를 제한할 수 없음
&lt;ul>
&lt;li>따라서, 법원은 원고의 다음 주장을 지지하지 &lt;strong>않음&lt;/strong> : &amp;ldquo;Dim Sum Desktop을 상용화하는 것은 GPL-3.0 위반임?&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>피고가 &amp;ldquo;Dim Sum Desktop&amp;rdquo; 앱(V6.5.8)이 GPL-3.0을 따라 소스 코드를 무료로 공개해야 하지만 피고 Fujian Fengling Company가 이를 이행하지 않았음
&lt;ul>
&lt;li>이에 따라 GPL-3.0 8조 및 중국 민법 일반원칙 제158조에 따라 피고 Fujian Fengling Company가 획득한 권한은 자동 종료됨&lt;/li>
&lt;li>따라서, 피고 Fujian Fengling Company의 VirtualApp 복사, 수정 및 배포는 권리 출처 상실로 인한 침해에 해당함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>다만, 법원은 GPL-3.0 8조의 &amp;ldquo;라이선스 복원 조항&amp;rdquo; (저작권자가 위반 사실을 알렸을 때 위반 통지를 받은 게 처음이고, 30일 이내에 위반 사항을 시정 시 라이선스 영구 복원)에 대한 언급은 없었습니다. 중국의 한 변호사는 &amp;ldquo;원고가 피고에게 사전에 위반 사실을 통지하였는지?&amp;rdquo;, &amp;ldquo;사전 통지 없이 그냥 바로 소송을 제기한 것은 아닌지?&amp;rdquo;, &amp;ldquo;그렇다면 아직 &amp;lsquo;30일 내 시정 시 라이선스 영구 회복&amp;rsquo;의 기회가 남아있는 것인지?&amp;rdquo; 등이 궁금하다고 언급하기도 하였습니다. (소송까지 가는 순간 통지한 걸로 봐야하지 않을까요?)&lt;/p>
&lt;h3 id="쟁점-4-침해-사실-확인-시-피고의-법적-책임-범위">쟁점 4. 침해 사실 확인 시 피고의 법적 책임 범위&lt;/h3>
&lt;p>원고는 피고의 이익에 기반한 손해배상액 산정을 요청하였습니다. 하지만 법원은 법정손해배상금(statutory damages)에 근거하여 배상금을 정한 것으로 보입니다.&lt;/p>
&lt;ul>
&lt;li>피고 Fujian Fengling Company는 &amp;ldquo;Dim Sum Desktop&amp;rdquo; 앱(V6.5.8)의 개발자, 운영 및 퍼블리셔로서 법에 따라 VirtualApp의 저작권 침해를 중지할 책임이 있음
&lt;ul>
&lt;li>피고 Fujian Fengling Company가 피고 Beijing Fengling Company의 전액 출자 자회사라는 사실에 비추어 볼 때, 두 피고가 공동으로 불법 행위 책임을 부담한다는 원고의 주장은 합법적이며 법원의 지지를 받음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>피고 Tencent는 &amp;ldquo;AppBao 공식 웹사이트&amp;quot;에서 침해 가능성에 대한 관련 규칙과 불만 제기 채널을 마련하고 고소된 소프트웨어를 즉시 제거함
&lt;ul>
&lt;li>원고는 또한 피고 Tencent에 대해 구체적인 불만을 제기하지 않았음&lt;/li>
&lt;li>따라서 피고 Tencent는 법적 책임을 질 필요가 없음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>보상 문제
&lt;ul>
&lt;li>원고는 피고 Fujian Fengling Company와 피고 Beijing Fengling Company의 침해 이익을 기반으로 계산하였다고 주장함&lt;/li>
&lt;li>법원은 배상액을 50만 위안으로 결정함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>50만 위안은 &lt;a href="https://www.copyright.or.kr/kcc/koreacopyright/info/download.do?brdctsno=44122&amp;amp;brdctsfileno=15650">저작권 침해 법정손해배상액의 최고액 수준&lt;/a>이라고 합니다.&lt;/p>
&lt;h2 id="마무리">마무리&lt;/h2>
&lt;p>그동안 중국은 저작권법 위반에 관대하다는 인식이 많았는데, 영문을 기반으로 한 오픈소스 라이선스의 법적 효력을 인정하고, 라이선스 위반을 저작권 침해로 판결한 점이 인상적이었습니다. 기업은 오픈소스 라이선스 의무를 준수하기 위한 정책과 프로세스를 갖추어야 이러한 분쟁에 휘말리는 위험을 최소화 할 수 있을 것입니다.&lt;/p>
&lt;p>피고는 사건을 대법원에 상고한 것으로 알려졌습니다. 피고가 항소심에서 어떤 주장을 펴나갈지 궁금합니다. :)&lt;/p></description></item><item><title>Blog: SKT, 오픈소스 컴플라이언스 분야 ISO 국제인증 획득</title><link>/blog/news/20210909-sktiso/</link><pubDate>Thu, 09 Sep 2021 00:00:00 +0000</pubDate><guid>/blog/news/20210909-sktiso/</guid><description>
&lt;img src="/blog/news/20210909-sktiso/featured-SKTiso_hu065adfe0227da2c1679217693f1d110a_422461_640x0_resize_q75_catmullrom.jpeg" width="640" height="414"/>
&lt;p>SK텔레콤이 ‘오픈소스’ 활용을 위한 체계적 관리(컴플라이언스) 시스템을 갖췄음을 국제적으로 인정받았다.&lt;/p>
&lt;p>SK텔레콤(대표이사 박정호, &lt;a href="http://www.sktelecom.com">www.sktelecom.com&lt;/a>)은 국제표준화기구(ISO, Interna-tional Organization for Standardization)로부터 오픈소스 컴플라이언스 관련 표준인증(ISO/IEC 5230)을 획득했다고 9일 밝혔다.&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 910px">
&lt;img class="card-img-top" src="/blog/news/20210909-sktiso/featured-SKTiso_hu065adfe0227da2c1679217693f1d110a_422461_900x600_fit_q75_catmullrom.jpeg" width="900" height="582">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;small class="text-muted">&lt;br/>SK텔레콤&lt;/small>&lt;/p>
&lt;/div>
&lt;/div>
&lt;hr>
&lt;p>자세한 내용은 기사 원문에서 확인하세요. : &lt;a href="https://news.sktelecom.com/147961">https://news.sktelecom.com/147961&lt;/a>&lt;/p></description></item><item><title>Blog: GPLv2도 설치정보를 요구한다고?</title><link>/blog/2021/20210728-gplv2installationinformation/</link><pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate><guid>/blog/2021/20210728-gplv2installationinformation/</guid><description>
&lt;img src="/blog/2021/20210728-gplv2installationinformation/featured_gplv3_hu006d62b08de1c17950f31195c01df16f_37653_640x0_resize_catmullrom_2.png" width="640" height="318"/>
&lt;blockquote>
&lt;p>&lt;i>안녕하세요.&lt;/p>
&lt;p>미국의 저명한 오픈소스 라이선스 전문 변호사인 P. McCoy Smith는 최근 &lt;a href="https://jolts.world/">JOLTS&lt;/a>&lt;sub>Journal of Open Law, Technology &amp;amp; Society&lt;/sub>에 &lt;a href="https://jolts.world/index.php/jolts/article/view/149">GPLv2가 &amp;lsquo;설치정보&amp;rsquo;를 요구하는가&lt;/a>를 주제로 글을 게재하였습니다.&lt;/p>
&lt;p>지난 2021년 3월, &lt;a href="https://sfconservancy.org/">SFC&lt;/a>&lt;sub>Software Freedom Convervancy&lt;/sub>의 &lt;a href="https://sfconservancy.org/blog/">블로그&lt;/a>에 &amp;ldquo;&lt;a href="https://sfconservancy.org/blog/2021/mar/25/install-gplv2/">Understanding Installation Requirements in GPLv2&lt;/a>&amp;ldquo;라는 주제로 GPLv2에서도 설치 정보 제공을 요구한다는 글이 올라왔었는데, 이에 대한 분석과 &lt;b>GPLv3의 &amp;lsquo;설치 정보&amp;rsquo; 요구 사항은 GPLv2에서는 해당하지 않는다는 의견&lt;/b>을 자세한 근거를 들어 설명하였습니다.&lt;/p>
&lt;p>여기서는 원문을 번역하되 Readability를 고려하고 독자의 이해를 돕기 위해 가능한 배경 설명을 추가하여 작성하였습니다.&lt;/p>
&lt;p>혹시, 오류를 발견하였거나 추가 의견이 있으신 분들은 언제든 연락해주세요. &lt;a href="mailto:haksung@sk.com">haksung@sk.com&lt;/a>&lt;/p>
&lt;p>감사합니다. :) &lt;/i>&lt;/p>
&lt;/blockquote>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>This paper was translated by Haksung Jang from the English version available at this &lt;a href="https://jolts.world/index.php/jolts/article/view/149/270">article&lt;/a>. The original author, &lt;a href="https://www.linkedin.com/in/mccoysmith">P. McCoy Smith&lt;/a>, has not reviewed this translation.&lt;/p>
&lt;/div>
&lt;h3 id="abstract">Abstract&lt;/h3>
&lt;p>GPLv3&lt;sub>GNU General Public License version 3&lt;/sub> 에서 추가된 주요 특징 중 하나는 소프트웨어 배포 시 소스 코드뿐만 아니라 &amp;lsquo;설치 정보&amp;rsquo;를 제공해야 한다는 요구사항이다. 이는 GPLv2에 존재하는 loophole (&lt;a href="https://opensource.stackexchange.com/questions/7020/what-exactly-is-tivoization-and-why-did-linus-torvalds-not-like-it-in-gplv3">Tivoization&lt;/a>)을 해결하기 위해 GPLv3에 새롭게 추가되었다. 그런데 최근에 이 설치 정보 요구 사항이 GPLv2에서도 요구한다고 봐야한다는 주장이 제기되었다.&lt;/p>
&lt;p>이 글에서는 GPLv3에 &amp;lsquo;설치 정보&amp;rsquo; 요구 사항을 포함하게 된 역사적 근거를 검토하고, 이 요구 사항은 GPLv2가 아닌, GPLv3에서 새롭게 적용된 것임을 설명한다. 또한, GPLv2 텍스트 분석을 통해서도 같은 결과를 도출한다.&lt;/p>
&lt;h2 id="1-introduction">1. Introduction&lt;/h2>
&lt;p>1991년 FSF&lt;sub>Free Software Foundation&lt;/sub>에서 공개한 GPLv2&lt;sub>GNU General Public License, version 2&lt;/sub>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>은 Copyleft (혹은 Reciprocal) 라이선싱 방식을 채택하였다. Copyleft 방식은 정해진 시기에 지정된 방식대로 소스 코드를 공개하고, 소프트웨어를 재배포할 때에는 동일한 라이선스 적용을 요구한다. 이는 소프트웨어가 &amp;ldquo;free&amp;quot;로 유지되도록 보장하는 최고의 수단이며, 이는 오늘날에도 여전히 많은 사람에게 인정되고 있다&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>. 여기서 &amp;ldquo;free&amp;quot;는 다음과 같다&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>.&lt;/p>
&lt;ul>
&lt;li>수정 사항을 공유할 수 있는 자유&lt;/li>
&lt;li>사용자가 코드로 수행할 수 있는 작업에 대한 자유&lt;/li>
&lt;li>사용자가 원하는대로 코드를 수정할 수 있는 자유&lt;/li>
&lt;/ul>
&lt;p>그럼에도 불구하고 2005년, FSF는 GPLv2를 출시할 당시 고려하지 못한&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup> 법률적&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup> 그리고 기술적&lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup> 문제를 해결하기 위해 라이선스 변경의 필요성을 인식하였다. 이에 따라 FSF는 2006년&lt;sup id="fnref:7">&lt;a href="#fn:7" class="footnote-ref" role="doc-noteref">7&lt;/a>&lt;/sup>부터 2007년까지 GPL의 신규 버전을 만들기 위해 대규모의 협업과 다국적 노력을 시작하였으며, 2007년 6월 29일 GPLv3를 공개하였다&lt;sup id="fnref:8">&lt;a href="#fn:8" class="footnote-ref" role="doc-noteref">8&lt;/a>&lt;/sup>.&lt;/p>
&lt;!-- ![gplv3](./featured_gplv3.png) -->
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 310px">
&lt;img class="card-img-top" src="/blog/2021/20210728-gplv2installationinformation/featured_gplv3_hu006d62b08de1c17950f31195c01df16f_37653_300x0_resize_catmullrom_2.png" width="300" height="149">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;h2 id="2-gplv3의-설치-정보-요구-사항">2. GPLv3의 &amp;lsquo;설치 정보&amp;rsquo; 요구 사항&lt;/h2>
&lt;p>GPLv2가 광범위하게 사용되던 15년 동안 제기된 문제와 우려를 해결하기 위해 GPLv3에는 수많은 기능이 추가되었다. 그중에서도 가장 주목할만한 (그러면서도 가장 논란이 되는&lt;sup id="fnref:9">&lt;a href="#fn:9" class="footnote-ref" role="doc-noteref">9&lt;/a>&lt;/sup>) 부분은 (1) &amp;lsquo;설치 정보&amp;rsquo;를 정의한 조항과 (2) GPLv3에 따라 라이센스가 부여된 소프트웨어를 &amp;lsquo;전달&lt;sub>convey&lt;/sub>&lt;sup id="fnref:10">&lt;a href="#fn:10" class="footnote-ref" role="doc-noteref">10&lt;/a>&lt;/sup>&amp;lsquo;할 때 어떤 상황에서 설치 정보를 제공해야 하는지를 명시한 조항이다. GPLv3에서의 &amp;lsquo;설치 정보&amp;rsquo; 요구 사항이 GPLv2에서 요구하는 요소를 어느 정도 포함하는지, 어느 것은 포함하지 않는지를 이해하려면 두 라이선스에서의 표현과 역사에 대한 자세한 검토가 필요하다.&lt;/p>
&lt;p>GPLv3, Section 6&lt;sup id="fnref:11">&lt;a href="#fn:11" class="footnote-ref" role="doc-noteref">11&lt;/a>&lt;/sup>(GPLv3 코드를 &amp;ldquo;Non-Source Form으로 Convey&amp;quot;시 의무 사항 명시)에서는 &amp;lsquo;설치 정보&amp;rsquo;를 위해 특별히 공개해야 할 의무를 정의한다.&lt;/p>
&lt;pre>&lt;code>“‘Installation Information’ ... means any methods, procedures, authorization keys, or other
information required to install and execute modified versions of a covered work ... from a
modified version of its Corresponding Source. The information must suffice to ensure that the
continued functioning of the modified object code is in no case prevented or interfered with
solely because modification has been made.”
&lt;/code>&lt;/pre>&lt;!-- ![installationinformation](./installationinformation.jpg) -->
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 610px">
&lt;img class="card-img-top" src="/blog/2021/20210728-gplv2installationinformation/installationinformation_huf81259ed580503fa4c4b1153203cb7a9_287695_600x0_resize_q75_catmullrom.jpg" width="600" height="493">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>GPLv3의 &amp;lsquo;설치 정보&amp;rsquo; 정의에서 주목할만한 것은 &amp;lsquo;인증키&lt;sub>authorization key&lt;/sub>&amp;rsquo; 및 &amp;lsquo;기타 정보&amp;rsquo;를 구체적으로 언급한 점이다. 이는 GPLv3를 만드는 프로세스가 시작될 당시 FSF가 우려했던 GPLv2 소프트웨어의 특정 남용 사례를 해결하기 위하여 포함된 것이다&lt;sup id="fnref:12">&lt;a href="#fn:12" class="footnote-ref" role="doc-noteref">12&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>GPLv3의 &amp;lsquo;설치 정보&amp;rsquo; 의무에 대한 자세한 요구 사항이나 GPLv3에서 설치 정보 제공을 요구하는 방법과 시기는 이 글의 주제를 벗어난다&lt;sup id="fnref:13">&lt;a href="#fn:13" class="footnote-ref" role="doc-noteref">13&lt;/a>&lt;/sup>. 그럼에도 불구하고 설치 정보 의무가 GPLv2에서도 해당한다고 주장할 수 있는 유사 부분은 무엇인지, 설치 정보 의무가 GPLv3에만 있는 고유한 부분임을 입증하는 근거는 무엇인지, 또 이런 내용이 어떤 과정을 통해 채택되었는지에 대한 일반적인 이해가 필요하다. 따라서 GPLv3에 &amp;lsquo;설치 정보&amp;rsquo; 의무가 추가되었던 역사적 배경과 GPLv3에 추가된 특정 표현이 무엇인지, 해당 표현이 GPLv2에 언급된 의무들과 어떻게 다른지 이해하는 것이 중요하다.&lt;/p>
&lt;h2 id="3-설치-정보-요구사항의-역사적-배경-tivoization">3. &amp;lsquo;설치 정보&amp;rsquo; 요구사항의 역사적 배경: &amp;lsquo;Tivoization&amp;rsquo;&lt;/h2>
&lt;p>2006년경 GPL의 새로운 버전인 GPLv3가 제안되었을 무렵, FSF는 &amp;lsquo;software freedom&amp;rsquo; 개념을 잠재적으로 훼손할 수 있는 관행에 대한 우려를 나타냈었다. FSF는 이 관행을 &amp;lsquo;Tivoization&lt;sup id="fnref:14">&lt;a href="#fn:14" class="footnote-ref" role="doc-noteref">14&lt;/a>&lt;/sup>&amp;lsquo;이라고 명명하였으며, 당시 FSF는 DVR&lt;sub>digital video recorder&lt;/sub> 회사인 TiVo가 사용자의 자유를 침해한다고 보았다.&lt;/p>
&lt;!-- ![tivo](./tivo.jpeg) -->
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 460px">
&lt;img class="card-img-top" src="/blog/2021/20210728-gplv2installationinformation/tivo_hueddc2488570257d678625df7b7772d8c_17430_450x0_resize_q75_catmullrom.jpeg" width="450" height="392">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
https://blog.codinghorror.com/tivoization-and-the-gpl/
&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>2000년대 중반, TiVo의 특정 DVR 하드웨어 디바이스에는 GPLv2 라이선스인 Linux 커널이 설치되어 있었다. 이 디바이스에는 TiVo 하드웨어 장치에 설치할 Linux 커널 버전을 확인하는 메커니즘이 포함되어 있었다. 이 유효성 검사 메커니즘은 체크섬 또는 암호화 해시 함수를 사용하여 장치에 설치된 커널 버전과 비교하였고, 설치하려는 버전이 특정 체크섬 또는 암호화 해시&lt;sup id="fnref:15">&lt;a href="#fn:15" class="footnote-ref" role="doc-noteref">15&lt;/a>&lt;/sup>와 일치하지 않으면 해당 버전의 Linux 커널 설치를 거부하였다. 이러한 방식으로 TiVo 디바이스는 (하드웨어 제조업체로써 내장된 체크섬 또는 해시값에 대한 필요한 정보를 가진 유일한 주체인) TiVo만 디바이스에 Linux 커널의 인증된 버전을 설치할 수 있도록 허용하였다. TiVo 디바이스 사용자(예: 디바이스를 구입한 고객)가 디바이스에 설치된 커널의 소스 코드를 가져와서 해당 커널을 수정한 후 재설치하려면 수정된 커널로는 체크섬 또는 해시가 달라지게 되므로 수정된 커널이 다시 설치 또는 실행되지 않게 되었다&lt;sup id="fnref:16">&lt;a href="#fn:16" class="footnote-ref" role="doc-noteref">16&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>이에 따라 FSF는 2006년, GPLv2 소프트웨어의 수정 버전을 기존 장치에 재설치할 수 없다는 것은 사용자가 소프트웨어에 대해 가져야 하는 자유를 침해하는 것으로 여겼고, 이 관행을 매우 경멸적인 용어로 설명하는 것을 주저하지 않았다.&lt;/p>
&lt;blockquote>
&lt;p>      &lt;i>“A &lt;b>tyrant&lt;/b> is a malicious device that refuses to allow users to install a different operating system or a modified operating system. These devices have measures to block execution of anything other than the ‘approved’ system versions.”&lt;/i>&lt;sup id="fnref:17">&lt;a href="#fn:17" class="footnote-ref" role="doc-noteref">17&lt;/a>&lt;/sup>&lt;/p>
&lt;/blockquote>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 310px">
&lt;img class="card-img-top" src="/blog/2021/20210728-gplv2installationinformation/rms_huf831f910aefa83e90dd8649124866f37_35249_300x0_resize_q75_catmullrom.jpeg" width="300" height="333">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
https://fsfe.org/activities/gplv3/brussels-rms-transcript.en.html
&lt;/p>
&lt;/div>
&lt;/div>
&lt;h2 id="4-역사적-분석-gplv3의-설치-정보-의무와-gplv2와의-관계">4. 역사적 분석: GPLv3의 &amp;lsquo;설치 정보&amp;rsquo; 의무와 GPLv2와의 관계&lt;/h2>
&lt;p>FSF는 &amp;lsquo;Tivoization&amp;rsquo;의 (수정한 바이너리를 재설치할 수 없게 하는) 관행에 대해 오랫동안 반대해 왔지만, GPLv3 초안 작성 중, FSF의 회장, 수석 변호사 및 Executive Director의 성명을 통해 이러한 관행이 GPLv2에서는 허용될 수 있다는 점도 분명히 했다.&lt;/p>
&lt;blockquote>
&lt;p>      &lt;i>“[T]he Tivo itself is the prototype of [T]ivoisation. The Tivo contains a small GNU/Linux operating system, thus, several programs under the GNU GPL[v2]. And, as far as I know, &lt;b>the Tivo company does obey GPL version 2&lt;/b>. … [T]he trouble begins because the Tivo will not run modified versions, the Tivo contains hardware designed to detect that the software has been changed and shuts down.”&lt;/i>&lt;sup id="fnref:18">&lt;a href="#fn:18" class="footnote-ref" role="doc-noteref">18&lt;/a>&lt;/sup>&lt;/p>
&lt;p>      &lt;i>“TiVo is a provider of hardware and software …. Our concern with them is that they have rights as users, but they should respect the rights of the users to whom they sell. Having a personal video recorder … which won&amp;rsquo;t run software if you modify the box … is not user-respecting conduct. &lt;b>(TiVo) complied with GPL 2 by the skin of its teeth.”&lt;/b>&lt;/i>&lt;sup id="fnref:19">&lt;a href="#fn:19" class="footnote-ref" role="doc-noteref">19&lt;/a>&lt;/sup>&lt;/p>
&lt;p>      &lt;i>“TiVoization is described by Peter Brown [Executive Director of FSF in 2006-07 during drafting of GPLv3] as circumventing GPL2 ‘in spirit, &lt;b>not technically.&lt;/b>’”&lt;/i>&lt;sup id="fnref:20">&lt;a href="#fn:20" class="footnote-ref" role="doc-noteref">20&lt;/a>&lt;/sup>&lt;/p>
&lt;/blockquote>
&lt;p>이러한 차이(&amp;lsquo;Tivoization&amp;rsquo;을 금지하는 GPLv3와 허용하는 GPLv2간의 차이)는 Linux Kernel의 저작자인 Linus Torvalds가 GPLv3으로 라이선스를 변경하지 않고 &amp;lsquo;GPLv2 only&amp;rsquo;로 유지하게 된 결정적인 이유였다.&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 460px">
&lt;img class="card-img-top" src="/blog/2021/20210728-gplv2installationinformation/torvalds_hu10fd96dd93c89372fc893c30d5cce225_10792_450x0_resize_q75_catmullrom.jpeg" width="450" height="338">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
https://www.youtube.com/watch?v=bV3cKq26nKQ
&lt;/p>
&lt;/div>
&lt;/div>
&lt;blockquote>
&lt;p>      &lt;i>“’The FSF is trying to make some things &lt;b>no longer permissible under the GPLv3 that the GPLv2 left open&lt;/b>, and I just happen to think that those things were better off being left open.’”&lt;/i>&lt;sup id="fnref:21">&lt;a href="#fn:21" class="footnote-ref" role="doc-noteref">21&lt;/a>&lt;/sup>&lt;/p>
&lt;p>      &lt;i>“‘I don&amp;rsquo;t think the GPL v3 conversion is going to happen for the kernel, since I personally don&amp;rsquo;t want to convert any of my code.’ … ‘&lt;b>I think it&amp;rsquo;s insane to require people to make their private signing keys available&lt;/b>, for example. I wouldn&amp;rsquo;t do it,’ [Torvalds] said.”&lt;/i>&lt;sup id="fnref:22">&lt;a href="#fn:22" class="footnote-ref" role="doc-noteref">22&lt;/a>&lt;/sup>&lt;/p>
&lt;p>      &lt;i>“[If] you can not &lt;b>install&lt;/b> or &lt;b>run&lt;/b> your changes on somebody else’s hardware … it in no way changes the fact that you got all the source code, and you can make changes (and use their changes) to it. &lt;b>That requirement has always been there, even with plain GPLv2&lt;/b>. You have the source. The difference? The hardware may only run signed kernels. The fact that the hardware is closed is a &lt;b>hardware&lt;/b> license issue. Not a software license issue. I’d suggest you take it up with your hardware vendor, and quite possibly just decide to not buy the hardware. Vote with your feet. … &lt;b>[I]t’s important to realize that signed kernels that you can’t run in modified form under certain circumstances is not at all a bad idea in many cases.&lt;/b>”&lt;/i>&lt;sup id="fnref:23">&lt;a href="#fn:23" class="footnote-ref" role="doc-noteref">23&lt;/a>&lt;/sup>&lt;/p>
&lt;/blockquote>
&lt;p>GPLv3의 &amp;lsquo;설치 정보&amp;rsquo; 요구사항에 대해 Torvalds의 의견은 여러 주요 커널 개발자들에 의해 아래와 같이 공유되었다&lt;sup id="fnref:24">&lt;a href="#fn:24" class="footnote-ref" role="doc-noteref">24&lt;/a>&lt;/sup>. Torvalds는 10년이 지난 후에도 일관된 입장을 유지했으며, 이는 오늘날까지 Linux Kernel이 &amp;lsquo;GPLv2 only&amp;rsquo; 라이선스를 유지하고 있는 이유 중 하나이다&lt;sup id="fnref:25">&lt;a href="#fn:25" class="footnote-ref" role="doc-noteref">25&lt;/a>&lt;/sup>.&lt;/p>
&lt;blockquote>
&lt;p>      &lt;i>“I give you source code, you give me your changes back; we’re even. … That’s my take on GPL version 2 and it’s that simple. … &lt;b>Version 3 extended that in ways that I personally am really uncomfortable with.&lt;/b> Namely I give you source code, that means if you use that source code, you can’t use it on your device unless you follow my rules. And to me that’s a violation of everything version 2 stood for. And I understand why the FSF did it, because I know what the FSF wants, &lt;b>but to me it’s not the same license at all&lt;/b>. So I was very upset, and made it very clear, and this was months before version 3 was actually published.”&lt;/i>&lt;sup id="fnref:26">&lt;a href="#fn:26" class="footnote-ref" role="doc-noteref">26&lt;/a>&lt;/sup>&lt;/p>
&lt;/blockquote>
&lt;p>FSF는 GPLv3를 만들고 공개하는 과정에서 GPLv2와는 달리 GPLv3에서는 &amp;lsquo;Tivoization&amp;rsquo;을 막을 수 있는 내용을 추가하고 있음을 분명히 하였다.&lt;/p>
&lt;blockquote>
&lt;p>      &lt;i>“There are several primary areas &lt;b>where version 3 is different from version 2. One is in regard to [T]ivoisation.&lt;/b>&amp;quot;&lt;sup id="fnref:27">&lt;a href="#fn:27" class="footnote-ref" role="doc-noteref">27&lt;/a>&lt;/sup>&lt;/p>
&lt;p>      “The Tivo includes some GPL-covered software. …[Y]ou can get the source code for that, as required by the GPL … and once you get the source code, you can modify it, and there are ways to install the modified software in your Tivo and if you do that, it won&amp;rsquo;t run, period. Because, it does a check sum of the software and it verifies that it&amp;rsquo;s a version from them and if it&amp;rsquo;s your version, it won&amp;rsquo;t run at all. &lt;b>So this is what we are forbidding, with the text we have written for GPL version three&lt;/b>. It says that the &lt;b>source code they must give you includes whatever signature keys, or codes that are necessary to make your modified version run.&lt;/b>”&lt;/i>&lt;sup id="fnref:28">&lt;a href="#fn:28" class="footnote-ref" role="doc-noteref">28&lt;/a>&lt;/sup>&lt;/p>
&lt;/blockquote>
&lt;p>FSF는 (GPLv3이 처음 제안되었을 때부터 이 글이 발표되는 날까지 계속해서) 실제로 GPLv3에는 GPLv2에 포함된 어떤 요구 사항보다 광범위한 &amp;lsquo;설치 정보&amp;rsquo; 요구 사항에 대한 정의가 있음을 분명히 하였다.&lt;/p>
&lt;blockquote>
&lt;p>      &lt;i>“&lt;b>GPLv2 did not address the use of technical measures to take back the rights that &amp;hellip; GPL[v2] granted&lt;/b>, because such measures did not exist in 1991 [when GPLv2 was written], and would have been irrelevant to the forms in which software was then delivered to users. … &lt;b>GPLv3 must address these issues: free software is ever more widely embedded in devices that impose technical limitations on the user&amp;rsquo;s freedom to change it.&lt;/b>”&lt;/i>&lt;sup id="fnref:29">&lt;a href="#fn:29" class="footnote-ref" role="doc-noteref">29&lt;/a>&lt;/sup>&lt;/p>
&lt;p>      &lt;i>“Does GPLv2 have a requirement about delivering installation information?&amp;hellip;&lt;/i>&lt;/p>
&lt;p>      &lt;i>“GPLv3 explicitly requires redistribution to include the full necessary ‘Installation Information.’ GPLv2 doesn&amp;rsquo;t use that term, but it does require redistribution to include scripts used to control compilation and installation of the executable with the complete and corresponding source code. &lt;b>This covers part, but not all, of what GPLv3 calls ‘Installation Information.’ Thus, GPLv3&amp;rsquo;s requirement about installation information is stronger.&lt;/b>”&lt;/i>&lt;sup id="fnref:30">&lt;a href="#fn:30" class="footnote-ref" role="doc-noteref">30&lt;/a>&lt;/sup>&lt;/p>
&lt;/blockquote>
&lt;p>Richard Stallman은 소프트웨어 개발자에게 GPLv2의 기존 문제를 해결하기 위해 라이선싱 정책을 GPLv3으로 &amp;ldquo;upgrade&amp;quot;할 것을 호소하였고, 개발자가 GPLv3으로 전환해야 하는 첫 번째 이유로 설치 정보 요구 사항이 새롭게 도입되었음을 언급하였다.&lt;/p>
&lt;blockquote>
&lt;p>      &lt;i>““Keeping a program under GPLv2 won&amp;rsquo;t create problems. &lt;b>The reason to migrate is because of the existing problems which GPLv3 will address.&lt;/b>&lt;/i>&lt;/p>
&lt;p>      &lt;i>“One major danger that GPLv3 will block is tivoization. Tivoization means computers (called “appliances”) contain GPL-covered software that you can&amp;rsquo;t change, because the appliance shuts down if it detects modified software. The usual motive for tivoization is that the software has features the manufacturer thinks lots of people won&amp;rsquo;t like. The manufacturers of these computers take advantage of the freedom that free software provides, but they don&amp;rsquo;t let you do likewise.&lt;/i>&lt;sup id="fnref:31">&lt;a href="#fn:31" class="footnote-ref" role="doc-noteref">31&lt;/a>&lt;/sup>&lt;/p>
&lt;/blockquote>
&lt;h2 id="5-gplv2의-소스-코드-공개-의무">5. GPLv2의 소스 코드 공개 의무&lt;/h2>
&lt;p>1991년 공개된 GPLv2와 같은 Copyleft 라이선스의 가장 주목할만한 특징 중 하나는 GPLv2의 조건에 따라 라이선스가 부여된 코드를 배포&lt;sub>distribute[s]&lt;/sub>&lt;sup id="fnref:32">&lt;a href="#fn:32" class="footnote-ref" role="doc-noteref">32&lt;/a>&lt;/sup>하는 모든 개인이나 단체는 &amp;lsquo;소스 코드&amp;rsquo;&lt;sup id="fnref:33">&lt;a href="#fn:33" class="footnote-ref" role="doc-noteref">33&lt;/a>&lt;/sup>를 제공해야 하는 의무가 있다는 것이다. GPLv2의 Section 3은 GPLv2하의 코드가 object 혹은 executable code form으로 배포되는 경우 반드시 제공해야 하는 &amp;lsquo;소스 코드&amp;rsquo;의 구성 요소를 구체적으로 정의한다&lt;sup id="fnref:34">&lt;a href="#fn:34" class="footnote-ref" role="doc-noteref">34&lt;/a>&lt;/sup>.&lt;/p>
&lt;pre>&lt;code>“The source code for a work means the preferred form of the work for making modifications to it.
For an executable work, complete source code means all the source code for all modules it
contains, plus any associated interface definition files, plus the scripts used to control
compilation and installation of the executable.”
&lt;/code>&lt;/pre>&lt;p>소스 코드를 제공해야 하는 의무에 대한 설명은 주로 컴퓨터 프로그래밍에서의 &amp;lsquo;소스 코드&amp;rsquo;가 무엇인지에 대한 일반적인 상식과 연결해서 이해할 수 있다.&lt;/p>
&lt;blockquote>
&lt;p>      &lt;i>“Source Code: … The form in which a computer program (software) is written by the programmer. Source code is written in some formal programming language which can be compiled automatically into object code or machine code or executed by an interpreter.”&lt;/i>&lt;sup id="fnref:35">&lt;a href="#fn:35" class="footnote-ref" role="doc-noteref">35&lt;/a>&lt;/sup>&lt;/p>
&lt;/blockquote>
&lt;p>GPLv2에는 또한 라이선스의 &amp;lsquo;소스 코드&amp;rsquo; 정의에 해당하는 다른 두 항목도 포함하고 있다.&lt;/p>
&lt;ul>
&lt;li>‘associated interface definition files’&lt;/li>
&lt;li>‘scripts used to control compilation and installation of the executable&amp;rsquo;&lt;/li>
&lt;/ul>
&lt;p>GPLv2의 공개 의무가 GPLv3의 공개 의무와 어떻게 다른지 이해하기 위해서는 이러한 조항의 의미를 검토하는 것이 필요하다.&lt;/p>
&lt;h2 id="6-텍스트-분석-gplv3의-설치-정보-의무와-gplv2-의-소스-코드-의무">6. 텍스트 분석: GPLv3의 &amp;lsquo;설치 정보&amp;rsquo; 의무와 GPLv2 의 소스 코드 의무&lt;/h2>
&lt;p>위에서 논의한 바와 같이, executable code 배포에 대한 GPLv3의 공개 의무에는 &amp;lsquo;Corresponding Source&amp;rsquo;&lt;sup id="fnref:36">&lt;a href="#fn:36" class="footnote-ref" role="doc-noteref">36&lt;/a>&lt;/sup>와 &amp;lsquo;설치 정보&amp;rsquo;&lt;sup id="fnref:37">&lt;a href="#fn:37" class="footnote-ref" role="doc-noteref">37&lt;/a>&lt;/sup>가 모두 포함된다.&lt;/p>
&lt;pre>&lt;code>“[A]ll the source code needed to generate, install, and (for an executable work) run the object
code and to modify the work, including scripts to control those activities.”
&lt;/code>&lt;/pre>&lt;pre>&lt;code>“[A]ny methods, procedures, authorization keys, or other information required to install and
execute modified versions of a covered work ... from a modified version of its Corresponding
Source.”
&lt;/code>&lt;/pre>&lt;p>GPLv3의 원래 초안에서는 &amp;ldquo;Corresponding Source&amp;quot;의 정의 내에 인증키를 제공해야 하는 의무가 포함되어 있었다&lt;sup id="fnref:38">&lt;a href="#fn:38" class="footnote-ref" role="doc-noteref">38&lt;/a>&lt;/sup>. 그러나 인증키와 같은 데이터를 소스 코드와 혼용하여 정의하는 것에 대한 반대 의견이 있었고, 이에 따라 FSF는 인증키 요구 사항을 다른 section으로 옮겼다.&lt;/p>
&lt;blockquote>
&lt;p>      &lt;i>“We have moved the technical restrictions provisions from section 1, where they formed part of the definition of Corresponding Source, to section 6, &lt;b>where they are presented as a condition on the right to convey object code works&lt;/b>. Some critics of the provisions in our earlier drafts focused on what they regarded as &lt;b>an inappropriate equation of cryptographic keys with source code&lt;/b>. Placing the requirements in section 6 should make their purpose and reasonableness more evident.”&lt;/i>&lt;sup id="fnref:39">&lt;a href="#fn:39" class="footnote-ref" role="doc-noteref">39&lt;/a>&lt;/sup>&lt;/p>
&lt;/blockquote>
&lt;p>따라서, GPLv3의 초안 변경 단계에서 FSF는 &amp;lsquo;설치 정보&amp;rsquo; 요구 사항이 GPLv2에 존재하다가 GPLv3에도 포함된 &amp;lsquo;Corresponding Source Code&amp;rsquo; 의무를 넘어서는 별도의 의무임을 인식하고 인정한 것이다.&lt;/p>
&lt;p>GPLv2의 소스 코드 공개 의무는 다음과 같다&lt;sup id="fnref:40">&lt;a href="#fn:40" class="footnote-ref" role="doc-noteref">40&lt;/a>&lt;/sup>.&lt;/p>
&lt;pre>&lt;code>“For an executable work, complete source code means all the source code for all modules it
contains, plus any associated interface definition files, plus the scripts used to control
compilation and installation of the executable.”
&lt;/code>&lt;/pre>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 610px">
&lt;img class="card-img-top" src="/blog/2021/20210728-gplv2installationinformation/sourcecode_hud661b00a8c430186e9180a8af92b3a08_237586_600x0_resize_q75_catmullrom.jpeg" width="600" height="422">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>GPLv2의 &amp;lsquo;corresponding source code&amp;rsquo; 요구 사항 내에서 GPLv3의 &amp;lsquo;설치 정보&amp;rsquo; 요구 사항과 유사한 부분이 있다면, 이는 별도로 명시된 아래의 두 가지 항목에 대한 것이다.&lt;/p>
&lt;ul>
&lt;li>‘any associated interface definition files’&lt;/li>
&lt;li>‘scripts used to control compilation and installation of the executables.’&lt;/li>
&lt;/ul>
&lt;p>&amp;lsquo;interface definition file&amp;rsquo;은 컴퓨터 프로그래밍에서 흔하게 사용되는 용어이다(GPLv2에서는 이 용어에 대한 더 자세한 정의가 없다). 특정 소프트웨어의 프로그래밍 인터페이스에 대한 attribute와 definition을 포함하는 별도의 파일로 해석할 수 있다&lt;sup id="fnref:41">&lt;a href="#fn:41" class="footnote-ref" role="doc-noteref">41&lt;/a>&lt;/sup>. GPLv2의 이러한 요구 사항이 수정된 바이너리의 설치 또는 실행을 허용하는데 필요한 인증키나 체크섬 또는 기타 정보를 제공해야 하는 의무를 부과하는 것으로 보이지는 않는다. 대신, 배포한 바이너리에 대한 인터페이스를 이해하는데 필요한 정보를 공개할 것을 요구하는 것이다(이는 공개된 소스 코드만으로는 알아내기 어렵기 때문).&lt;/p>
&lt;p>반면에, 두 번째 항목인 executable을 컴파일하고 설치하는데 사용되는 script는 분명 GPLv2 대상 executable의 설치와 관련된 자료이다. 다만, 이 요구 사항은 컴퓨팅에서 일반적으로 의미하는 &amp;lsquo;script&amp;rsquo; 자체에 대한 것이다.&lt;/p>
&lt;blockquote>
&lt;p>      &lt;i>“A computer script is a list of commands that are executed by a certain program or scripting engine. Scripts may be used to automate processes on a local computer …. Script files are usually just text documents that contain instructions written in a certain scripting language. … [W]hen opened by the appropriate scripting engine, the commands within the script are executed.”&lt;/i>&lt;sup id="fnref:42">&lt;a href="#fn:42" class="footnote-ref" role="doc-noteref">42&lt;/a>&lt;/sup>&lt;/p>
&lt;p>      &lt;i>“Script[:] … a sequence of instructions or commands for a computer to execute … especially … one that automates a small task (such as assembling or sorting a set of data).”&lt;/i>&lt;sup id="fnref:43">&lt;a href="#fn:43" class="footnote-ref" role="doc-noteref">43&lt;/a>&lt;/sup>&lt;/p>
&lt;/blockquote>
&lt;p>Installation script&lt;sup id="fnref:44">&lt;a href="#fn:44" class="footnote-ref" role="doc-noteref">44&lt;/a>&lt;/sup>는 일반적으로 특정 장치에 특정 프로그램을 설치하는 프로세스를 자동화하는데 사용하는 작고 간단한 프로그램이다&lt;sup id="fnref:45">&lt;a href="#fn:45" class="footnote-ref" role="doc-noteref">45&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>따라서, 텍스트 해석의 관점에서, GPLv2의 ‘scripts used to control … installation of the executable’ 제공 의무가 GPLv2 executable code를 설치하는데 필요한 체크섬, 해시, 승인/서명키, 또는 기타 숫자 데이터를 포함하여 제공하는 것으로 해석될 수 없다는 것은 의심의 여지가 없어 보인다. 이러한 데이터는 &amp;lsquo;script&amp;rsquo;에 대한 일반적인 범위에 속하지 않는다.&lt;/p>
&lt;p>차라리 이보다 흥미로운 해석상의 문제라고 한다면, 어떤 형태로든 executable의 유효성 검증을 위한 설치 프로그램을 실행하는 펌웨어가 하드웨어 디바이스 자체에 포함된 경우이다(예를 들어, executable에 수정을 가했을 경우, 유효하지 않은 것으로 판단하여 설치를 제한시키는 기능). 하지만 이런 경우라고 하더라도 GPLv3의 초안 작성 및 공개 과정 동안 FSF와 Linux Kernel 개발자 모두가 오랜 기간 동안 일관되게 GPLv2하에서는 (TiVo와 같이 PROM-loaded information을 사용한 경우 등) 어떠한 설치 유효성 검사도 허용된다는 입장을 고수했음을 고려하면, 펌웨어에서 즉시 검사하는 기능이 있더라도 이것이 GPLv2의 &amp;lsquo;scripts used to … installation of the executable&amp;rsquo; 요건에 의해 설치 정보를 제공해야 한다고 주장하기는 어려울 것이다.&lt;/p>
&lt;h2 id="7-설치-정보-요구-사항을-gplv2로-backporting">7. 설치 정보 요구 사항을 GPLv2로 Backporting&lt;/h2>
&lt;p>어떤이는 GPLv3의 전체 &amp;lsquo;설치 정보&amp;rsquo; 정의 부분을 GPLv2의 소스 코드 의무 부분 내에 backporting하려고 하기도 하는데, 이런 노력은 역사적, 텍스트 해석적으로 잘못된 결과를 초래한다. 완전한 전체 &amp;lsquo;설치 정보&amp;rsquo; 정의를 GPLv2의 Section 3에 포함했다고 가정해보자. 그런데 그렇게 하는 순간 딜레마에 빠지게 된다. GPLv3의 &amp;lsquo;설치 정보&amp;rsquo; 요구 사항은 의무가 적용되는 대상이 특정 제품으로 한정되어 있다. 바로 &amp;lsquo;User Product&amp;rsquo;&lt;sup id="fnref:46">&lt;a href="#fn:46" class="footnote-ref" role="doc-noteref">46&lt;/a>&lt;/sup>이다. GPLv3에서의 &amp;lsquo;설치 정보&amp;rsquo; 제공 요구 사항은 오직 &amp;lsquo;User Product&amp;rsquo;에만 적용되며 다른 제품에는 적용되지 않는다&lt;sup id="fnref:47">&lt;a href="#fn:47" class="footnote-ref" role="doc-noteref">47&lt;/a>&lt;/sup>.&lt;/p>
&lt;pre>&lt;code>“If you convey an object code work under this section in, or with, or specifically for use in,
a User Product ... the Corresponding Source conveyed under this section must be accompanied by the
Installation Information.”
&lt;/code>&lt;/pre>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 610px">
&lt;img class="card-img-top" src="/blog/2021/20210728-gplv2installationinformation/userproduct_hu8060ef0c1af02219b726a431e92773ee_374463_600x0_resize_q75_catmullrom.jpeg" width="600" height="591">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>반면에 GPLv2에는 소스 코드 의무가 적용되는 제품 유형에 대한 정의나 제한이 없다. &amp;lsquo;User Product&amp;rsquo;이든지 아니든지 모두 GPLv2의 의무에 따라 소스 코드를 제공해야 한다. 따라서, GPLv3의 완전한 &amp;lsquo;설치 정보&amp;rsquo; 의무 정의가 GPLv2의 기존 공개 의무를 되풀이하거나 명확히 하는 것에 불과했다면 GPLv3은 이러한 공개 의무가 존재할 수 있는 상황을 줄여버리게 된 것이다. 그렇다면 결과적으로 GPLv3은 GPLv2에 비해 더 적은 범위의 일부 소프트웨어만 적용되는 것이 때문에 &amp;lsquo;software freedom&amp;rsquo; 측면에서 범위가 축소된 것이 된다. 이러한 해석은 최초 GPLv3을 만들고자 했던 목표와 정반대가 되는 것이다.&lt;/p>
&lt;blockquote>
&lt;p>      &lt;i> “As a free software license &amp;hellip; this license [GPLv3] intrinsically disfavours technical attempts to restrict users freedom to copy, modify, and share copyrighted works. Each of [the licenses] provisions shall be interpreted in light of this specific declaration of the licensor&amp;rsquo;s intent. We wish courts all over the world to understand that our intent [in creating GPLv3] &lt;b>is to maximise freedom&lt;/b>, not to restrict it, and that everything should be so understood when effect is given to its terms”&lt;/i>&lt;sup id="fnref:48">&lt;a href="#fn:48" class="footnote-ref" role="doc-noteref">48&lt;/a>&lt;/sup>&lt;/p>
&lt;/blockquote>
&lt;p>다시 말하지만, GPLv3는 &amp;lsquo;설치 정보&amp;rsquo; 의무 자체가 GPLv2의 공개 의무를 넘어 &amp;lsquo;freedom&amp;rsquo;을 확장하는 경우여야 원래의 취지대로 freedom을 극대화할 수 있다. 그렇지 않다면, GPLv2 의무가 오히려 특정 제품 유형에 국한되지 않기 때문에, User Product에 대해서만 의무를 부과하는 GPLv3는 &amp;lsquo;freedom&amp;rsquo; 범위를 축소한 것이 된다는 해석의 딜레마에 빠지게 된다.&lt;/p>
&lt;h2 id="8-gplv2의-텍스트-및-역사적-수정주의subrevisionismsub">8. GPLv2의 텍스트 및 역사적 수정주의&lt;sub>Revisionism&lt;/sub>&lt;/h2>
&lt;p>위에서 상세히 설명한 바와 같이, 텍스트 분석과 과거 기록을 검토한 결과, GPLv3의 &amp;lsquo;설치 정보&amp;rsquo; 의무는 GPLv2의 소스 코드 의무에는 존재하지 않는 것이며, 어떤 방식으로도 이를 GPLv2에 backport할 수 없음은 명확하다. 이러한 사실에도 불구하고, 최근 과거 기록을 변경하고, GPLv2의 요구 사항을 재해석하여, GPLv2의 소스 코드 의무를 GPLv3의 &amp;lsquo;설치 정보&amp;rsquo; 요구 사항과 동일시하려는 노력이 있다.&lt;/p>
&lt;blockquote>
&lt;p>      &lt;i> “GPLv2 §3 requires that the source code include ‘meta-material’ like scripts, interface definitions, &lt;b>and other material that is used to ‘control compilation and installation’&lt;/b> of the binaries.”&lt;/i>&lt;sup id="fnref:49">&lt;a href="#fn:49" class="footnote-ref" role="doc-noteref">49&lt;/a>&lt;/sup>&lt;/p>
&lt;p>      &lt;i> “GPLv2 included a clear obligation to provide ‘the scripts used to control … installation’ that function for the GPLv2&amp;rsquo;d works. GPLv2 assures, to the purchaser of an embedded product, their absolute right to receive the &lt;b>information necessary to install a modified version of the GPLv2&amp;rsquo;d works.&lt;/b> … The GPLv2 was designed to assure bug-fixing. Furthermore, the drafters knew that, on embedded systems and devices, you need to know how to install those fixes. Scripts can be technical [artefacts] like shell scripts, &lt;b>but can also be merely a recipe and/or guidance — written instructions that explain how to succeed at install.&lt;/b>”&lt;/i>&lt;sup id="fnref:50">&lt;a href="#fn:50" class="footnote-ref" role="doc-noteref">50&lt;/a>&lt;/sup>&lt;/p>
&lt;/blockquote>
&lt;p>이러한 진술에서와 같이 GPLv3의 (executable을 설치하고 실행하기 위한 정보, recipe, 가이드, 설명 등) &amp;lsquo;설치 정보&amp;rsquo; 요구 사항 개념을 GPLv2에 포함해서 GPLv2에서도 설치를 위한 &amp;lsquo;script&amp;rsquo;를 제공하게 하려는 노력이 현재 진행 중이다. 이러한 노력은 모두 GPLv2의 실제 요구 사항에 반대되는 텍스트&lt;sub>conter-textual&lt;/sub>일 뿐만 아니라 반역사적이다. 다시 말하지만 GPLv2 의 작성자는 GPLv2로는 Tivo에게 수정한 executable을 Tivo 디바이스에 다시 설치하기 위한 필요 정보의 제공을 의무화할 수 없음을 인정하였다&lt;sup id="fnref:51">&lt;a href="#fn:51" class="footnote-ref" role="doc-noteref">51&lt;/a>&lt;/sup>.&lt;/p>
&lt;h2 id="9-conclusion">9. Conclusion&lt;/h2>
&lt;ul>
&lt;li>GPLv3의 텍스트와 역사적 기록은 GPLv2에는 없는 새로운 요구 사항인 &amp;lsquo;설치 정보&amp;rsquo; 제공을 추가하기 위해 GPLv3이 특별히 설계되었음을 분명히 한다.&lt;/li>
&lt;li>이러한 역사적 기록은 또한 GPLv2에서는 (GPLv2 코드의 수정 버전 설치를 막을 수 있는 인증키 또는 기타 하드웨어 내장 정보와 같은) 설치 정보를 제공하지 않고 배포하는 것이 완벽하게 허용되었고, 단지 좁은 범위의 정보 (설치 script)만 요구한다는 것을 분명히 하였다.&lt;/li>
&lt;li>GPLv3의 &amp;lsquo;설치 정보&amp;rsquo; 요구 사항을 GPLv2로 backporting하려는 노력은 모두 반역사적이며, GPLv3이 GPLv2보다 &amp;lsquo;freedom&amp;rsquo;을 제한하게 하는 반 직관적인 결과를 초래한다. 이는 처음부터 결코 GPLv3을 만든 목적이 아니다.&lt;/li>
&lt;li>이러한 반 직관적인 결과를 주장하는 자들은 software freedom을 사랑하는 개발자들에게 GPLv3보다 GPLv2를 선호하도록 조언했을 것이며, 이는 GPLv3을 만들고 출시하려는 모든 목적에 반대되는 결과이다.&lt;/li>
&lt;/ul>
&lt;p>GPLv2에 대한 반역사적이고 텍스트로 뒷받침되지 않는 해석이 어디까지나 단순한 이론적 논쟁인지, 아니면 컴플라이언스 소송의 결과로 재판소에서 최종적으로 판단을 받을 것인지는 두고 봐야 할 일이다. (위에서 자세히 설명한) GPLv3 초안을 만들면서 작성된 많은 진술과 GPLv2의 실제 표현들이 GPLv2의 소스 코드 의무의 범위에 대한 모든 결정에 근거가 될 것이다.&lt;/p>
&lt;h3 id="about-the-author">About the author&lt;/h3>
&lt;p>&lt;i>&lt;b>P. McCoy Smith&lt;/b> is Founding Attorney at Lex Pan Law (&lt;a href="http://www.lexpan.law/">www.lexpan.law&lt;/a>), a full-service intellectual property law firm in Portland, Oregon, U.S.A., that has a sub-speciality in free and open source licensing, as well as Founder at Opsequio (&lt;a href="http://www.opsequ.io/">www.opsequ.io&lt;/a>), an software licence compliance consultancy. As a member of &lt;a href="http://gplv3.fsf.org/discussion-committees/B/memberlist">GPLv3 Discussion Committee B&lt;/a>, he was an active participant in the debate over, and revision of, the ‘Installation Information’ requirement in that licence.&lt;/i>&lt;/p>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>&lt;b>Licence and Attribution&lt;/b>&lt;/p>
&lt;p>This paper was published in the Journal of Open Law, Technology, &amp;amp; Society, Volume 12, Issue 1 (April 2021). It originally appeared online at &lt;a href="https://www.jolts.world">https://www.jolts.world&lt;/a>&lt;/p>
&lt;p>This article should be cited as follows:&lt;/p>
&lt;p>Smith, P. McCoy (2021) &amp;lsquo;Does GPLv2 Include an “Installation Information” Obligation? A Textual &amp;amp; Historical Analysis&amp;rsquo;, Journal of Open Law, Technology &amp;amp; Society, 12(1), pp 21 – 31&lt;/p>
&lt;p>DOI: &lt;a href="https://doi.org/10.5033/jolts.v12i1.149">10.5033/jolts.v12i1.149ㅊㅊ&lt;/a>&lt;/p>
&lt;p>Copyright © 2021 P. McCoy Smith.&lt;/p>
&lt;p>This article is licensed under a Creative Commons Attribution 4.0 CC-BY available at&lt;/p>
&lt;p>&lt;a href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/&lt;/a>&lt;/p>
&lt;p>&lt;img src="./cc-by.png" alt="ccby">&lt;/p>
&lt;/div>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>GNU Operating System, ‘GNU Library General Public License, version 2.0,’ (June, 1991) &lt;a href="https://www.gnu.org/licenses/old-licenses/lgpl-2.0.html">https://www.gnu.org/licenses/old-licenses/lgpl-2.0.html&lt;/a> (accessed March 8, 2021). &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>Although GPLv3 was designed to eventually supplant GPLv2, in the 14 years since GPLv3 was published, the use of GPLv3, by some measures, is roughly equal in measure to the use of GPLv2; GPLv3’s relative use is also declining while GPLv2 remains steady state. Johnson, Patricia, ‘Open Source Licenses in 2021: Trends and Predictions,’ WhiteSource (January 28, 2021) &lt;a href="https://resources.whitesourcesoftware.com/blog-whitesource/open-source-licenses-trends-and-predictions">https://resources.whitesourcesoftware.com/blog-whitesource/open-source-licenses-trends-and-predictions&lt;/a> (accessed March 30, 2021). &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>See GNU Operating System, ‘What is free software? The Free Software Definition,’ &lt;a href="https://www.gnu.org/philosophy/free-sw.en.html">https://www.gnu.org/philosophy/free-sw.en.html&lt;/a> (accessed March 8, 2021). &lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>Free Software Foundation, ‘Rationale for 1st discussion draft,’ &lt;a href="http://gplv3.fsf.org/gpl-rationale-2006-01-16.html">http://gplv3.fsf.org/gpl-rationale-2006-01-16.html&lt;/a> (accessed March 22, 2021). &lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5" role="doc-endnote">
&lt;p>One example of a change in the law that the authors of GPLv3 felt needed to be addressed in that license was the adoption in 1996 of the WIPO Copyright Treaty (WCT), and the passage in 1998 of its counterpart in the United States, the Digital Millennium Copyright Action (DMCA), particularly the provisions against circumvention of &amp;lsquo;technological protection measures&amp;rsquo;, See WCT Article 11; 17 U.S.C. § 1201 (1998). GPLv3, § 3 directly addresses these additions to copyright law. &lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:6" role="doc-endnote">
&lt;p>The technology in TiVo&amp;rsquo;s devices, preventing reinstallation of modified binaries on devices running GPLv2 software, was one example of technology developed long after the GPLv2 licence was drafted that was of concern to the drafters of GPLv3. Subsequent to the release of GPLv3, millions, if not billions, of devices continue to be distributed with a GPLv2-licensed Linux kernel that prevent the reinstallation of modified binaries. GPLv3 also addressed the outmoded language around distribution of source code in GPLv2, and GPLv3 ‒ in Section 6 ‒ added several additional mechanisms for fulfilling source code obligations more consistent with current mechanisms for software distribution. See GPLv3, § 6(d)-(e). &lt;a href="#fnref:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:7" role="doc-endnote">
&lt;p>Irish Free Software Organization, ‘Transcript of Opening session of first international GPLv3 conference,’ (January 16th 2006) &lt;a href="http://www.ifso.ie/documents/gplv3-launch-2006-01-16.html">http://www.ifso.ie/documents/gplv3-launch-2006-01-16.html&lt;/a> (accessed March 22, 2021). &lt;a href="#fnref:7" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:8" role="doc-endnote">
&lt;p>GNU Operating System, ‘GNU General Public License, version 3,’ (‘GPLv3’) (June 29, 2007) &lt;a href="https://www.gnu.org/licenses/gpl-3.0.html">https://www.gnu.org/licenses/gpl-3.0.html&lt;/a> (accessed March 22, 2021). &lt;a href="#fnref:8" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:9" role="doc-endnote">
&lt;p>Burnette, Ed, ‘Tivo and GPL: Beauty and the Beast?,’ ZDNet, (October 2, 2006) &lt;a href="https://www.zdnet.com/article/tivo-and-gpl-beauty-and-the-beast/">https://www.zdnet.com/article/tivo-and-gpl-beauty-and-the-beast/&lt;/a> (accessed March 29, 2021). &lt;a href="#fnref:9" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:10" role="doc-endnote">
&lt;p>‘Convey’ is the activity defined in GPLv3 as triggering source code disclosure obligations. GPLv3, n. 6, §§ 4-6. &lt;a href="#fnref:10" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:11" role="doc-endnote">
&lt;p>GPLv3, n. 6 above, § 6. &lt;a href="#fnref:11" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:12" role="doc-endnote">
&lt;p>See ‘Transcript of Opening Session of First International GPLv3 Conference,’ (January 16th 2006) &lt;a href="http://www.ifso.ie/documents/gplv3-launch-2006-01-16.html">http://www.ifso.ie/documents/gplv3-launch-2006-01-16.html&lt;/a> (accessed May 5, 2021) at 0h 03m 59s &lt;a href="#fnref:12" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:13" role="doc-endnote">
&lt;p>Perhaps the most notable feature of the ‘Installation Information’ requirement, and an important feature in understanding how that requirement differs from the source code obligations in GPLv2, is that the ‘Installation Information’ requirement of GPLv3 applies only to a specified subset of products – ‘User Products’ upon which GPLv3 might be installed. See GPLv3, n. 6 above, at § 6. &lt;a href="#fnref:13" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:14" role="doc-endnote">
&lt;p>The Computer Language Company, ‘Tivoization,’ The Free Dictionary by Farlex &lt;a href="https://encyclopedia2.thefreedictionary.com/Tivoization">https://encyclopedia2.thefreedictionary.com/Tivoization&lt;/a> (accessed April 2, 2021). &lt;a href="#fnref:14" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:15" role="doc-endnote">
&lt;p>Checksums and cryptographic hashes are techniques used to determine whether a received binary file is identical to, or deviates from, an expected binary file. Various techniques are used to generate a numerical value associated with the digits in the expected file to generate a value; that value is then compared at the receiving end to a stored representation of the same value. In this way, any changes to the binary file, even so much as changing one bit from ‘0’ to ‘1’ or vice versa, will produce a different value which will not match the stored value, thus indicating at the received binary file is not identical to the expected binary file. See Fisher, T., ‘What Is a Checksum?’ Lifewire (June 14, 2021) &lt;a href="https://www.lifewire.com/what-does-checksum-mean-2625825">https://www.lifewire.com/what-does-checksum-mean-2625825&lt;/a> (accessed June 14, 2021). &lt;a href="#fnref:15" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:16" role="doc-endnote">
&lt;p>Miller, Todd, ‘Using large disks with TiVo,’ Sudo Project (2008) &lt;a href="https://web.archive.org/web/20120206023943/http://www.gratisoft.us/tivo/bigdisk.html">https://web.archive.org/web/20120206023943/http://www.gratisoft.us/tivo/bigdisk.html&lt;/a> (accessed April 2, 2021) (‘it is not possible to replace the kernel on a Series2 TiVo since the PROM requires that the kernel be cryptographically signed with a key from TiVo’). Note that although most of the commentary about the Series 2 TiVo devices of the mid-2000s indicate that they would not allow modified GPLv2 binaries to install or execute, at least one commentator has stated that that device allowed such binaries to be installed and run, but only prevented execution of non-GPLv2 proprietary code on that device. See Kuhn, Bradley &amp;amp; Webster, Behan, ‘Safely Copylefted Cars: Reexamining GPLv3 Installation Information Requirements,’ Linux Foundation Events (2017) at 13 &lt;a href="https://events19.linuxfoundation.org/wp-content/uploads/2017/11/Safely-Copylefted-Cars-Reexamining-GPLv3-Installation-Information-Requirements-ALS-Bradley-Kuhn-Behan-Webster-1.pdf">https://events19.linuxfoundation.org/wp-content/uploads/2017/11/Safely-Copylefted-Cars-Reexamining-GPLv3-Installation-Information-Requirements-ALS-Bradley-Kuhn-Behan-Webster-1.pdf&lt;/a> (accessed April 9, 2021) &lt;a href="#fnref:16" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:17" role="doc-endnote">
&lt;p>GNU Operating System, ‘Proprietary Tyrants,’ &lt;a href="https://www.gnu.org/proprietary/proprietary-tyrants.html">https://www.gnu.org/proprietary/proprietary-tyrants.html&lt;/a> (accessed April 2, 2021). &lt;a href="#fnref:17" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:18" role="doc-endnote">
&lt;p>Stallman, Richard, ‘Transcript of Richard Stallman at the 5th international GPLv3 conference,’ (November 21, 2006) &lt;a href="https://fsfe.org/activities/gplv3/tokyo-rms-transcript#tivoisation">https://fsfe.org/activities/gplv3/tokyo-rms-transcript#tivoisation&lt;/a> (accessed April 2, 2021). &lt;a href="#fnref:18" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:19" role="doc-endnote">
&lt;p>Shankland, Stephen, ‘Defender of the GPL,’ CNet (January 19, 2006) &lt;a href="https://www.cnet.com/news/defender-of-the-gpl/">https://www.cnet.com/news/defender-of-the-gpl/&lt;/a> (accessed April 2, 2021). &lt;a href="#fnref:19" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:20" role="doc-endnote">
&lt;p>Byfield, Bruce, ‘GPLv2 or GPLv3?: Inside the Debate,’ Datamation (June 17, 2007) &lt;a href="https://www.datamation.com/trends/gplv2-or-gplv3-inside-the-debate/">https://www.datamation.com/trends/gplv2-or-gplv3-inside-the-debate/&lt;/a> (accessed April 9, 2021). &lt;a href="#fnref:20" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:21" role="doc-endnote">
&lt;p>Bennett, Amy, ‘Linux creator Torvalds still no fan of GPLv3,’ Computerworld (July 28, 2006) &lt;a href="https://www.computerworld.com/article/2820022/linux-creator-torvalds-still-no-fan-of-gplv3.html">https://www.computerworld.com/article/2820022/linux-creator-torvalds-still-no-fan-of-gplv3.html&lt;/a> (accessed April 7, 2021). &lt;a href="#fnref:21" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:22" role="doc-endnote">
&lt;p>Shankland, Stephen, ‘Torvalds rules out GPL3 for Linux,’ ZDNet UK (January 27, 2006) &lt;a href="https://web.archive.org/web/20080424051024/http:/news.zdnet.co.uk/software/0,1000000121,39249370,00.htm">https://web.archive.org/web/20080424051024/http:/news.zdnet.co.uk/software/0,1000000121,39249370,00.htm&lt;/a> (accessed April 7, 2021). &lt;a href="#fnref:22" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:23" role="doc-endnote">
&lt;p>Barr, Joe, ‘Torvalds versus GPLv3 DRM restrictions,’ Linux.com (February 2, 2006) &lt;a href="https://www.linux.com/news/torvalds-versus-gplv3-drm-restrictions/">https://www.linux.com/news/torvalds-versus-gplv3-drm-restrictions/&lt;/a> (accessed April 8, 2021). &lt;a href="#fnref:23" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:24" role="doc-endnote">
&lt;p>Bottomley, James, et al., ‘Kernel developers&amp;rsquo; position on GPLv3,’ LWN.net (September 22, 2006) &lt;a href="https://lwn.net/Articles/200422/">https://lwn.net/Articles/200422/&lt;/a> (accessed April 8, 2021). See also Bottomley, James, et al., &amp;lsquo;The Dangers and Problems with GPLv3,&amp;rsquo; (September 15, 2006) &lt;a href="https://lore.kernel.org/lkml/1158941750.3445.31.camel@mulgrave.il.steeleye.com">https://lore.kernel.org/lkml/1158941750.3445.31.camel@mulgrave.il.steeleye.com&lt;/a> (accessed May 27, 2021). &lt;a href="#fnref:24" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:25" role="doc-endnote">
&lt;p>Linux kernel licensing notice, &lt;a href="https://elixir.bootlin.com/linux/latest/source/COPYING">https://elixir.bootlin.com/linux/latest/source/COPYING&lt;/a> (accessed April 8, 2021). &lt;a href="#fnref:25" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:26" role="doc-endnote">
&lt;p>Deb Conf, ‘Linus Torvalds says GPL v3 violates everything that GPLv2 stood for,’ YOUTUBE (accessed May 5, 2021, at 0h 0m 34s) &lt;a href="https://www.youtube.com/watch?v=PaKIZ7gJlRU">https://www.youtube.com/watch?v=PaKIZ7gJlRU&lt;/a>. &lt;a href="#fnref:26" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:27" role="doc-endnote">
&lt;p>Stallman, Richard, ‘Transcript of Richard Stallman at the 3rd international GPLv3 conference,’ (June 22, 2006) &lt;a href="https://fsfe.org/activities/gplv3/barcelona-rms-transcript.en.html#tivoisation">https://fsfe.org/activities/gplv3/barcelona-rms-transcript.en.html#tivoisation&lt;/a> (accessed April 2, 2021). &lt;a href="#fnref:27" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:28" role="doc-endnote">
&lt;p>Stallman, Richard, ‘Transcript of Richard Stallman speaking on GPLv3 in Torino,’ (March 18, 2006) &lt;a href="https://fsfe.org/activities/gplv3/torino-rms-transcript.en.html#drm">https://fsfe.org/activities/gplv3/torino-rms-transcript.en.html#drm&lt;/a> (accessed April 2, 2021). &lt;a href="#fnref:28" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:29" role="doc-endnote">
&lt;p>Free Software Foundation, ‘Opinion on Digital Restrictions Management,’ (August, 2006) &lt;a href="http://gplv3.fsf.org/drm-dd2.html">http://gplv3.fsf.org/drm-dd2.html&lt;/a> (accessed March 17, 2021). &lt;a href="#fnref:29" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:30" role="doc-endnote">
&lt;p>GNU Project, ‘Frequently Asked Questions About the GNU Licenses,’ &lt;a href="https://www.gnu.org/licenses/gpl-faq.html#InstInfo">https://www.gnu.org/licenses/gpl-faq.html#InstInfo&lt;/a> (accessed April 7, 2021) &lt;a href="#fnref:30" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:31" role="doc-endnote">
&lt;p>Stallman, Richard M. ‘Why Upgrade to GPL Version 3,’ (May 31, 2007) &lt;a href="http://gplv3.fsf.org/rms-why.html">http://gplv3.fsf.org/rms-why.html&lt;/a> (accessed May 6, 2021). &lt;a href="#fnref:31" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:32" role="doc-endnote">
&lt;p>GPLv3 uses the term ‘convey,’ n. 8 above, whereas GPLv2 uses the term ‘distribute,’ to articulate acts that trigger, among other things, obligations to provide source. Although there are subtle differences between the two terms, they are intended to cover the same acts. GNU Project, ‘Frequently Asked Questions About the GNU Licenses,’ &lt;a href="https://www.gnu.org/licenses/gpl-faq.html#ConveyVsDistribute">https://www.gnu.org/licenses/gpl-faq.html#ConveyVsDistribute&lt;/a> (accessed March 29, 2021). &lt;a href="#fnref:32" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:33" role="doc-endnote">
&lt;p>Brown, Neil, ‘GNU GPL 2.0 and 3.0: obligations to include licence text, and provide source code,’ JOLTS vol. 2, no. 1 (2010) DOI: 10.5033/ifosslr.v2i1.31 (accessed March 30, 2021). &lt;a href="#fnref:33" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:34" role="doc-endnote">
&lt;p>GPLv2, n. 1 above, § 3. &lt;a href="#fnref:34" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:35" role="doc-endnote">
&lt;p>‘Source Code,’ Computer Dictionary of Information Technology &lt;a href="https://www.computer-dictionary-online.org/definitions-s/source-code.html">https://www.computer-dictionary-online.org/definitions-s/source-code.html&lt;/a> (accessed March 30, 2021). &lt;a href="#fnref:35" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:36" role="doc-endnote">
&lt;p>GPLv3, n. 6 above, § 1. &lt;a href="#fnref:36" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:37" role="doc-endnote">
&lt;p>GPLv3, n. 6 above, § 6. &lt;a href="#fnref:37" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:38" role="doc-endnote">
&lt;p>Free Software Foundation, ‘GPLv3 First Discussion Draft,’ §1 (January 16, 2006) &lt;a href="http://gplv3.fsf.org/gpl-draft-2006-01-16.html">http://gplv3.fsf.org/gpl-draft-2006-01-16.html&lt;/a> (accessed June 14, 2021). &lt;a href="#fnref:38" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:39" role="doc-endnote">
&lt;p>Free Software Foundation, ‘GPLv3 Third Discussion Draft Rationale,’ (March 28, 2007) &lt;a href="http://gplv3.fsf.org/gpl3-dd3-rationale.pdf/download">http://gplv3.fsf.org/gpl3-dd3-rationale.pdf/download&lt;/a> (accessed June 14, 2021). &lt;a href="#fnref:39" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:40" role="doc-endnote">
&lt;p>GPLv2, n. 1 above, § 3. &lt;a href="#fnref:40" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:41" role="doc-endnote">
&lt;p>E.g., Microsoft, ‘Interface Definition (IDL) File,’ Windows Developer Documentation (May 31, 2018) &lt;a href="https://docs.microsoft.com/en-us/windows/win32/midl/interface-definition-idl-file">https://docs.microsoft.com/en-us/windows/win32/midl/interface-definition-idl-file&lt;/a> (accessed April 8, 2021);
de St. Germain, H. James, ‘Interfaces in Object Oriented Programming Languages,’ University of Utah Computing Department &lt;a href="https://www.cs.utah.edu/~germain/PPS/Topics/interfaces.html">https://www.cs.utah.edu/~germain/PPS/Topics/interfaces.html&lt;/a> (accessed April 8, 2021). &lt;a href="#fnref:41" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:42" role="doc-endnote">
&lt;p>Christensson, Per, ‘Script Definition,’&amp;rdquo; TechTerms. (2006) &lt;a href="https://techterms.com/definition/script">https://techterms.com/definition/script&lt;/a> (accessed April 8, 2021). &lt;a href="#fnref:42" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:43" role="doc-endnote">
&lt;p>‘Script,’ Merriam-Webster.com Dictionary, Merriam-Webster &lt;a href="https://www.merriam-webster.com/dictionary/script">https://www.merriam-webster.com/dictionary/script&lt;/a> (accessed April 8, 2021). &lt;a href="#fnref:43" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:44" role="doc-endnote">
&lt;p>GPLv2’s requirement to provide ‘compilation’ scripts are not analysed in this article; compilation is part the process of converting source code into executable code, and is not related to the subsequent activities of installing, or executing, that executable code. &lt;a href="#fnref:44" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:45" role="doc-endnote">
&lt;p>Arthur, Ty, ‘How to Write a Simple Script to Install a Program,’ Techwalla &lt;a href="https://www.techwalla.com/articles/how-to-write-a-simple-script-to-install-a-program">https://www.techwalla.com/articles/how-to-write-a-simple-script-to-install-a-program&lt;/a> (accessed April 8, 2021) &lt;a href="#fnref:45" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:46" role="doc-endnote">
&lt;p>‘User Products’ in GPLv3 are subject to a rigorous definition which excludes a large class of products which can, and currently do, use code licensed under one of the GPL family of licences: “A ‘User Product’ is either (1) a ‘consumer product’, which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. … A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product.” GPLv3, n. 6 above, at Section 6. &lt;a href="#fnref:46" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:47" role="doc-endnote">
&lt;p>GPLv3, n. 6 above, at Section 6. &lt;a href="#fnref:47" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:48" role="doc-endnote">
&lt;p>Transcript of Opening Session of First International GPLv3 Conference, see n.10 above, at 0h 23m 30s. &lt;a href="#fnref:48" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:49" role="doc-endnote">
&lt;p>Kuhn, Bradley, et al., ‘Copyleft and the GNU General Public License: A Comprehensive Tutorial and Guide,’ Copyleft.org at § 5.2 (2003-2018) &lt;a href="https://copyleft.org/guide/comprehensive-gpl-guidech6.html#x9-460005.2">https://copyleft.org/guide/comprehensive-gpl-guidech6.html#x9-460005.2&lt;/a> (accessed April 9, 2021). &lt;a href="#fnref:49" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:50" role="doc-endnote">
&lt;p>Gingerich, Denver, ‘Understanding Installation Requirements in GPLv2,’ Software Freedom Conservancy (March 25, 2021) &lt;a href="https://sfconservancy.org/blog/2021/mar/25/install-gplv2/">https://sfconservancy.org/blog/2021/mar/25/install-gplv2/&lt;/a> (accessed April 9, 2021). &lt;a href="#fnref:50" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:51" role="doc-endnote">
&lt;p>See above nn. 17 and 22-23. &lt;a href="#fnref:51" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>Blog: SK텔레콤, 개발자와 소통하는 커뮤니티 ‘DEVOCEAN’ 론칭</title><link>/blog/news/20210614-devocean/</link><pubDate>Mon, 14 Jun 2021 00:00:00 +0000</pubDate><guid>/blog/news/20210614-devocean/</guid><description>
&lt;img src="/blog/news/20210614-devocean/featured-devocean_hu14eeb2e9bb7ca8a2f7495fccba6aca57_92060_640x0_resize_q75_catmullrom.jpeg" width="640" height="398"/>
&lt;p>SK텔레콤이 스타트업·대학 등 외부 개발자들과 소통하는 오픈 커뮤니티를 론칭하며 SK의 ICT 역량을 적극 공유에 나선다.&lt;/p>
&lt;p>‘&lt;a href="https://devocean.sk.com/">데보션&lt;/a>’은 개발자들을 위한 영감의 바다(Developer’s Ocean)라는 뜻으로, 개발자들이 지식과 경허을 공유하는 커뮤니티를 ‘바다’에 비유했다.&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 810px">
&lt;img class="card-img-top" src="/blog/news/20210614-devocean/featured-devocean_hu14eeb2e9bb7ca8a2f7495fccba6aca57_92060_900x600_fit_q75_catmullrom.jpeg" width="800" height="498">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
SK텔레콤은 SK하이닉스, SK㈜C&amp;C, SK브로드밴드, SK플래닛 등 SK ICT패밀리사 개발전문가들과 외부 개발인재간 소통과 기술 공유를 위한 디벨로퍼 릴레이션 채널인 ‘데보션’을 론칭했다. 사진=SK텔레콤
&lt;small class="text-muted">&lt;br/>SK텔레콤&lt;/small>&lt;/p>
&lt;/div>
&lt;/div>
&lt;hr>
&lt;p>자세한 내용은 기사 원문에서 확인하세요. : &lt;a href="https://www.fntimes.com/html/view.php?ud=202106140855478693645ffc9771_18">https://www.fntimes.com/html/view.php?ud=202106140855478693645ffc9771_18&lt;/a>&lt;/p></description></item><item><title>Blog: Dockerfile 배포 시 컴플라이언스 책임은 누구에게?</title><link>/blog/2021/20210504-dockerfiles/</link><pubDate>Tue, 04 May 2021 00:00:00 +0000</pubDate><guid>/blog/2021/20210504-dockerfiles/</guid><description>
&lt;img src="/blog/2021/20210504-dockerfiles/featured-dockerfile-ex_hu144e77f3a0c06d5c2e11835ba0d8ec62_326508_640x0_resize_catmullrom_2.png" width="640" height="368"/>
&lt;blockquote>
&lt;p>안녕하세요!&lt;/p>
&lt;p>2021년 4월, 독일의 유명한 오픈소스 변호사인 Till Jaeger는 Dockerfile이 생성하는 Docker image내 포함될 오픈소스에 대한 라이선스 컴플라이언스 책임은 누구에게 있는가에 대한 글을 &lt;a href="https://jolts.world/index.php/jolts/article/view/147">발표&lt;/a>하였습니다. Till은 독일법과 유럽 연합 사법 재판소&lt;sub>CJEU&lt;/sub>의 판례를 근거로 Dockerfile 제공자가 라이선스 의무를 준수해야 한다고 설명하였습니다.&lt;/p>
&lt;p>여기서는 Till의 영어 원본을 국문으로 번역하였습니다. 이해를 돕기 위해 이미지를 추가하였고, 군데군데 개인 의견을 인용구(높임말)로 작성하였습니다.&lt;/p>
&lt;ul>
&lt;li>번역 오류나 문의는 이메일로 연락주시기 바랍니다. : &lt;a href="mailto:haksung@sk.com">haksung@sk.com&lt;/a>&lt;/li>
&lt;li>감수에 도움 주신 카카오의 &lt;a href="https://www.linkedin.com/in/%EC%98%81%ED%99%98-%EA%B9%80-4069b5135/">Sean&lt;/a>에게 깊이 감사드립니다. ^^&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;hr>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>This paper was translated by Haksung Jang from the English version available at the &lt;a href="https://jolts.world/index.php/jolts/article/view/147">Distribution of Dockerfiles: &lt;/a>. The original document is licensed under &lt;a href="https://creativecommons.org/licenses/by/4.0/">CC-BY-4.0&lt;/a>. The original author, Till Jaeger, has not reviewed this translation.&lt;/p>
&lt;/div>
&lt;div class="alert alert-success" role="alert">
&lt;h4 class="alert-heading">개요&lt;/h4>
&lt;p>컨테이너 기술은 Target 시스템과 관계 없이 통합 소프트웨어 배포를 가능하게 한다. 이런 장점으로 Docker를 이용하는 배포가 점점 더 인기를 얻고 있다. 그런데 이때 FOSS 라이선스 컴플라이언스에 대한 새로운 의문이 제기되었다. Docker 환경에서는 &amp;ldquo;Docker image&amp;rdquo; 형태의 전체 소프트웨어를 배포하는 것뿐만 아니라, Dockerfile만을 배포할 수도 있다. Dockerfile은 스크립트 파일과 유사한 형태로 외부 Repository로부터 소프트웨어를 다운로드받게 하는 일종의 명령만을 포함하고 있다. 이러한 분산형 배포&lt;sub>decentralized distribution&lt;/sub>의 형태는 라이선스 컴플라이언스를 누가 책임을 져야 하는지에 대한 의문을 제기하였다. 이 글에서는 프리 라이선스를 설명하기 위한 출발점으로 유럽 저작권법에 따른 &amp;ldquo;배포&lt;sub>distribution&lt;/sub>&amp;ldquo;의 개념을 설명한다. 연구를 통해 저작권법 의미에서의 배포가 항상 물리적인 배포여야 하는 것은 아니라는 점이 밝혀졌다.&lt;/p>
&lt;p>이 글은 &lt;a href="https://www.osadl.org/">OSADL&lt;/a>&lt;sub>Open Source Automation Development Lab&lt;/sub>로부터 자금 지원을 받고, 공동으로 작성하였다.&lt;/p>
&lt;/div>
&lt;h2 id="1-소개-및-문제점">1. 소개 및 문제점&lt;/h2>
&lt;p>Docker 기술과 관련된 FOSS 라이선스 컴플라이언스 문제는 최근 몇 년 동안 주요 연구 대상이 되었다. 특히 Docker의 기술적 토대를 설명하고 관련된 라이선스 컴플라이언스 문제를 제기한 Armijn Hemel의 백서인 “&lt;a href="https://www.linuxfoundation.org/wp-content/uploads/Docker-Containers-for-Legal-Professionals-Whitepaper_042420.pdf">Docker Containers for Legal Professionals&lt;/a>”&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>는 광범위한 분석 내용을 제공한다. Hemel은 Dockerfile의 수신자가 이를 사용하기 위하여 제삼자로부터 소스 파일을 다운로드받게 되는데, 이때 다운받는 소프트웨어 컴포넌트에 대한 라이선스 컴플라이언스 책임은 누구에게 있는가에 대해 공개적으로 질문을 제기하였다.&lt;/p>
&lt;p>거의 모든 FOSS 라이선스는 라이선스 의무 준수를 &amp;ldquo;배포&lt;sub>distribution&lt;/sub>&amp;rdquo; (또는 GPL-3.0의 &amp;ldquo;전달&lt;sub>conveying&lt;/sub>&amp;ldquo;와 연결시킨다. 대부분의 라이선스는 라이선스 내에서 &amp;ldquo;배포&amp;rdquo; 또는 &amp;ldquo;전달&amp;quot;이 무엇인지에 대해 추가로 정의하지는 않기 때문에, &amp;ldquo;배포&amp;quot;의 정의는 적용되는 저작권법에 따라 판단해야 한다&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>.&lt;/p>
&lt;blockquote>
&lt;p>대부분의 오픈소스 라이선스는 오픈소스를 &amp;ldquo;재배포&amp;quot;하는 시점에 준수해야 할 라이선스 의무 사항을 요구합니다. 즉, 오픈소스를 재배포하지 않는다면 라이선스 의무 준수가 요구되지 않습니다.
&amp;ldquo;배포&amp;quot;의 범위를 어디까지로 판단해야 할지는 해당 지역에 적용되는 저작권법에 따라 해석해야 합니다.&lt;/p>
&lt;/blockquote>
&lt;p>라이선스 컴플라이언스에 대한 중요성 때문에 &amp;ldquo;배포&amp;quot;라는 용어는 계속해서 법적인 분석 대상이 되고 있다. Heather Meeker는 미국 저작권 관점에서 &lt;a href="http://dx.doi.org/10.5033/ifosslr.v4i1.66">오픈소스 라이선스에서의 배포&lt;/a>를 주제로 글을 작성하였다&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>. 많은 오픈소스 라이선스가 미국 저작권법을 배경으로 작성되었지만, 유럽 법원은 CJEU(유럽 연합 사법 재판소)&lt;sub>Court of Justice of the European Union&lt;/sub>에서 정교하게 설명한 &amp;ldquo;배포&amp;quot;에 대한 정의를 바탕으로 판결할 것으로 예상한다.&lt;/p>
&lt;p>이 글에서는 먼저 Docker의 기술적인 기본 사항에 대한 개요와 유럽 저작권법에 따른 &amp;ldquo;배포&amp;quot;라는 용어에 대한 해석을 제공한다. 이어서 Dockerfile을 배포할 때 라이선스 컴플라이언스를 누가 책임져야 하느냐에 대해 논의하겠다.&lt;/p>
&lt;h2 id="2-docker의-기술적-배경">2. Docker의 기술적 배경&lt;/h2>
&lt;p>Docker는 컨테이너에 프로그램을 설치하고 배포하는 기술이다. 모든 Dependency가 하나의 기술 Unit에 존재하고, 호스트 시스템과 대부분 독립적이라는 장점이 있다. Hypervisor를 통한 가상화와 달리 Docker 컨테이너에는 운영 체제 커널이 포함되어 있지 않다. 대신 특정 운영 체제 명령을 사용하면 컨테이너의 파일 시스템 트리가 컨테이너의 모든 프로그램에 대한 루트 디렉터리로 표시된다. 따라서 컨테이너 외부의 나머지 파일 시스템은 컨테이너 프로그램에서 보이지 않게 된다. Docker 컨테이너에는 Unix 계열 운영 체제가 필요하며 주로 Linux 커널과 함께 사용하도록 되어 있다.&lt;/p>
&lt;h3 id="docker-image">Docker image&lt;/h3>
&lt;p>사전에 구성된 컨테이너는 &amp;ldquo;Docker image&amp;quot;로 배포될 수 있으며, 기본 프로그램 외에 애플리케이션, 프로그램 코드로서의 Dependency, 필요한 경우 유틸리티 및 구성 파일도 포함할 수 있다. Docker image는 개별적으로 배포될 수 있지만 &amp;ldquo;Docker Hub&amp;quot;와 같은 공용 Repository를 통해서도 배포될 수 있다. 이는 C 라이브러리, Package Manager, Shell 및 디렉터리 트리와 같은 필수 시스템 구성 요소를 포함하고 특정 Linux 배포를 참조하는 이른바 &amp;ldquo;Base Image&amp;quot;에도 해당된다. 이 Base image 위에, 추가 기능은 개별 보관 파일로 별도로 배포될 수 있지만 서로 빌드되어 완전한 Docker image를 형성하는 이른바 &amp;ldquo;레이어&amp;quot;로 추가될 수 있다.&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 778px">
&lt;img class="card-img-top" src="/blog/2021/20210504-dockerfiles/image-layer_hu9d57ff001bc659885ebe5d88704277f8_22464_768x768_fit_catmullrom_2.png" width="768" height="304">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;center>&lt;i>레이어 저장방식 : https://cultivo-hy.github.io/docker/image/usage/2019/03/14/Docker정리/&lt;/i>&lt;/center>
&lt;/p>
&lt;/div>
&lt;/div>
&lt;h3 id="dockerfile">Dockerfile&lt;/h3>
&lt;p>&amp;ldquo;Dockerfile&amp;quot;은 스크립트와 유사하게 Docker image를 만들기 위한 단계별 명령을 포함하는 텍스트 파일이다. Dockerfile은 일반적으로 Dockerfile 자체에만 적용되는 자체 라이선스를 가질 수 있으며, 이 라이선스는 Docker 컨테이너에 포함되는 프로그램에는 적용되지 않는다.&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 778px">
&lt;img class="card-img-top" src="/blog/2021/20210504-dockerfiles/featured-dockerfile-ex_hu144e77f3a0c06d5c2e11835ba0d8ec62_326508_768x768_fit_catmullrom_2.png" width="768" height="441">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;center>&lt;i>Dockerfile : https://www.slideshare.net/vincenzoferme/using-docker-containers-to-improve-reproducibility-in-software-and-web-engineering&lt;/i>&lt;/center>
&lt;/p>
&lt;/div>
&lt;/div>
&lt;h3 id="docker-엔진">Docker 엔진&lt;/h3>
&lt;p>Docker 컨테이너용 관리 소프트웨어인 &amp;ldquo;Docker 엔진&amp;quot;은 Dockerfile의 명령을 순차적으로 처리하여 Docker image를 생성한다. 일반적으로, Base image나 개별 레이어를 위한 각 컴포넌트는 내부 또는 외부 저장소에서 다운로드된다. 이는 제공자가 Dockerfile을 제공하더라도 물리적인 프로그램 코드를 전달하지 않는 것이 가능함을 의미하고, 이런 일은 실제로 관례적이다. 고객은 전달받은 Dockerfile을 가지고 자체적으로 공개 저장소로부터 전체 혹은 일부 프로그램 코드를 받아와서 Docker 컨테이너를 구축할 수 있다.&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 778px">
&lt;img class="card-img-top" src="/blog/2021/20210504-dockerfiles/docker_hufb296f6373118a7f15e41d8376f0e484_183225_768x768_fit_q75_catmullrom.jpg" width="768" height="576">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;center>&lt;i>https://cultivatehq.com/posts/docker/&lt;/i>&lt;/center>
&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>여기서 이러한 Dockerfile을 사용하여 빌드한 Docker image에 포함된 FOSS의 라이선스 의무를 Dockerfile 제공자가 준수해야 하는지 여부와 어떤 라이선스 의무를 준수해야 하는지에 대한 의문이 제기될 수 있다.&lt;/p>
&lt;h2 id="3-법적-배경---eu-법률에-따른-배포-권한">3. 법적 배경 - EU 법률에 따른 배포 권한&lt;/h2>
&lt;p>거의 모든 FOSS 라이선스는 저작권법에 따라 소프트웨어를 배포&lt;sub>distributing&lt;/sub> 또는 전달&lt;sub>conveying&lt;/sub> 행위를 위한 조건으로 라이선스 의무 준수를 요구한다. 즉, 프로그램의 사본을 제삼자에게 전달할 때 라이선스 의무를 준수해야 한다. 일부 라이선스는 &amp;ldquo;배포&lt;sub>distribution&lt;/sub>&amp;ldquo;에 대한 정의를 라이선스 내에 포함(예: GPL-3.0은 &amp;ldquo;전달&lt;sub>convey&lt;/sub>&amp;ldquo;이라는 용어 정의를 포함함)하지만, 대부분의 라이선스는 이에 대해 정의하지 않고 있다. 따라서, 해당하는 저작권법이 배포를 어떻게 해석하는가를 참조하는 것이 일반적이다. 독일에서는 독일 저작권법의 §69c no 3 UrhG에서 배포를 &amp;ldquo;&lt;code>Verbreitung&lt;/code>&amp;ldquo;라는 용어로 사용하여 &amp;ldquo;컴퓨터 프로그램의 원본 또는 사본을 배포하는 모든 형태(임대 포함)&amp;ldquo;라고 정의한다. 여기서 &amp;ldquo;&lt;code>Verbreitung&lt;/code>&amp;ldquo;은 §17 (1) UrhG에서와 같이 컴퓨터 프로그램 말고도 일반적인 저작물을 사용할 수 있는 권리를 제공하는 것으로 이해할 수 있다.&lt;/p>
&lt;div class="alert alert-success" role="alert">
&lt;p>&lt;i>&amp;ldquo;배포권&lt;sub>right of distribution&lt;/sub>은 저작물의 원본 또는 사본을 일반 대중에게 제안&lt;sub>offer&lt;/sub>하거나 유통할 수 있는 권리이다&amp;rdquo;&lt;/p>
&lt;p>“The right of distribution is the right to offer the original or copies of the work to the public or to put it into circulation.”&lt;/i>&lt;/p>
&lt;/div>
&lt;p>이는 컴퓨터 프로그램의 법적 보호에 관한 유럽 의회 및 이사회의 지침 &lt;a href="https://eur-lex.europa.eu/legal-content/EN/TXT/HTML/?uri=CELEX:32009L0024">2009/24/EG 4조&lt;/a>&lt;sub>Directive 2009/24/EG of the European Parliament and of the Council&lt;/sub>에 비추어 해석되었다&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>. 독일 및 유럽 최고 법원인 독일 연방 사법 재판소&lt;sub>German Federal Court of Justice, Bundesgerichtshof (BGH)&lt;/sub>와 유럽 연합 사법 재판소&lt;sub>Court of Justice of the European Union (CJEU)&lt;/sub>는 수많은 법원 판결에서 배포권을 해석하는 데 도움이 되는 기여를 했다. 이에 대해서는 아래에서 자세히 설명한다.&lt;/p>
&lt;h2 id="4-dockerfile의-배포---분석">4. Dockerfile의 배포 - 분석&lt;/h2>
&lt;p>이 섹션에서는 먼저 저작권법에 따른 배포가 프로그램 코드의 물리적인 전송을 반드시 요구하는지 여부에 대해 살펴본다. 이후에는 Docker image의 다양한 구성 요소, 즉, Base image, 프로그램 라이브러리, 패치 및 업데이트에 관해 설명한다.&lt;/p>
&lt;h3 id="41-프로그램-코드의-물리적인-배포가-있어야만-배포인가">4.1 프로그램 코드의 물리적인 배포가 있어야만 배포인가?&lt;/h3>
&lt;p>아래의 첫번째 경우뿐만 아니라 두번째 경우도 &amp;ldquo;배포&amp;quot;에 대한 책임은 Dockerfile 제공자에게 있다.&lt;/p>
&lt;ul>
&lt;li>저작권 법에서 정의된 배포의 개념인 프로그램 복사본의 &amp;ldquo;물리적&amp;rdquo; 배포&lt;/li>
&lt;li>제삼자로부터 프로그램 복사본을 취득하게 하는 기타 행위&lt;/li>
&lt;/ul>
&lt;p>독일과 EU의 최고 법원이 다음의 두가지를 모두 고려되어야 한다는 판결을 자주 했음을 주목하자.&lt;/p>
&lt;ul>
&lt;li>물리적 행위&lt;/li>
&lt;li>복제 또는 배포와 법적으로 관련된 행위를 물리적으로 수행하는 제삼자는 단순히 당사자의 &amp;ldquo;도구&amp;quot;로 간주됨&lt;/li>
&lt;/ul>
&lt;p>이러한 측면에는 특히 CJEU가 &amp;ldquo;필수적 역할&lt;sub>essential role&lt;/sub>&amp;ldquo;이라고 부르는 조직적 통제&lt;sub>organizational control&lt;/sub>를 포함한다&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>. 한가지 예는 독일 연방 사법 재판소&lt;sub>BGH&lt;/sub>의 &amp;ldquo;인터넷 라디오 음악 녹음 서비스&amp;rdquo; 판결이다. 이 판결은 인터넷 서비스에 의한 디지털 라디오 방송국의 완전 자동 녹음이 클라이언트의 개인 복사본인지 (허가) 혹은 서비스 제공자의 복사본인지에 (무허가) 대해 다룬다. 이에 대해 BGH는 다음과 같이 명시하였다&lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup>.&lt;/p>
&lt;div class="alert alert-success" role="alert">
&lt;h4 class="alert-heading">BGH, judgment of 2020-03-05&lt;/h4>
&lt;p>&lt;i>&amp;ldquo;이러한 맥락에서, 결정적인 요소는 제조사가 &amp;lsquo;복제 기기를 대신&lt;sub>taking the place of the reproduction device&lt;/sub>&amp;lsquo;하여 상대방의 &amp;lsquo;필요한 도구&lt;sub>necessary tool&lt;/sub>&amp;lsquo;로 행위하는 것에 국한되는지 (이 경우 복제는 구매자에게 귀속되어야 함) 또는 사적 이용으로 정당화될 수 없을 정도의 범위와 강도로 저작권 침해 사용을 요구하는지 (이 경우 복제는 제조사에 귀속되어야 함) 여부이다. 규범적 판단에 근거한 이번 조사에서는 녹음 과정에 대한 조직적 주도권&lt;sub>organizational sovereignty&lt;/sub>을 고객이 가졌는지 여부도 판단해야 한다.&lt;/p>
&lt;p>“In this context, the decisive factor is whether the manufacturer is limited to ’taking the place of the reproduction device’ and acting as a ‘necessary tool’ of the other party - in which case the reproduction is to be attributed to the purchaser - or whether he opens up a copyright-relevant use to an extent and intensity that cannot be reconciled with the considerations that justify the privileges of private use - then the reproduction is to be attributed to the manufacturer. Within the framework of this examination, which is based on normative standards, it must also be determined whether the client has organizational sovereignty over the recording process.”&lt;/i>&lt;/p>
&lt;/div>
&lt;blockquote>
&lt;p>인터넷 라디오 음악 녹음 서비스에 대한 세부 내용은 한국저작권위원회의 &lt;a href="http://www.copyright.or.kr/information-materials/trend/the-copyright/download.do?brdctsno=44381&amp;amp;brdctsfileno=15929">2019년 자료&lt;/a>&lt;sup id="fnref:7">&lt;a href="#fn:7" class="footnote-ref" role="doc-noteref">7&lt;/a>&lt;/sup>를 참고할 수 있습니다.&lt;/p>
&lt;p>이 판결의 원고는 음반 제작자인 독일 소니 뮤직(Sony Music)이며, 피고는 인터넷 라디오에서 방송되는 음악을 녹음하여 제공하는 서비스를 운영하는 MusicMonster.FM입니다.&lt;/p>
&lt;p>독일 법원은 피고의 서비스는 복제를 위한 기술적 수단을 단순히 제공하는 것을 넘어서고 사적 이용으로 정당화되는 범위를 초과하기 때문에 피고가 복제 및 공중접근의 행위자이고, 피고가 원고의 복제권과 전송권을 침해하였다고 판결하였습니다.&lt;/p>
&lt;/blockquote>
&lt;p>CJEU는 저작권 침해 행위와 관련하여 누가 &amp;ldquo;필수적 역할&lt;sub>essential role&lt;/sub>&amp;ldquo;을 하였는지에 대한 몇 가지 판단을 근거로 삼았다. 이는 특히 §17 UrhG(독일 저작권법)에서 명백하게 드러난다. UrhG는 단순한 &amp;ldquo;제안&lt;sub>offer&lt;/sub>&amp;rdquo; 행위, 즉 물리적 배포의 준비 행위&lt;sub>preparatory act of a physical distribution&lt;/sub>도 배포 행위&lt;sub>act of distribution&lt;/sub>라고 지정하였다&lt;sup id="fnref:8">&lt;a href="#fn:8" class="footnote-ref" role="doc-noteref">8&lt;/a>&lt;/sup>.&lt;/p>
&lt;div class="alert alert-success" role="alert">
&lt;h4 class="alert-heading">CJEU of 2015-05-13&lt;/h4>
&lt;p>&lt;i>&amp;ldquo;이러한 정황을 고려했을 때, 법원은 일반 대중에게 배포하는 것은 적어도 매매 계약 체결부터 공공의 구성원에게 전달하기까지의 일련의 행위들로 구성된다는 것을 구체적으로 발견하였다. 이러한 상황에서 판매자&lt;sub>trader&lt;/sub>는 배포 저작물을 (저작권으로 보호하는 회원국의) 일반 대중에게로 배포를 유발한 자신이 (또는 자신을 대신하여 누군가) 수행한 모든 행위에 대한 책임이 있다. …&lt;/p>
&lt;p>이러한 일련의 행위에는 제안&lt;sub>offer&lt;/sub>을 하기 위한 권유 또는 해당 물건의 판매를 목적으로 취해진 보호 대상에 대한 구속력이 없는 광고도 포함한다. …&lt;/p>
&lt;p>전술한 고려사항에 비추어볼 때, 언급된 질문에 대한 대답으로는 2001/29의 지침 제4조 제1항은 다음과 같은 의미로 해석해야 한다. 저작권 보유자에게 저작물 배포를 위한 독점적 권리를 허용하고, 이는 제삼자가 해당 저작물 원본 또는 사본의 판매 제안이나 광고하는 것을 방지할 수 있다. 이는 해당 저작물을 저작권으로 보호하는 회원국의 소비자를 대상으로 광고하는 한 해당 광고로 인해 EU 구매자가 보호 대상 저작물을 구매하게 되었다는 사실이 입증되지 않은 경우에도 마찬가지이다.&amp;rdquo;&lt;/p>
&lt;p>&amp;ldquo;Taking that context into account, the Court specifically found that distribution to the public is characterised by a series of acts going, at the very least, from the conclusion of a contract of sale to the performance thereof by delivery to a member of the public. A trader in such circumstances bears responsibility for any act carried out by him or on his behalf giving rise to a distribution to the public in a Member State where the goods distributed are protected by copyright. … As regards an invitation to submit an offer, or a non-binding advertisement for a protected object, those also fall under the series of acts taken with the objective of making a sale of that object. … In the light of the foregoing considerations, the answer to the questions referred is that Article 4(1) of Directive 2001/29 must be interpreted as meaning that it allows a holder of an exclusive right to distribute a protected work to prevent an offer for sale or a targeted advertisement of the original or a copy of that work, even if it is not established that that advertisement gave rise to the purchase of the protected work by an EU buyer, in so far as that that advertisement invites consumers of the Member State in which that work is protected by copyright to purchase it.&amp;quot;&lt;/i>&lt;/p>
&lt;/div>
&lt;p>CJEU의 이 판결과 다른 판결들은 기술적으로 배포하는 것뿐만 아니라, 배포를 위한 준비 행위도, 적어도 배포자가 배포 과정에서 &amp;ldquo;필수적 역할&amp;quot;을 하는 경우라면, 배포가 될 수 있다는 것을 보여준다. Dockerfile의 경우가 정확히 그렇다. Dockerfile은 (의도된 용도에 따라) Dockerfile의 수신자에게 완전한 기능의 시스템&lt;sub>complete functioning system&lt;/sub>을 전송하기 위해 조직된 명령을 제공하기 때문에 Dockerfile 제공자는 Docker image에 포함된 소프트웨어의 배포에 필수적인 역할을 하는 것이다. 이런 점에서, 조직적 통제권&lt;sub>organizational control&lt;/sub>을 가진 것은 Dockerfile 제공자이다. 따라서, Dockerfile 제공자는 이러한 형태로 배포되는 (Docker image에 포함될) FOSS의 라이선스 의무를 준수해야 한다.&lt;/p>
&lt;p>Dockerfile의 제공자가 Dockerfile이 참조하는 소프트웨어를 배포한다는 사실이, Base image나 레이어를 다운로드할 수 있는 저장소의 운영자도 각각 프로그램 코드의 배포 행위를 수행하거나 &amp;ldquo;공개적으로 이용할 수 있게 한다&amp;quot;는 사실과 충돌하는건 아니다&lt;sup id="fnref:9">&lt;a href="#fn:9" class="footnote-ref" role="doc-noteref">9&lt;/a>&lt;/sup>. 이는 대부분의 Base image나 레이어는 특정 컨테이너를 위해서만이 아니라 일반적인 다운로드도 제공하기 때문이다. 일반적인 다운로드의 경우, 저장소 운영자가 아닌 저장소를 통해 Base image나 레이어를 제공하는 개인 또는 단체가 배포(또는 대중과의 통신) 행위를 잠재적으로 수행하는 것으로 볼 수 있다.&lt;/p>
&lt;h3 id="42-패치">4.2 패치&lt;/h3>
&lt;p>추가 레이어를 사용하면 이미 설치된 프로그램도 수정할 수 있다. 이 경우, Docker 컨테이너는 수정되지 않은 프로그램을 한 레이어에 포함하고 수정한 프로그램을 다른 레이어에 포함하여 수정된 프로그램이 실행되도록 한다. 이러한 상황에서도 Dockerfile에는 적용될 수정사항이 정의되어 있기 때문에 Dockerfile 제공자는 &amp;ldquo;필수적 역할&amp;quot;의 책임을 맡아야 한다. 따라서, Dockerfile 제공자가 수정사항에 대한 라이선스 의무를 준수해야 한다.&lt;/p>
&lt;p>이는 두 버전이 모두 수신자에게 배포되기 때문에 (수정된 버전만 실제 사용되더라도) 수정된 버전 뿐만 아니라 원 버전에도 적용된다는 사실에 주의해야 한다&lt;sup id="fnref:10">&lt;a href="#fn:10" class="footnote-ref" role="doc-noteref">10&lt;/a>&lt;/sup>. 프로그램이 새 레이어에 의해 제거되더라도 Docker image에 물리적으로 여전히 포함된 경우에도 마찬가지이다.&lt;/p>
&lt;h3 id="43-시스템-요구-사항-및-base-image">4.3 시스템 요구 사항 및 Base image&lt;/h3>
&lt;h4 id="시스템-요구-사항">시스템 요구 사항&lt;/h4>
&lt;p>이 섹션은 오픈소스 라이선스는 오픈소스 소프트웨어를 사용하는 데 필요하지만 라이선스 범위에 포함되지 않는 독립 프로그램에 대한 사용 권한을 부여하는 데까지는 확장되지 않는다는 점에서 출발한다. 애플리케이션을 실행하는 데 필요한 운영 체제 또는 웹 서버가 대표적인 예입니다. 이와 같이 애플리케이션 실행에 필요한 독립 프로그램을 &amp;ldquo;시스템 요구 사항&amp;quot;이라고 하겠다. Dockerfile을 배포하는 제공자는 Docker 엔진 또는 Linux 커널과 같은 시스템 요구 사항에 대한 라이선스 의무는 준수할 책임이 없다. 이런 시스템 요구 사항은 Dockerfile에서 참조하지도 않는다.&lt;/p>
&lt;blockquote>
&lt;p>참고로, GPL-2.0 3조에서는 다음과 같이 컴파일러, 커널 등 운영 체제의 주요 컴포넌트는 소스 코드 공개 범위에 포함되지 않는다는 예외를 두고 있습니다.&lt;/p>
&lt;p>&lt;i>&amp;ldquo;3. However, as a special exception, the source code distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable.&amp;quot;&lt;/i>&lt;/p>
&lt;p>&lt;a href="https://www.gnu.org/licenses/old-licenses/gpl-2.0.html">https://www.gnu.org/licenses/old-licenses/gpl-2.0.html&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h4 id="base-image">Base image&lt;/h4>
&lt;p>Base image도 시스템 요구 사항으로 간주할 수 있을까? 일반적으로 Base image에 포함되는 프로그램은 Docker 컨테이너에서 실행되는 애플리케이션과 독립적이다. Base image에 포함된 프로그램이 수정되지 않은 형태로 사용되는 한, Dockerfile에 다운로드 명령이 포함되어 있다고 해도 Dockerfile 제공자가 Base image의 제공자는 아니기 때문에 Base image는 시스템 요구 사항으로 간주할 수 있다. 또한, Repository 운영자가 액세스를 거부한다면 더 이상 다운로드가 불가능하다. 이런 사실에 비추어볼때 Base image는 Dockerfile 제공자의 통제를 벗어난다. 패치의 경우에도 비슷하지만 패치와 시스템 요구 사항은 다르게 처리해야 한다.&lt;/p>
&lt;p>컴퓨터 프로그램은 일반적으로 다른 독립 프로그램과 작동한다. 이는 다른 형태의 저작물과 구별되는 특징이다. 예를 들어 대부분의 애플리케이션은 운영 체제 없이 실행되지 않는다. 하지만 이러한 애플리케이션 실행을 위해 시스템 요구 사항을 설치해야 한다고 해서 애플리케이션 제공자가 시스템 요구 사항 배포의 필수적 역할&lt;sub>essential role&lt;/sub>을 한다는 것을 의미하지는 않는다.&lt;/p>
&lt;p>이런 상황은 다운로드 링크와 다소 비슷하다. 저작권이 있는 저작물을 다운로드하는 링크가 저작권법이 적용되는 관련 행위를 구성하는지, 즉 대중에게 전달하는 행위(따라서 저작권 침해를 초래할 가능성이 있음)에 해당하는지 여부에 대한 문제가 EU에서 치열하게 논의되고 있다. CJEU는 이에 대하여 일련의 복합적인 기준을 설정하였다&lt;sup id="fnref:11">&lt;a href="#fn:11" class="footnote-ref" role="doc-noteref">11&lt;/a>&lt;/sup>. 이 기준은 특히 다음과 같은 사례별 질문을 제시한다. : 새로운 구매자 그룹에 공개되어 있는지 여부, 의도된 용도가 상업적 목적인지 여부, 해당 행위가 제안에 중요한 역할을 하는지 여부, 제안이 불법인지 여부. 이렇게 사례별로 다뤄야하며 포괄적인 판단은 거의 불가능하다. 사실 회원국에서는 이러한 기준을 고려하는 경우가 흔하지 않았다. 그럼에도 이런 기준을 만든건 아마도 인터넷 저작권의 법적 상황을 더 잘 조화시키려는 CJEU의 바람 때문일 것이다.&lt;/p>
&lt;p>지금까지 제시된 견해에 따르면, Base image의 Repository 운영자와 제공자는 Base image의 배포에 필수적인 역할을 하는 반면, Dockerfile이 단지 참조하는 Base image는 시스템 요구 사항을 쉽게 취득하게 하기 위한 것이다. 그러므로, Repository의 운영자가 일반 대중에게 전달하는 행위를 수행하는 것이고, Repository 운영자는, 최소한 이러한 제공이 합법적이라면, 포함된 FOSS의 라이선스 의무를 단독으로 준수해야 한다.&lt;/p>
&lt;p>위에서 언급한 해석은 본 연구 저자의 법적 의견이다. 일반적으로 컴퓨터 프로그램 및 특히 Dockerfile에 대한 이러한 특정 상황에 관한 판례는 없다. 다른 해석들도 분명 논쟁의 여지가 있다(특히 Base image를 포함하는 모든 참조 레이어가 Dockerfile의 제공자에 의해 배포되는 경우).&lt;/p>
&lt;p>한가지 언급해야 할 사항은 현재 수많은 Repository 운영자들이 FOSS의 라이선스 의무를 올바르게 준수하지 않고 있으며 (예: GPL 및 LGPL 구성 요소의 소스 코드를 적절하게 제공하지 않음), 이는 저작권 침해의 책임이 있다는 점이다. 이 경우, 만약 Dockerfile의 제공자가 라이선스 위반을 알고 있다면 혹은 알고 있어야 한다면, 라이선스를 위반하는 참조를 포함하는 Dockerfile을 제공하는 것은 독립적인 배포 행위로 간주되거나 최소한 기여 저작권 침해(즉, 라이선스 위반에 대한 선동 또는 방조)로 간주될 수 있다. 따라서 Dockerfile 제공자는 지정된 Repository에서 제공하는 Base image가 라이선스를 준수하는지 여부를 검토해야 한다&lt;sup id="fnref:12">&lt;a href="#fn:12" class="footnote-ref" role="doc-noteref">12&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>Docker image를 단순히 조직 내부에만 사용하려는 수신자라면, FOSS 프로그램의 단순한 실행은 제한되지 않기 때문에, 문제없이 사용할 수 있다. 예를 들어, GPL-2.0 4조에서는 이를 명확히 말하고 있다&lt;sup id="fnref:13">&lt;a href="#fn:13" class="footnote-ref" role="doc-noteref">13&lt;/a>&lt;/sup>. 그러나, 수신자가 Docker image를 재배포하려고 한다면, Dockerfile의 배포가 저작권을 침해하는 경우라면 배포권이 소진되는 것이 아니기 때문에, 재배포하려는 수신자는 라이선스 조건의 컴플라이언스를 보장해야 한다(아래의 4.6절 참조).&lt;/p>
&lt;h3 id="44-프로그램-라이브러리">4.4 프로그램 라이브러리&lt;/h3>
&lt;p>프로그램과 연결된 라이브러리의 경우, 이러한 라이브러리가 독립적인 프로그램으로 간주되는지 또는 링크된 프로그램의 일부가 되는건지에 대해서는 약간의 의견 차이가 있다&lt;sup id="fnref:14">&lt;a href="#fn:14" class="footnote-ref" role="doc-noteref">14&lt;/a>&lt;/sup>. 이러한 맥락에서 다음과 같이 구분할 수 있다.&lt;/p>
&lt;ul>
&lt;li>시스템 라이브러리&lt;/li>
&lt;li>GPL 및 AGPL 애플리케이션과 연결되는 비시스템 라이브러리&lt;sub>non-system library&lt;/sub>&lt;/li>
&lt;li>GPL 및 AGPL 이외의 다른 라이선스의 애플리케이션과 연결되는 비시스템 라이브러리&lt;/li>
&lt;/ul>
&lt;p>GPL-2.0 섹션 3 및 GPL-3.0 섹션 1 (3)에는 라이선스 의무 중 소스 코드를 제공해야 하는 범위 내에 &amp;ldquo;시스템 라이브러리&amp;quot;는 면제하는 조항이 포함되어 있다&lt;sup id="fnref:15">&lt;a href="#fn:15" class="footnote-ref" role="doc-noteref">15&lt;/a>&lt;/sup>. 따라서 Dockerfile이 Docker 컨테이너에서 수정되지 않은 이러한 시스템 라이브러리를 사용하라는 명령을 포함하는 경우, 이러한 시스템 라이브러리에 대한 라이선스 의무는 준수할 필요가 없다. 그러므로 이러한 시스템 라이브러리의 법적인 상황은 Base image에 적용되는 상황(위 4.3 참조)과 동일하며, 이때는 배포를 위한 필수적인 역할이 Dockerfile 제공자에게 있는 것은 아니다.&lt;/p>
&lt;p>그러나 Dockerfile이 제삼자 Repository에서 (시스템 라이브러리 이외의) 라이브러리를 다운로드하고 이 라이브러리가 Docker 컨테이너 내에서 GPL-3.0 또는 AGPL-3.0 애플리케이션과 링크하는 레이어를 지정하는 경우라면, 이러한 라이브러리에 대해서는 각각 링크하는 애플리케이션의 라이선스(GPL-3.0 또는 AGPL-3.0) 의무를 준수해야 한다. 예를 들어 라이브러리의 소스 코드를 반드시 제공해야 한다 (cf. section 1 GPL-3.0: “Corresponding Source includes &amp;hellip;, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, &amp;hellip;”). 이는 GPL-2.0에도 동일하게 적용된다. 라이브러리의 물리적 배포의 경우와 마찬가지로 (라이선스 충돌 문제가 없다면) 해당 라이선스 조건을 준수해야 한다. 즉, 분산형 배포 프로세스&lt;sub>decentralized distribution process&lt;/sub>로 카피레프트 요구 사항을 회피할 수 없다.&lt;/p>
&lt;p>Dockerfile 제공자는 프로그램 라이브러리를 Dependency로 선택하는 조직적 제어권&lt;sub>organizational control&lt;/sub>을 가졌기 때문에 Dockerfile 제공자가 프로그램 라이브러리를 배포한다고 판단할 수 있다. 따라서, 프로그램 라이브러리의 배포 프로세스에서 Dockerfile 제공자가 필수적인 역할&lt;sub>essential role&lt;/sub>을 한다.&lt;/p>
&lt;h3 id="45-업데이트">4.5 업데이트&lt;/h3>
&lt;p>업데이트 처리는 Dockerfile 제공자가 업데이트를 제어하는지 여부에 따라 달라진다. Dockerfile 제공자(또는 대리인)가 직접 Repository에 업데이트를 업로드하여 Dockerfile의 수신자가 이를 받아올 수 있게 하였다면 Dockerfile 제공자가 업데이트를 배포한다고 볼 수 있다. 반면, Repository 운영자의 통제하에 업데이트가 제공된다면 (예 : Dockerfile이 &amp;ldquo;최신 버전&amp;quot;을 참조하는 경우) 이는 Dockerfile 제공자가 배포하는 것이 아니다. 이 경우, Dockerfile 제공자가 프로그램 버전을 선택하고 Dockerfile 내에 명명하는 것과는 대조적으로, Dockerfile 제공자는 업데이트의 내용에 관련해서 영향을 미치지 않는다.&lt;/p>
&lt;h3 id="46-라이선스-조건-준수-시점">4.6 라이선스 조건 준수 시점&lt;/h3>
&lt;p>라이선스 의무는 배포 (또는 대중에게 전달) 시점에 준수해야 한다. 같은 일련의 배포 단계에서 Dockerfile의 전달과 같은 준비 행위는 이미 배포로 간주 될 수 있으므로, 엄격히 말해서, Dockerfile 전달 시 라이선스 의무를 이행해야 한다. 그러나 Repository에서 다운로드 하는 시점에 라이선스 의무를 준수하는 것도 충분하다는 방식으로 오픈소스 라이선스를 해석할 수 있다. 특히 Dockerfile 배포 시, 다운로드되는 레이어에 어떤 프로그램 코드가 포함되는지 명확하지 않다는 점도 이러한 해석을 뒷받침한다. 예를 들어 프로그램 버전을 &amp;ldquo;latest&amp;quot;로 지정한 경우가 그렇다.&lt;/p>
&lt;p>하지만, 만약 관련 Repository에서 라이선스 의무를 완전히 충족하지 않는다면, Dockerfile 제공자는 독립적으로 라이선스 의무를 준수하고 필요한 필수 정보(예 : 라이선스 텍스트, 저작권 고지, 소스 코드 제공)가 포함된 파일을 함께 제공하는 것이 좋다.&lt;/p>
&lt;h2 id="5-결론">5. 결론&lt;/h2>
&lt;ul>
&lt;li>Dockerfile 제공자는 Dockerfile을 build/run 하는 과정에서 Docker 컨테이너에 포함되는 FOSS의 라이선스 조건에 대한 컴플라이언스 책임이 있다. Dockerfile 수신자가 외부 공개 Repository로부터 소프트웨어를 다운로드 받는 방식이라고 해도 Dockerfile 제공자의 책임을 회피할 수는 없다.&lt;/li>
&lt;li>Dockerfile을 제공하는 건 준비 행위&lt;sub>preparatory acts&lt;/sub>에 해당하고, 이는 &amp;ldquo;배포&amp;quot;에 포함된다는 사실이 유럽 연합 사법 재판소&lt;sub>Court of Justice of the European Union&lt;/sub>의 판례에서 드러났다.&lt;/li>
&lt;li>하지만, 컴퓨터 프로그램 상호 작용의 특수성을 고려하여 운영 체제, 웹서버 등 &amp;ldquo;시스템 요구 사항&amp;quot;에 대한 라이선스 컴플라이언스는 Dockerfile 제공자가 책임지지 않는다.&lt;/li>
&lt;li>단, Docker 레이어가 FOSS 라이선스를 준수하지 않는 상태로 Repository에서 제공된다면. 이를 참조하는 Dockerfile 제공자에게도 위험을 초래한다.&lt;/li>
&lt;li>따라서, FOSS 라이선스 컴플라이언스는 Dockerfile 제공자와 Docker 레이어를 공개 Repository에 공개한 배포자가 공동으로 책임져야할 사항이다.&lt;/li>
&lt;/ul>
&lt;div class="alert alert-success" role="alert">
&lt;h4 class="alert-heading">About the author&lt;/h4>
&lt;p>&lt;i>&lt;b>Till Jaeger&lt;/b> has been a partner at JBB Rechtsanwälte since 2001 (&lt;a href="http://www.jbb.de">www.jbb.de&lt;/a>). He is a Certified Copyright and Media Law Attorney and advises large and medium-sized IT businesses as well as government authorities and software developers on matters involving contracts, licensing and IP rights.&lt;/p>
&lt;p>One particular focus of Till Jaeger&amp;rsquo;s work is on the legal issues created by free and open source software (FOSS). He is co-founder of the Institute for Legal Aspects of Free &amp;amp; Open Source Software, ifrOSS (&lt;a href="http://www.ifross.org">www.ifross.org&lt;/a>), contributing to its work with academic publications, lectures and seminars in the fields of software law and copyright law.&lt;/p>
&lt;p>Till Jaeger is a lecturer at the Humboldt University Berlin in the subjects of IT law and IP law and general counsel of Open Source Automation Development Lab (OSADL) eG.&lt;/p>
&lt;p>He represented the gpl-violations.org project in several lawsuits to enforce the GPL and has published articles and books related to legal questions of Free and Open Source Software (among them Jaeger/Metzger, Open Source Software - Rechtliche Rahmenbedingungen der Freien Software, 5th ed. Munich 2020, and Van den Brande/Coughlan/Jaeger - The International FOSS Law Book, 2nd ed. Munich 2014). He was member of the Committee C in the GPLv3 drafting process.&lt;/i>&lt;/p>
&lt;/div>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>&lt;b>Licence and Attribution&lt;/b>&lt;/p>
&lt;p>This paper was published in the Journal of Open Law, Technology, &amp;amp; Society, Volume 12, Issue 1 (April 2021). It originally appeared online at &lt;a href="http://www.jolts.world">http://www.jolts.world&lt;/a>&lt;/p>
&lt;p>This article should be cited as follows:&lt;/p>
&lt;p>Jaeger, Till (2021) &amp;lsquo;Distribution of Dockerfiles: Who is responsible for FOSS License Compliance?&amp;rsquo;, Journal of Open Law, Technology, &amp;amp; Society, 12(1), pp 13 – 20
DOI: 10.5033/jolts.v12i1.147&lt;/p>
&lt;p>Copyright © 2021 Till Jaeger&lt;/p>
&lt;p>This article is licensed under a Creative Commons Attribution 4.0 CC-BY available at&lt;/p>
&lt;p>&lt;a href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/&lt;/a>&lt;/p>
&lt;p>&lt;img src="./cc.png" alt="cc">&lt;/p>
&lt;/div>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>Hemel, Armijn, (2020), ‘Docker Containers for Legal Professionals,’ [pdf] Available at: &lt;a href="https://www.linuxfoundation.org/wp-content/uploads/Docker-Containers-for-Legal-Professionals-Whitepaper_042420.pdf">https://www.linuxfoundation.org/wp-content/uploads/Docker-Containers-for-Legal-Professionals-Whitepaper_042420.pdf&lt;/a> [Accessed 16 February 2021]. See also Peterson, Scott, (2020), ‘Making compliance scalable in a container world.’ Available at: &lt;a href="https://opensource.com/article/20/7/compliance-containers">https://opensource.com/article/20/7/compliance-containers&lt;/a> [Accessed 16 February 2021]. &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>Sec. 0 GPL-3.0 provides as follows: “To ‘convey'‘ a work means any kind of propagation that enables other parties to make or receive copies.” and “To ’propagate’ a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy.” &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>Meeker, Heather (2012), ‘The Gift that Keeps on Giving – Distribution and Copyleft in Open Source Software Licenses’, JOLTS, 4(1), pp 29 – 40, [DOI: 10.5033/ifosslr.v4i1.66]. &lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>Directive 2009/24/EC on the legal protection of computer programs (codified version). Available at: &lt;a href="https://eur-lex.europa.eu/legal-content/EN/TXT/HTML/?uri=CELEX:32009L0024">https://eur-lex.europa.eu/legal-content/EN/TXT/HTML/?uri=CELEX:32009L0024&lt;/a> [Accessed 16 February 2021]. &lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5" role="doc-endnote">
&lt;p>See the ‘Opinion of Advocate General Saugmandsgaard Øe in the joined Cases C‑682/18 and C‑683/18 (Frank Peterson v Google LLC et al), ECLI:EU:C:2020:586. Available at: &lt;a href="https://eur-lex.europa.eu/legal-content/EN/TXT/HTML/?uri=CELEX:62018CC0682">https://eur-lex.europa.eu/legal-content/EN/TXT/HTML/?uri=CELEX:62018CC0682&lt;/a> [Accessed 16 February 2021]. &lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:6" role="doc-endnote">
&lt;p>BGH (German Federal Court of Justice), judgment of 2020-03-05 - I ZR 32/19 – Internet radio recorder. Available at: &lt;a href="https://openjur.de/u/2202077.html">https://openjur.de/u/2202077.html&lt;/a> [Accessed 16 February 2021]. &lt;a href="#fnref:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:7" role="doc-endnote">
&lt;p>독일 지방법원, 인터넷 라디오 음악 녹음 서비스(stream ripping) 제공자는 복제권과 전송권을 침해한다 : &lt;a href="http://www.copyright.or.kr/information-materials/trend/the-copyright/download.do?brdctsno=44381&amp;amp;brdctsfileno=15929">http://www.copyright.or.kr/information-materials/trend/the-copyright/download.do?brdctsno=44381&amp;amp;brdctsfileno=15929&lt;/a> &lt;a href="#fnref:7" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:8" role="doc-endnote">
&lt;p>CJEU of 2015-05-13, C-516/13 – Dimensione Direct Sales and Labianca. Available at:
&lt;a href="https://eur-lex.europa.eu/legal-content/EN/TXT/PDF/?uri=CELEX:62013CJ0516&amp;amp;qid=1607613372933&amp;amp;from=EN">https://eur-lex.europa.eu/legal-content/EN/TXT/PDF/?uri=CELEX:62013CJ0516&amp;amp;qid=1607613372933&amp;amp;from=EN&lt;/a> [Accessed 16 February 2021]. &lt;a href="#fnref:8" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:9" role="doc-endnote">
&lt;p>Please not that the “Right of communication to the public of works and right of making available to the public” in Art. 3 are independent rights from the “distribution right” in Art. 4 Directive 2001/29/EC. Available at: &lt;a href="https://eur-lex.europa.eu/legal-content/EN/TXT/HTML/?uri=CELEX:32001L0029">https://eur-lex.europa.eu/legal-content/EN/TXT/HTML/?uri=CELEX:32001L0029&lt;/a> [Accessed 16 February 2021]. &lt;a href="#fnref:9" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:10" role="doc-endnote">
&lt;p>See Hemel Armijn, ibid n. 1, p. 19. &lt;a href="#fnref:10" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:11" role="doc-endnote">
&lt;p>As the CJEU, judgment of 14 June 2017 in case C-610/15 – Stichting Brein (The Pirate Bay) itself declares: “In order to determine whether a user is making a ‘communication to the public’ within the meaning of Article 3(1) of Directive 2001/29, it is necessary to take into account several complementary criteria, which are not autonomous and are interdependent. Consequently, those criteria must be applied both individually and in their interaction with one another, since they may, in different situations, be present to widely varying degrees.” Available at: &lt;a href="http://curia.europa.eu/juris/liste.jsf?language=en&amp;amp;T,F&amp;amp;num=c-610-15">http://curia.europa.eu/juris/liste.jsf?language=en&amp;amp;T,F&amp;amp;num=c-610-15&lt;/a> [Accessed 16 February 2021]. &lt;a href="#fnref:11" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:12" role="doc-endnote">
&lt;p>For efforts of Red Hat to improve the situation see Peterson, S., ibid. &lt;a href="#fnref:12" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:13" role="doc-endnote">
&lt;p>&amp;ldquo;However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance.&amp;rdquo; &lt;a href="#fnref:13" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:14" role="doc-endnote">
&lt;p>See for more details Jaeger, Till and Metzger, Aaxel, Open Source Software, 5th edition, 2020, 64 et seq; Meeker, Heather, Open Source for Business, A practical Guide to Open Source Software Licensing, 3rd edition 2020, 119 et seq; Working Paper on the legal implication of certain forms of
Software Interactions (a.k.a linking), Available at: &lt;a href="https://www.ifosslr.org/public/LinkingDocument.odt">https://www.ifosslr.org/public/LinkingDocument.odt&lt;/a> [Accessed 16 February 2021]. &lt;a href="#fnref:14" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:15" role="doc-endnote">
&lt;p>The definition in section 1 GPL-3.0 reads as follows: ’The “System Libraries’ of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A ‘Major Component’, in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it.” &lt;a href="#fnref:15" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>Blog: OSPO란?</title><link>/blog/2021/20210418-ospo-definition/</link><pubDate>Sun, 18 Apr 2021 00:00:00 +0000</pubDate><guid>/blog/2021/20210418-ospo-definition/</guid><description>
&lt;img src="/blog/2021/20210418-ospo-definition/featured-todogroup_hue4eb93ef039f28113d98d652a131b29e_3378_640x0_resize_catmullrom_2.png" width="640" height="320"/>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>This paper was translated by Haksung Jang from the English version available at the &lt;a href="https://github.com/todogroup/ospodefinition.org">OSPO Definition&lt;/a>. The original document is licensed under &lt;a href="https://github.com/todogroup/ospodefinition.org/blob/master/LICENSE">CC-BY-SA-4.0&lt;/a>.&lt;/p>
&lt;/div>
&lt;hr>
&lt;blockquote>
&lt;p>안녕하세요!&lt;/p>
&lt;p>&lt;a href="https://todogroup.org/">TODO Group&lt;/a>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>은 Talk Openly, Develop Openly를 표방하며 협업을 통해 성공적인 오픈소스 프로젝트와 프로그램을 만들어가고자 하는 Linux Foundation 산하의 &lt;a href="https://todogroup.org/members/">그룹&lt;/a>&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>입니다. TODO 그룹에서는 오픈소스 &lt;a href="https://todogroup.org/guides/">가이드&lt;/a>&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>, &lt;a href="https://github.com/todogroup/repolinter">도구&lt;/a>&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup> 등을 함께 만들어서 공개하며 오픈소스에 관심 있는 누구나 활용할 수 있게 하고 있습니다.&lt;/p>
&lt;p>기업 등의 조직이 오픈소스를 효과적으로 관리하고 사용하기 위해서는 OSPO&lt;sub>Open Source Program Office&lt;/sub>를 설립하여 개발자 교육, 컴플라이언스 보장, 커뮤니티 참여 및 구축, 오픈소스 공개, 코드 점검 등의 활동이 필요하다고 합니다. 이 글에서는 OSPO가 무엇이고, 어떤 역할을 하는지에 대해 TODO Group에서 &lt;a href="https://todogroup.org/blog/ospo-definition/">정의한 글&lt;/a>&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>을 옮겼습니다.&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 328px">
&lt;img class="card-img-top" src="/blog/2021/20210418-ospo-definition/featured-todogroup_hue4eb93ef039f28113d98d652a131b29e_3378_768x768_fit_catmullrom_2.png" width="318" height="159">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;small class="text-muted">&lt;br/>Photo: TODO Group&lt;/small>&lt;/p>
&lt;/div>
&lt;/div>
&lt;h2 id="ospo의-정의">OSPO의 정의&lt;/h2>
&lt;p>OSPO&lt;sub>Open Source Program Office&lt;/sub>는 조직의 오픈소스 운영을 위해 조직의 중앙에 역량을 집중하도록 설계되었다. 여기에는 오픈소스의 사용, 배포, 선택, 검사 및 관련 정책 수립뿐만 아니라 개발자 교육, 컴플라이언스 보장과 조직에 이익이 되는 커뮤니티 참여와 구축을 촉진하는 활동이 포함될 수 있다.&lt;/p>
&lt;p>모든 산업에 걸쳐 적용할 수 있는 오픈소스 프로그램을 구축하기 위한 광범위한 템플릿은 없지만, 여기에서는 일반적인 OSPO의 기능을 세 가지로 분류해보았다.&lt;/p>
&lt;ol>
&lt;li>법적 위험 완화&lt;sub>Legal Risk Mitigation&lt;/sub>&lt;/li>
&lt;li>엔지니어 작업 방식 개선&lt;sub>Improving Engineers’ Practices&lt;/sub>&lt;/li>
&lt;li>재정적 이익 실현&lt;sub>Enabling Financial Benefits&lt;/sub>&lt;/li>
&lt;/ol>
&lt;p>이렇게 세 가지로 분류해보니 각각 두려움&lt;sub>Fear&lt;/sub>, 사랑&lt;suv>Love&lt;/sub>, 돈&lt;sub>Money&lt;/sub>이 연상된다.&lt;/p>
&lt;h3 id="법적-위험-완화">법적 위험 완화&lt;/h3>
&lt;p>기업의 주된 관심사는 법적인 컴플라이언스이다. 따라서, OSPO는 기업의 오픈소스 라이선스 컴플라이언스 프로세스를 구축하고 관리한다. 일반적으로 소프트웨어를 배포하는 기업은 이 문제에 가장 관심이 많으며, 이러한 법적 위험을 완화하기 위해 OSPO의 설립을 시작한다.&lt;/p>
&lt;p>OSPO는 법적 위험 관리를 위해 다음과 같은 책임을 가진다.&lt;/p>
&lt;ul>
&lt;li>오픈소스 라이선스 컴플라이언스 관리 감독&lt;/li>
&lt;li>인바운드 코드&lt;sub>주: 오픈소스 등 외부로부터 입수한 코드&lt;/sub> 사용을 위한 검토 프로세스 실행&lt;/li>
&lt;li>오픈소스 프로젝트에 효과적으로 기여하도록 보장&lt;/li>
&lt;/ul>
&lt;h3 id="엔지니어-작업-방식-개선">엔지니어 작업 방식 개선&lt;/h3>
&lt;p>OSPO는 오픈소스 환경에서 코드 관리에 대한 가이드와 정책을 제공함으로써 엔지니어링 기능을 개선한다. 소프트웨어 엔지니어가 많은 기업은 OSPO를 엔지니어링 정책과 작업 방식에 집중한다.&lt;/p>
&lt;p>이와 관련한 OSPO의 책임은 다음과 같다.&lt;/p>
&lt;ul>
&lt;li>기업의 오픈소스 전략을 기업 내부 및 외부에 명확히 전달&lt;/li>
&lt;li>조직 내 오픈소스 문화 육성&lt;/li>
&lt;li>오픈소스 커뮤니티에 고품질의 코드를 자주 공개하도록 보장&lt;/li>
&lt;/ul>
&lt;h3 id="재정적-이익-실현">재정적 이익 실현&lt;/h3>
&lt;p>일부 기업은 오픈소스에 관한 재정적 이익에 초점을 맞춘다. OSPO를 활용하여 상용 벤더를 사용할지 아니면 오픈소스 벤더를 사용할지에 대한 전략을 수립한다. 반면 일부 기술 기업은 자신의 OSPO (및 오픈소스 프로젝트)를 활용하여 고객이 자신의 상용 제품을 구매하도록 유도한다.&lt;/p>
&lt;p>이와 관련한 OSPO의 책임은 다음과 같다.&lt;/p>
&lt;ul>
&lt;li>전략 실행에 대한 오너쉽과 감독&lt;/li>
&lt;li>상용 제품 및 서비스에서 오픈소스를 효과적으로 사용하도록 촉진&lt;/li>
&lt;li>전략적 오픈소스 프로젝트이의 채택을 장려하기 위하여 개발자 커뮤니티와 협력&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;i>이처럼 각 OSPO는 기업 비즈니스, 제품 및 목표에 맞게 구성된다. &lt;/i>&lt;/p>
&lt;h2 id="ospo-가이드">OSPO 가이드&lt;/h2>
&lt;blockquote>
&lt;p>TODO Group은 기업이 OSPO를 설립하고 운영하기 위한 가이드를 제공합니다.&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;a href="https://todogroup.org/guides/create-program">How to Create an Open Source Program&lt;/a>&lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup>&lt;/li>
&lt;li>&lt;a href="https://todogroup.org/guides/measuring">Measuring Your Open Source Program&lt;/a>&lt;sup id="fnref:7">&lt;a href="#fn:7" class="footnote-ref" role="doc-noteref">7&lt;/a>&lt;/sup>&lt;/li>
&lt;li>&lt;a href="https://todogroup.org/guides/management-tools">Tools for Managing Your Open Source Program&lt;/a>&lt;sup id="fnref:8">&lt;a href="#fn:8" class="footnote-ref" role="doc-noteref">8&lt;/a>&lt;/sup>&lt;/li>
&lt;/ul>
&lt;h2 id="ospo-examples">OSPO Examples&lt;/h2>
&lt;blockquote>
&lt;p>TODO Group은 Microsoft, Faceboo, Uber 등 오픈소스를 효과적으로 활용하는 기업들이 어떻게 OSPO를 운영하고 있는지, 각 기업의 사례를 취합하여 공개하였습니다.&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;a href="https://github.com/todogroup/todogroup.github.io/blob/master/content/en/guides/casestudies/autodesk.md">Autodesk&lt;/a>&lt;sup id="fnref:9">&lt;a href="#fn:9" class="footnote-ref" role="doc-noteref">9&lt;/a>&lt;/sup>&lt;/li>
&lt;li>&lt;a href="https://github.com/todogroup/todogroup.github.io/blob/master/content/en/guides/casestudies/capitalone.md">Capital One&lt;/a>&lt;sup id="fnref:10">&lt;a href="#fn:10" class="footnote-ref" role="doc-noteref">10&lt;/a>&lt;/sup>&lt;/li>
&lt;li>&lt;a href="https://github.com/todogroup/todogroup.github.io/blob/master/content/en/guides/casestudies/comcast.md">Comcast&lt;/a>&lt;sup id="fnref:11">&lt;a href="#fn:11" class="footnote-ref" role="doc-noteref">11&lt;/a>&lt;/sup>&lt;/li>
&lt;li>&lt;a href="https://github.com/todogroup/todogroup.github.io/blob/master/content/en/guides/casestudies/facebook.md">Facebook&lt;/a>&lt;sup id="fnref:12">&lt;a href="#fn:12" class="footnote-ref" role="doc-noteref">12&lt;/a>&lt;/sup>&lt;/li>
&lt;li>&lt;a href="https://github.com/todogroup/todogroup.github.io/blob/master/content/en/guides/casestudies/microsoft.md">Microsoft&lt;/a>&lt;sup id="fnref:13">&lt;a href="#fn:13" class="footnote-ref" role="doc-noteref">13&lt;/a>&lt;/sup>&lt;/li>
&lt;li>&lt;a href="https://github.com/todogroup/todogroup.github.io/blob/master/content/en/guides/casestudies/redhat.md">Red Hat&lt;/a>&lt;sup id="fnref:14">&lt;a href="#fn:14" class="footnote-ref" role="doc-noteref">14&lt;/a>&lt;/sup>&lt;/li>
&lt;li>&lt;a href="https://github.com/todogroup/todogroup.github.io/blob/master/content/en/guides/casestudies/salesforce.md">Salesforce&lt;/a>&lt;sup id="fnref:15">&lt;a href="#fn:15" class="footnote-ref" role="doc-noteref">15&lt;/a>&lt;/sup>&lt;/li>
&lt;li>&lt;a href="https://github.com/todogroup/todogroup.github.io/blob/master/content/en/guides/casestudies/sap.md">SAP&lt;/a>&lt;sup id="fnref:16">&lt;a href="#fn:16" class="footnote-ref" role="doc-noteref">16&lt;/a>&lt;/sup>&lt;/li>
&lt;li>&lt;a href="https://github.com/todogroup/todogroup.github.io/blob/master/content/en/guides/casestudies/uber.md">Uber&lt;/a>&lt;sup id="fnref:17">&lt;a href="#fn:17" class="footnote-ref" role="doc-noteref">17&lt;/a>&lt;/sup>&lt;/li>
&lt;li>&lt;a href="https://github.com/todogroup/todogroup.github.io/blob/master/content/en/guides/casestudies/oath.md">Yahoo/Verizon Media&lt;/a>&lt;sup id="fnref:18">&lt;a href="#fn:18" class="footnote-ref" role="doc-noteref">18&lt;/a>&lt;/sup>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>SK텔레콤의 OSPO에 대한 글을 소개 하며 글을 마칩니다. : &lt;a href="https://sktelecom.github.io/about/ospo/">SK텔레콤 OSPO&lt;/a>&lt;sup id="fnref:19">&lt;a href="#fn:19" class="footnote-ref" role="doc-noteref">19&lt;/a>&lt;/sup>&lt;/p>
&lt;p>감사합니다.&lt;/p>
&lt;/blockquote>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>TODO Group : &lt;a href="https://todogroup.org/">https://todogroup.org/&lt;/a> &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>TODO Group Member : &lt;a href="https://todogroup.org/members/">https://todogroup.org/members/&lt;/a> &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>TODO guides : &lt;a href="https://todogroup.org/guides/">https://todogroup.org/guides/&lt;/a> &lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>Repolinter : &lt;a href="https://github.com/todogroup/repolinter">https://github.com/todogroup/repolinter&lt;/a> &lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5" role="doc-endnote">
&lt;p>Open Source Program Office (OSPO) Definition and Guide : &lt;a href="https://github.com/todogroup/ospodefinition.org">https://github.com/todogroup/ospodefinition.org&lt;/a> &lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:6" role="doc-endnote">
&lt;p>How to Create an Open Source Program : &lt;a href="https://todogroup.org/guides/create-program">https://todogroup.org/guides/create-program&lt;/a>) &lt;a href="#fnref:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:7" role="doc-endnote">
&lt;p>Measuring Your Open Source Program : &lt;a href="https://todogroup.org/guides/measuring">https://todogroup.org/guides/measuring&lt;/a>) &lt;a href="#fnref:7" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:8" role="doc-endnote">
&lt;p>Tools for Managing Your Open Source Program : &lt;a href="https://todogroup.org/guides/management-tools)%5B">https://todogroup.org/guides/management-tools)[&lt;/a> &lt;a href="#fnref:8" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:9" role="doc-endnote">
&lt;p>Autodesk&amp;rsquo;s OSPO : &lt;a href="https://bit.ly/3mVdi0I">https://bit.ly/3mVdi0I&lt;/a>) &lt;a href="#fnref:9" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:10" role="doc-endnote">
&lt;p>Capital One&amp;rsquo;s OSPO : &lt;a href="https://bit.ly/3sxbf4e">https://bit.ly/3sxbf4e&lt;/a> &lt;a href="#fnref:10" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:11" role="doc-endnote">
&lt;p>Comcast&amp;rsquo;s OSPO : &lt;a href="https://bit.ly/2RAIw1A">https://bit.ly/2RAIw1A&lt;/a> &lt;a href="#fnref:11" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:12" role="doc-endnote">
&lt;p>Facebook&amp;rsquo;s OSPO : &lt;a href="https://bit.ly/3gkwOmg">https://bit.ly/3gkwOmg&lt;/a> &lt;a href="#fnref:12" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:13" role="doc-endnote">
&lt;p>Microsoft&amp;rsquo;s OSPO : &lt;a href="https://bit.ly/3eajxKm">https://bit.ly/3eajxKm&lt;/a> &lt;a href="#fnref:13" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:14" role="doc-endnote">
&lt;p>Red Hat : &lt;a href="https://bit.ly/3xfk3iW">https://bit.ly/3xfk3iW&lt;/a> &lt;a href="#fnref:14" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:15" role="doc-endnote">
&lt;p>Salesforce&amp;rsquo;s OSPO : &lt;a href="https://bit.ly/3akfzgR">https://bit.ly/3akfzgR&lt;/a> &lt;a href="#fnref:15" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:16" role="doc-endnote">
&lt;p>SAP&amp;rsquo;s OSPO : &lt;a href="https://bit.ly/32sVznS">https://bit.ly/32sVznS&lt;/a> &lt;a href="#fnref:16" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:17" role="doc-endnote">
&lt;p>Uber&amp;rsquo;s OSPO : &lt;a href="https://bit.ly/2Qcxwar">https://bit.ly/2Qcxwar&lt;/a> &lt;a href="#fnref:17" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:18" role="doc-endnote">
&lt;p>Yahoo/Verizon Media&amp;rsquo;s OSPO : &lt;a href="https://bit.ly/3mYRmBP">https://bit.ly/3mYRmBP&lt;/a> &lt;a href="#fnref:18" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:19" role="doc-endnote">
&lt;p>SK텔레콤 OSPO : &lt;a href="https://sktelecom.github.io/about/ospo">https://sktelecom.github.io/about/ospo&lt;/a> &lt;a href="#fnref:19" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>Blog: SRT Alliance Welcomes SKT to the SRT Open Source Video Streaming Project</title><link>/blog/news/20210330-srtalliance/</link><pubDate>Tue, 30 Mar 2021 00:00:00 +0000</pubDate><guid>/blog/news/20210330-srtalliance/</guid><description>
&lt;img src="/blog/news/20210330-srtalliance/featured-srtalliance_hu6199ebb984ef2b4f6e640f692ae06d0d_22052_640x0_resize_q75_catmullrom.jpg" width="640" height="360"/>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 610px">
&lt;img class="card-img-top" src="/blog/news/20210330-srtalliance/featured-srtalliance_hu6199ebb984ef2b4f6e640f692ae06d0d_22052_600x300_fill_q75_catmullrom_smart1.jpg" width="600" height="300">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
Image credit: SRT Alliance
&lt;small class="text-muted">&lt;br/>SRT Alliance&lt;/small>&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>&lt;strong>MONTREAL, CANADA – March 30, 2021&lt;/strong> – The &lt;a href="https://www.srtalliance.org/">SRT Alliance&lt;/a>, established by &lt;a href="http://www.haivision.com/">Haivision&lt;/a> (TSX: HAI), a leading global provider of mission-critical, real-time video streaming and networking solutions, today announced that SK Telecom (hereinafter referred to as “SKT”), Korea’s largest wireless telecommunications operator, has joined the SRT Alliance to support and adopt the SRT open source protocol.&lt;/p>
&lt;p>SRT (Secure Reliable Transport) is a free open source video transport protocol and technology stack originally developed and pioneered by Haivision that enables the delivery of high-quality and secure, low latency video across the public internet. With over 450 members in the SRT Alliance and widespread industry adoption, SRT is the fastest growing open source streaming project.&lt;/p>
&lt;p>SKT has implemented SRT for the secure and reliable transport of real-time low latency video over 5G networks, a first for the SRT Alliance. It is also actively working with Haivision to establish SRT as the industry standard in the IETF. Through its 5G MEC-based security video system development project named Hwangsaeul, SKT has already achieved 4K streaming over 5G networks with SRT and is currently developing an intelligent bandwidth-aware streaming technology suitable for challenging network environments.&lt;/p>
&lt;p>“We are delighted to join the SRT Alliance. We will utilize SRT to develop secure and reliable ultra-low latency real-time video streaming solutions so as to provide our customers with differentiated value and experience,” said Kim Jeong-seok, manager, Smart Space &amp;amp; Care Technology Development Team, SKT.&lt;/p>
&lt;p>“SKT’s use of SRT over 5G networks is another big step forward for the Alliance and as an emerging standard for anyone delivering live video over public internet,” said Suso Carrillo, Director of the SRT Alliance for Haivision. “We are very proud to have SKT as a member of the SRT Alliance and be the first member to implement the open source SRT protocol for 5G network delivery.”&lt;/p>
&lt;h2 id="about-the-srt-alliance">About the SRT Alliance&lt;/h2>
&lt;p>The SRT Alliance is a collaborative community of industry leaders and developers striving to achieve lower latency internet video transport by continuously improving SRT, an open source video transport protocol and technology stack. Originally developed and pioneered by Haivision, SRT optimizes streaming performance across unpredictable networks with secure streams and easy firewall traversal, bringing the best quality live video over the worst networks. Haivision was awarded an Emmy® for Technology and Engineering from the National Academy of Television Arts and Sciences for developing the SRT protocol. For more information about the project and how to join the SRT Alliance, visit srtalliance.org.&lt;/p>
&lt;h2 id="director-srt-alliance">Director SRT Alliance &lt;/h2>
&lt;p>Jesús (Suso) Carrillo&lt;br>
+34 649 801 593&lt;br>
&lt;a href="mailto:director@srtalliance.org">director@srtalliance.org&lt;/a>&lt;br>
&lt;a href="mailto:suso@haivision.com">suso@haivision.com&lt;/a>&lt;/p>
&lt;hr>
&lt;blockquote>
&lt;p>Origin : &lt;a href="https://www.srtalliance.org/sk-telecom-joins-srt-alliance/">https://www.srtalliance.org/sk-telecom-joins-srt-alliance/&lt;/a>&lt;/p>
&lt;/blockquote></description></item><item><title>Blog: Elastic License 2.0 그리고 진화하는 오픈소스 라이선스</title><link>/blog/2021/20210328-elasticlicense/</link><pubDate>Sun, 28 Mar 2021 00:00:00 +0000</pubDate><guid>/blog/2021/20210328-elasticlicense/</guid><description>
&lt;img src="/blog/2021/20210328-elasticlicense/featured-scale_hu0adce3c464c6f6e27493d0d0745cd5d4_35813_640x0_resize_catmullrom_2.png" width="640" height="612"/>
&lt;blockquote>
&lt;p>안녕하세요.&lt;/p>
&lt;p>미국의 오픈소스 전문 변호사인 &lt;a href="https://heathermeeker.com/about-me/">Heather Meeker&lt;/a>가 2021년 3월 11일 공개한 Elastic License에 대한 &lt;a href="https://www.coss.community/coss/elastic-license-2-0-and-the-evolution-of-open-source-licensing-3jb3">White Paper&lt;/a>를 기반으로 아래의 글을 작성하였습니다. 대부분 원글을 번역하는 방식이며, 제 의견은 인용구로 추가하였습니다.&lt;/p>
&lt;p>참고로, Heather Meeker는 이 백서를 자신의 개인적인 견해임을 나타내면서도 일부 Elastic의 자금 지원이 있었다고 밝혔습니다. 그래서인지, 원글은 Elastic License에 호의적인 입장을 보입니다.&lt;/p>
&lt;blockquote>
&lt;p>(조금 찾아보니, Elastic License 2.0을 &lt;a href="https://www.elastic.co/blog/elastic-license-v2">Heather Meeker가 작성&lt;/a>하였군요.)&lt;/p>
&lt;/blockquote>
&lt;p>여하튼 시대가 변하며 소프트웨어 배포 방식이 바뀌는 상황에 따라 상용 오픈소스 기업들이 개발과 사업을 병행하기 위해 어떤 라이선스 모델을 도입해야 할지 고민해야 했고, Elastic License가 나온 배경에 대한 한 측면을 이해하는 데 도움이 되는 글이라 생각합니다.
글에 오류가 있다면 언제든 &lt;a href="https://haksungjang.github.io/">연락&lt;/a>해주세요. :-)&lt;/p>
&lt;ul>
&lt;li>감수에 도움 주신 카카오의 &lt;a href="https://www.linkedin.com/in/%EC%98%81%ED%99%98-%EA%B9%80-4069b5135/">Sean&lt;/a>, &lt;a href="https://www.linkedin.com/in/hwang-minho/">Robin&lt;/a> 그리고 LG전자의 &lt;a href="https://www.linkedin.com/in/kyoungae-kim-597a1630">김경애&lt;/a>님에게 깊은 감사 드립니다.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>This paper was translated by Haksung Jang from the English version available at this &lt;a href="https://www.coss.community/coss/elastic-license-2-0-and-the-evolution-of-open-source-licensing-3jb3">white paper&lt;/a>. The original author, &lt;a href="https://heathermeeker.com/about-me/">Heather Meeker&lt;/a>, has not reviewed this translation.&lt;/p>
&lt;/div>
&lt;p>최근, 2021년 2월, &lt;a href="https://www.elastic.co/">Elastic&lt;/a>은 소프트웨어 제품에 &lt;a href="https://www.elastic.co/licensing/elastic-license">Elastic License 2.0&lt;/a>이라는 새로운 라이선스를 도입하였다. 이 라이선스 모델은 Elasticsearch, Kibana 등 주요 소프트웨어 제품군에 적용되었다. 이런 변화의 목적과 의미하는 바가 무엇인지 알아보자.&lt;/p>
&lt;p>Elastic License 2.0은 개방형 개발 모델&lt;sub>Open Development Model&lt;/sub>로 사업하는 기업이 취할 수 있는 대표적인 라이선스 모범 사례이다. Elastic License 2.0은 오픈소스 라이선스는 아니지만, 소프트웨어의 사용, 공유 및 변경의 자유와 커뮤니티에 해를 끼는 행동 방지 간의 공정한 균형을 유지하는 데 필요한 최소한의 제한 설정을 목표로 한다.&lt;/p>
&lt;p>&lt;img src="./featured-scale.png" alt="scale">&lt;/p>
&lt;h2 id="유닉스-리눅스-자유소프트웨어-그리고-오픈소스">유닉스, 리눅스, 자유소프트웨어, 그리고 오픈소스&lt;/h2>
&lt;p>Elastic License 2.0과 같은 새로운 라이선스의 추세를 이해하려면 오픈소스 라이선스 운동이 어떻게 성장했는지 살펴보는 것이 도움이 된다.&lt;/p>
&lt;p>오픈소스와 자유소프트웨어&lt;sub>Free Software&lt;/sub> 운동은 소프트웨어가 사유화되는 것에 대한 개발자의 우려에서 시작되었다. 이러한 우려의 불씨는 당시 가장 인기있는 운영체제인 유닉스였다. 유닉스의 개발사인 AT&amp;amp;T Bell Labs은 1956년의 동의령&lt;sub>consent decree&lt;/sub>에 따라 유닉스 및 C언어를 포함하는 연구 프로젝트로 이익 얻는 것을 금지&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> 당했으며, 이때문에 수년간 매우 관대한 조건의 라이선스로 유닉스를 배포하였다. 학계, 연구자, 개발자들은 유닉스를 수정/개선하여 공유하기 시작했고, 유닉스는 곧 운영체제 분야의 선두가 되었다. 하지만, 1983년 동의령이 해제되자 AT&amp;amp;T는 유닉스에 수정 사항 공유를 허용하지 않는 조항을 적용하였다. 이에 따라 각 업체별로 각자 수정한 운영체제를 사용하며 유닉스는 많은 호환되지 않는 종류로 쪼개졌고, 사용자들은 더 이상 협업할 수 없게 되었다.&lt;/p>
&lt;p>유닉스가 사유화되면서 자유소프트웨어 운동, 그리고 이어서 오픈소스 운동이 생겨났으며, 이들은 인프라 소프트웨어가 폐쇄되는 상황이 다시 발생하는 것을 방지하려고 하였다. 이 운동은 유닉스를 대체하는 자유소프트웨어인 리눅스를 중심으로 이루어졌으며 곧 모든 소프트웨어는 자유&lt;sub>free&lt;/sub>(무료&lt;sub>free&lt;/sub> 맥주에서의 Free가 아니라 언론의 자유&lt;sub>free&lt;/sub>에서의 Free)로워야 한다는 철학에 기반한 더 큰 운동으로 발전하였다. 이러한 운동의 한 요소는 소스 코드에 대한 접근, 개선 및 변경 사항을 만들고 공유할 수 있는 권리이다. 이러한 원칙들은 &lt;a href="https://en.wikipedia.org/wiki/GNU_General_Public_License">GNU General Public License&lt;/a> (GPL)에서 구현되었으며, 이에 따라 바이너리 배포자들은 해당 소스 코드를 공유해야 한다.&lt;/p>
&lt;p>시간이 흐르고, 2000년대 초반 인터넷 붐에 힘입어 오픈소스 라이선스는 더욱 인기를 얻게 되었다. GPL과 같은 일부 라이선스는 복잡한 법적 우려를 불러일으키기도 했지만, 기업이 협업할 수 있는 기반을 마련하였다. 2000년 이후 오픈소스와 이를 통해 가능해진 협업은 모든 기술 부문에 채택되었다. 오늘날, 오픈소스는 전자상거래&lt;sub>e-commerce&lt;/sub>의 핵심 기술이며, 기업들은 소프트웨어 인프라를 위한 지속해서 협력한다.&lt;/p>
&lt;h2 id="클라우드의-출현과-agpl">클라우드의 출현과 AGPL&lt;/h2>
&lt;p>GPL과 같은 라이선스는 변경 사항의 공유를 요구한다. 바이너리 배포에 대한 소스 코드 공유 조건을 부과한다. 반면에 &amp;ldquo;개인 복사본&amp;quot;을 만들어서 사용하는 건 변경 사항을 공유할 필요가 없다. 이러한 조건은 당시 대부분의 소프트웨어를 직접설치&lt;sub>on-premise&lt;/sub>하는 방식이었기 때문에 공유를 강제하는 데 효과적이었다. 그러나 2000년대 초부터 소프트웨어는 퍼블릭 클라우드로 이동하기 시작하였고, 더 이상 소프트웨어를 배포할 필요가 없었다. 고객은 로컬 사본을 얻지 않고도 소프트웨어를 사용할 수 있게 되었다.&lt;/p>
&lt;p>클라우드 서비스 사업이 커지면서, 이러한 패러다임의 변화는 오픈소스 커뮤니티의 기대치와 AWS&lt;sub>Amazon Web Services&lt;/sub>와 같은 클라우드 서비스 공급 업체 사이에 긴장감을 조성하였다. 클라우드 서비스 공급 업체는 개선 사항을 공유해야 하는 법적 의무에서 자유로웠다. 구글이 검색 서비스 강화를 위해 Linux에 의존하는 것으로 잘 알려졌기 때문에 이를 &amp;ldquo;구글 루프홀&lt;sub>Loophole&lt;/sub>&amp;ldquo;이라고도 불렀다. 이에 대응하기 위해 자유소프트웨어 커뮤니티는 &lt;a href="https://www.gnu.org/licenses/agpl-3.0.en.html">Affero GPL&lt;/a> (AGPL)이라는 GPL을 부분 변경한 형태의 라이선스를 만들었다. AGPL 3.0은 GPL 3.0과 거의 동일하지만 다음과 같은 원격 네트워크 상호 작용&lt;sub>Remote Network Interaction&lt;/sub> 조항을 포함한다.&lt;/p>
&lt;pre>&lt;code>[I]f you modify the Program, your modified version must prominently offer
all users interacting with it remotely through a computer network …
an opportunity to receive the Corresponding Source of your version by
providing access to the Corresponding Source from a network server at no
charge, through some standard or customary means of facilitating copying
of software….
&lt;/code>&lt;/pre>&lt;p>이 새로운 라이선스는 GPL이 리눅스 배포에 대해 했던 것처럼 클라우드 서비스 공급 업체가 소스 코드 개선 사항을 공유하도록 강제하기 위한 것이다.&lt;/p>
&lt;h2 id="agpl과-듀얼-라이선스">AGPL과 듀얼 라이선스&lt;/h2>
&lt;p>AGPL은 첫 번째 릴리스부터 논란이 있었다. 2007년, GPL 3.0 초안 작성이 마무리되어 가는 과정에서 일부 작성자들은 GPL을 네트워크 카피레프트&lt;sub>Copyleft&lt;/sub> 모델로 변경하기를 원하였다. 하지만 커뮤니티는 GPL 3.0의 &amp;ldquo;루프홀&amp;quot;을 그대로 유지하기로 결정했고, 몇 달 후, 이에 대한 대안으로 AGPL을 내놓았다. 그러나 AGPL은 널리 채택되지 않았다. 매우 인기 있는 분산 데이터베이스 제품인 &lt;a href="https://en.wikipedia.org/wiki/MongoDB">MongoDB&lt;/a>가 유일무이한 AGPL의 &amp;ldquo;킬러 앱&lt;sub>killer app&lt;/sub>&amp;ldquo;이다. 기업들은 처음에는 AGPL을 이해하고 받아들이기 어려워했지만, 대부분 사용자는 소프트웨어를 변경하거나 서비스로 제공하지 않았기 때문에 AGPL하의 소프트웨어를 사용하겠다는 합리적인 결정을 내릴 수 있었다.&lt;/p>
&lt;blockquote>
&lt;p>AGPL 3.0의 Remote Network Interaction 조항은 프로그램을 변경하였을 때에 한하여 변경 사항의 소스 코드를 컴퓨터 네트워크를 통한 원격 사용자에게 제공해야 합니다. 즉, 변경하지 않는다면 소스 코드 공개 의무가 발생하지 않습니다.&lt;/p>
&lt;/blockquote>
&lt;p>MongoDB는 &amp;ldquo;&lt;a href="http://monty-says.blogspot.com/2009/08/thoughts-about-dual-licensing-open.html">듀얼 라이선스&lt;/a>&amp;rdquo; 비즈니스 모델로 AGPL을 사용하였다. 사용자&lt;sub>licensee&lt;/sub>에게 AGPL 또는 상용 소프트웨어 라이선스 중 하나를 선택하게 하였다. 사용자는 AGPL의 요구사항을 준수하고 싶지 않거나 준수하기 위한 법적인 검토조차 관여하고 싶지 않다면 상용 라이선스를 선택하였다. 이러한 듀얼 라이선스 비즈니스 모델은 원래 GPL과 상용 라이선스를 선택하게 하는 방식으로 개발되었으나 시간이 지나면서 GPL 대신 보다 카피레프트 범위를 확장한 AGPL이 사용되었다. MongoDB의 이 라이선스 모델은 상당히 성공적이었다. AGPL은 가장 강력한 카피레프트 라이선스였기 때문에 MongoDB가 상업적인 협상을 추진하는 데 유용하였다. 한편, AGPL을 만든 이들은 AGPL이 MongoDB의 사업 수단으로 사용되는 모습이 &lt;a href="http://ebb.org/bkuhn/blog/">유해한 갈취&lt;/a>&lt;sub>toxic shakedown&lt;/sub>라면서 비판하기도 하였다. 여하튼, 그렇게 강력하다고 평가 받던 AGPL의 소스 코드 공유 조건도 클라우드 공급 업체가 오픈소스를 대규모로 상업적인 사용을 하면서 개발자나 커뮤니티에 아무것도 되돌려 주지 않는 행위를 막기에는 충분하지 않았다.&lt;/p>
&lt;h2 id="무상-사용substrip-miningsub">무상 사용&lt;sub>Strip-mining&lt;/sub>&lt;/h2>
&lt;p>클라우드 이용이 GPL 모델을 &amp;ldquo;파괴&lt;sub>broken&lt;/sub>&amp;ldquo;시켰던 것처럼, 2010년대 클라우드 컴퓨팅이 발전하면서 AGPL 듀얼 라이선스 모델도 압박을 받기 시작하였다. 이번에는 문제가 달랐다. GPL 또는 AGPL의 범위는 하나의 단일 실행 가능 프로그램&lt;sub>single program executable&lt;/sub>까지만 확장된다. 이 &amp;ldquo;기능&amp;quot;은 저작권 라이선스가 단일 저작물에 대해서만 사용 조건을 지정할 수 있다는 이론에 따라 GPL에서 의도적으로 설계된 것이었다. 즉, GPL은 파생 저작물&lt;sub>derivative work&lt;/sub>에 대한 소스 코드 공유 요건을 갖지만, 집합 저작물&lt;sub>collective work&lt;/sub>에 대해서는 아니다. 법적으로 이 둘 간의 경계는 상당히 불분명하지만 GPL이 인기를 얻으면서 단일 프로그램이란 하나의 실행 가능한 프로세스라고 정의하는 것이 일반적인 관행이 되었다. 자유소프트웨어재단&lt;sub>Free Software Foundation&lt;/sub>은 &lt;a href="https://www.gnu.org/licenses/gpl-faq.en.html#MereAggregation">GPL FAQ&lt;/a>에서 오랫동안 이런 원칙을 주장해왔다.&lt;/p>
&lt;p>하지만 클라우드 서비스가 발전하면서 두 가지 일이 발생하였다. 첫째, 소프트웨어 엔지니어링을 클라우드 구현에 더욱 집중하게 되었다. 클라우드 공급 업체는 한때 클라우드 환경에서 실행하기 위한 소프트웨어를 개선하거나 수정해야 했던 반면, 소프트웨어 엔지니어링이 발전하면서 클라우드 공급 업체는 기존 오픈소스 소프트웨어를 &amp;ldquo;플러그 앤드 플레이&lt;sub>plug and play&lt;/sub>&amp;ldquo;형태로 사용할 수 있게 되었다. 그러다 보니 클라우드 공급 업체는 혁신의 주체를 주요 실행 파일이 아닌 곳으로 변화할 수 있었다. 그들은 소프트웨어를 관리, 모니터링 및 배포하기 위한 소프트웨어를 추가로 개발했으며, 이러한 혁신은 클라우드 서비스를 키울 수 있었다. AGPL은 클라우드 공급 업체의 이러한 개선사항에 대해서는 이를 공유하도록 강제하는 데 아무런 도움이 되지 않았다.&lt;/p>
&lt;p>이렇게 오픈소스 상용 기업들은 대형 클라우드 공급 업체가 무료로 갖다 쓰기 좋은 상점처럼 되어 버렸다. 특히 &amp;ldquo;플랫폼 소프트웨어&amp;rdquo; 또는 미들웨어 (컴퓨터 스택에서 최상위 계측인 응용 프로그램과 운영 체제의 중간에 있는 소프트웨어)에서 문제는 더 심각하였다. 이 범주의 소프트웨어는 최신 컴퓨팅에 필수적이며 클라우드 구현에 매우 유용하다.&lt;/p>
&lt;p>이 때문에 비즈니스 세계에서 클라우드 공급 업체의 오픈소스 사용에 대한 비판이 제기되었다. Bain Capital의 Salil Deshpande는 2018년 &amp;ldquo;분명히 이것은 불법은 아니다. 그러나 우리는 이것이 잘못되었고, 오픈소스 커뮤니티의 지속 가능성에 도움이 되지 않는다고 생각한다&amp;quot;라고 &lt;a href="https://techcrunch.com/2018/09/07/commons-clause-stops-open-source-abuse/">하였다&lt;/a>. 또 다른 전문가는 &amp;ldquo;AWS는 오픈소스의 아킬레스건을 건드리고 있다. 다른 사람의 저작물을 무료로 가져다가 이에 대한 접근 권한을 임대하는 사업을 하는 것이다.&amp;ldquo;라고 &lt;a href="https://onezero.medium.com/open-source-betrayed-industry-leaders-accuse-amazon-of-playing-a-rigged-game-with-aws-67177bc748b7">하였다&lt;/a>. 문제는 모든 주요 오픈소스 라이선스는 이런 방식으로 소프트웨어를 사용하는 것을 제지하지 않는다는 것이다.&lt;/p>
&lt;blockquote>
&lt;p>주요 오픈소스 라이선스가 작성되었던 시점에는 AWS의 &amp;ldquo;Program as a Service&amp;rdquo; 형태의 프로그램이 없었으니, 이에 대한 조건도 고려하지 않았을 테지요.&lt;/p>
&lt;p>오픈소스 상용 기업들은 오픈소스 프로그램을 개발해서 듀얼 라이선스 모델 (GPL or 상용)로 사업을 하고 있었는데, 클라우드 제공 업체에서 이 오픈소스 프로그램을 그대로 가져다가 클라우드 서비스로 제공하는 사업을 하고, 자기네한테는 아무런 이윤도 안겨주지 않으니, 사업 또는 개발 측면에서 모두 좋지 않은 영향을 미쳤을 것은 충분히 추측할 수 있습니다.&lt;/p>
&lt;p>클라우드 공급 업체가 MongoDB를 &lt;a href="https://aws.amazon.com/ko/documentdb/">Amazon DocumentDB&lt;/a>나 &lt;a href="https://docs.microsoft.com/ko-kr/azure/cosmos-db/introduction">Azure Cosmos DB&lt;/a>로 서비스하며 고객을 확보하는게 대표적인 예라고 볼 수 있을 것 같습니다.&lt;/p>
&lt;/blockquote>
&lt;p>오픈소스 상용 기업들과 투자자들은 이런 오픈소스 모델의 한계 때문에 고민이 되었다. GPL, AGPL 등 어떤 라이선스도 저작권법을 사용하여 클라우드 공급 업체가 변경 사항을 공유하도록 강제할 수 없었다. 또한 AWS, Azure 또는 Google Cloud와 같은 대규모 고객 기반을 가진 클라우드 공급 업체는 버튼 클릭으로 소프트웨어를 쉽게 추가할 수 있게 하여 고객과 &amp;ldquo;끈끈한&amp;rdquo; 관계를 유지하였다. 일부 오픈소스 개발사는 자체 클라우드 서비스를 제공했지만, 소프트웨어를 무료로 사용하는 대형 클라우드 공급 업체와 경쟁하는 건 너무 어렵다는 걸 알게 되었다. 오픈소스 개발사의 서비스가 더 우수한 경우에도, 기존 클라우드 계정에서는 단지 &amp;ldquo;체크박스를 선택&amp;quot;하여 소프트웨어 제품군을 추가하는 것과는 달리, 새로운 서비스를 사용하기 위한 거래 비용&lt;sub>transaction cost&lt;/sub>이 발생한다는 점이 고객이 등을 돌리게 하였다.&lt;/p>
&lt;h2 id="sspl과-소스-공개-라이선스">SSPL과 소스 공개 라이선스&lt;/h2>
&lt;p>2018년 업계는 돌파구를 찾았다. AWS가 오픈소스 플랫폼 소프트웨어를 호스팅하면서 계속 인기를 얻자 오픈소스 개발사들은 행동에 나서기 시작하였다. 라이선스를 변경하였다.&lt;/p>
&lt;p>오픈소스 개발사들은 두 가지 다른 경로를 통해 &lt;a href="https://techcrunch.com/2018/11/29/the-crusade-against-open-source-abuse/">무상 사용 문제에 대응&lt;/a>하였다.&lt;/p>
&lt;ol>
&lt;li>매우 강한&lt;sub>ultra-strong&lt;/sub> 네트워크 카피레프트 라이선스&lt;/li>
&lt;li>제한 조건을 갖는 소스 공개 라이선스&lt;sub>Source Available Licensing&lt;/sub>&lt;/li>
&lt;/ol>
&lt;p>이 두 범주 모두 이전에는 정의되지 않았던 형태이다. 둘 다 MySQL 및 MongoDB 에서와 같은 듀얼 라이선스 모델을 지원하기 위한 것이다.&lt;/p>
&lt;h3 id="sspl">SSPL&lt;/h3>
&lt;p>매우 강한 카피레프트 접근 방식은 2018년 &lt;a href="https://www.mongodb.com/licensing/server-side-public-license">SSPL&lt;/a>&lt;sub>Server Side Public License&lt;/sub>을 만든 MongoDB에 의해 시도되었다.&lt;/p>
&lt;pre>&lt;code>1. Offering the Program as a Service.
If you make the functionality of the Program or a modified version
available to third parties as a service, you must make the Service
Source Code available via network download to everyone at no charge,
under the terms of this License. Making the functionality of the
Program or modified version available to third parties as a service
includes, without limitation, enabling third parties to interact
with the functionality of the Program or modified version remotely
through a computer network, offering a service the value of which
entirely or primarily derives from the value of the Program or
modified version, or offering a service that accomplishes for users
the primary purpose of the Program or modified version.
&amp;quot;Service Source Code&amp;quot; means the Corresponding Source for the Program
or the modified version, and the Corresponding Source for all programs
that you use to make the Program or modified version available as a
service, including, without limitation, management software, user
interfaces, application program interfaces, automation software,
monitoring software, backup software, storage software and hosting
software, all such that a user could run an instance of the service
using the Service Source Code you make available. [emphasis added].
&lt;/code>&lt;/pre>&lt;p>이 라이선스는 무상 사용 문제에 대응하기 위한 오픈소스 솔루션을 만들기 위해 작성되었다. 소스 코드 공유 요구 사항은 AGPL의 요구 사항보다 훨씬 광범위하다. 이러한 요구 사항의 범위는 분산 소프트웨어에 대해서도 GPL 요구 사항과 유사하게 작동하도록 설계되었다. &lt;a href="https://www.mongodb.com/community/licensing">MongoDB는 SSPL 또는 상용 라이선스&lt;/a>에 따라 소프트웨어를 사용할 수 있는 듀얼 라이선스 모델을 적용하였다.&lt;/p>
&lt;p>MongoDB는 SSPL을 &lt;a href="https://opensource.org/approval">OSI&lt;/a>&lt;sub>Open Source Initiative&lt;/sub>에 승인받기 위해 제출하였다. 수개월 간의 논쟁 끝에 승인을 받지는 못하였지만, MongoDB는 듀얼 라이선스 모델의 오픈소스 선택지로 SSPL을 계속 사용하고 있다. 이 라이선스가 &lt;a href="https://opensource.org/osd">오픈소스 정의&lt;/a>&lt;sub>Open Source Definition&lt;/sub>에 적합하지 않은 이유에 대한 논의는 복잡했으며, 이 정의를 충족하는 것만이 유일한 기준은 아니었다. 요약하자면, 이렇게 광범위한 소스 공유 요구 사항을 가진 라이선스가 &amp;ldquo;&lt;a href="https://opensource.org/approval">소프트웨어 자유를 보장&lt;/a>&amp;ldquo;할지가 분명하지 않았다.&lt;/p>
&lt;h3 id="제한-조건을-갖는-소스-공개-라이선스">제한 조건을 갖는 소스 공개 라이선스&lt;/h3>
&lt;p>다른 사람들은 또 다른 경로를 따랐다. 일부 회사는 Salil Deshpande가 주도한 &lt;a href="https://commonsclause.com/">Commons Clause&lt;/a>를 채택했으며, 어떤 회사는 Elastic이 Elastic License 1.0을 만든 것처럼 &lt;a href="https://redislabs.com/legal/licenses/">Redis&lt;/a>, &lt;a href="https://www.confluent.io/confluent-community-license">Confluent&lt;/a>, &lt;a href="https://www.cockroachlabs.com/cockroachdb-community-license/">CockroachDB&lt;/a>와 같은 자체 라이선스를 제작하였다. SSPL과는 달리, 이 라이선스들은 오픈소스 정의를 충족시키기 위한 것이 아니었다. 대신, 이들은 무상 사용을 겨냥한 제한 조건을 갖고 있다.&lt;/p>
&lt;p>왜 이렇게 두 가지 경로로 갈렸을까? 이는 &lt;a href="https://www.gnu.org/philosophy/free-sw.en.html">Freedom Zero&lt;/a>, &amp;ldquo;어떤 목적으로든 원하는 대로 프로그램을 실행할 수 있는 자유&amp;quot;와 관련이 있다&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>오픈소스 또는 자유소프트웨어 라이선스의 주요 특징은 라이선스 제약이나 제한이 없다는 것이다&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>. 일반적인 상용 소프트웨어 라이선스와 비교해보자. 개인용으로 사용하겠다는 라이선스 조건에 클릭하여 수락하는 형태의 최종 사용자 라이선스&lt;sub>End User license Agreement&lt;/sub>는 소프트웨어를 사용하는 것만 허용하며, 변경하거나 배포할 수 없다. 엔터프라이즈 라이선스는 소프트웨어를 사용할 수 있는 사용자, 서버 또는 물리적 위치의 수에 대한 제한을 설정하고, 기업은 해당 사용을 감시해야 한다. 그러나 오픈소스 라이선스에는 그러한 제한이 없다. 따라서, 소스 코드를 무료로 제공한다고 하더라도 상업적 사용 불가와 같은 제한을 갖고 있다면 정의상 오픈소스가 아니다.&lt;/p>
&lt;p>즉, 모든 라이선스 제한은 오픈소스 범주에서 벗어나게 한다.&lt;/p>
&lt;p>2018년 이후 발생한 라이선스 변경의 물결 가운데 출시된 모든 라이선스는 거의 비슷한 제한을 갖고 있다. 각각 고유한 조건이 있지만, 이들은 모두 사용자가 소프트웨어를 무료로 사용할 수 있도록 허용하는 동시에 경쟁 호스팅 서비스 제공을 위한 소프트웨어 사용을 금지하는 데 초점을 맞추고 있다.&lt;/p>
&lt;h2 id="elastic-license-20">Elastic License 2.0&lt;/h2>
&lt;p>2021년 초, Elasticsearch는 이 두 가지 경로를 모두 따르는 하나의 길을 개척하였다. SSPL과 새로운 &lt;a href="https://www.elastic.co/licensing/elastic-license">Elastic License 2.0&lt;/a> (ELv2)이라는 두 가지 무료 선택지를 제공하여 소프트웨어 제품군을 사용할 수 있게 하였다.&lt;/p>
&lt;p>새로운 Elastic 2.0 라이선스는 짧고 (한 페이지에 불과) 쉬운 언어로 작성되었으며 오픈소스 라이선스의 거의 모든 자유를 허용한다. 소프트웨어 수신자는 소프트웨어를 자유롭게 사용, 변경 및 재배포 할 수 있다. 전에 소프트웨어 라이선스를 읽어본 적이 없더라도 이 라이선스는 한번 읽어볼 가치가 있다.&lt;/p>
&lt;p>여기에는 두 가지 주요 제한이 있다.&lt;/p>
&lt;pre>&lt;code>You may not provide the software to third parties as a hosted or
managed service, where the service provides users with access to
any substantial set of the features or functionality of the software.
You may not move, change, disable, or circumvent the license key
functionality in the software, and you may not remove or obscure
any functionality in the software that is protected by the license key.
&lt;/code>&lt;/pre>&lt;p>첫 번째 제한은 무상 사용 문제를 해결하는 데 초점이 맞춰져 있다. 이로써 이 제한을 위반하여 소프트웨어를 사용하면 소프트웨어의 권한을 침해하게 된다.&lt;/p>
&lt;p>두 번째 제한은 소프트웨어 라이선스 키의 해킹을 금지하기 위한 것이다. 이러한 제한은 소프트웨어 라이선스에서는 오래전부터 일반적이었으나, 소스 공개 라이선스에서는 이제 막 사용되기 시작하였다. 이 조항을 통해 개발자는 유료 서비스를 ELv2하의 소프트웨어와 상호 작용하게 하거나, 유료 기능을 위한 소프트웨어 구성 요소 일부를 보호할 수 있게 되었다.&lt;/p>
&lt;p>이 라이선스의 다른 조항들은 매우 간단하며 오픈소스 라이선스를 읽은 사람이라면 누구나 익숙할 것이다.&lt;/p>
&lt;h2 id="왜-듀얼-라이선스를-사용하였는가">왜 듀얼 라이선스를 사용하였는가?&lt;/h2>
&lt;p>Elasticsearch는 사용자에게 SSPL과 Elastic License 중 하나를 선택할 수 있게 하는 특이한 경로를 택하였다. 오늘날 많은 기업이 &amp;ldquo;오픈 코어&lt;sub>open core&lt;/sub>&amp;rdquo; 모델을 사용하고 있으며, 실제로 Elasticsearch도 전에는 이 모델을 사용하였다. 둘의 차이는 미묘하다고 할 수 있다. 오픈 코어 모델은 (대부분 Apache 2.0과 같은 허용적인&lt;sub>permissive&lt;/sub>) 오픈소스 라이선스로 핵심 소프트웨어를 제공한다. 그런 다음 제한된 라이선스로 또는 서비스로만&lt;sub>as a service&lt;/sub> 추가 기능(대개 기업이 대규모로 배포하는 데 유용한 기능)을 제공한다. 그러나 Elasticsearch는 동일한 소프트웨어를 두 개의 다른 라이선스로 사용할 수 있는 듀얼 라이선스 모델을 고수하였다. 이 듀얼 라이선스 모델은 MySQL에 의해 개척되었고, 일반적으로 무료 라이선스 선택지로 GPL, AGPL 또는 SSPL과 같은 카피레프트 라이선스를 사용한다. 그러나 이 모델은 오픈소스 라이선스와 클라우드 서비스 간의 충돌 때문에 최근 몇 년 동안 인기가 시들해졌다.&lt;/p>
&lt;p>Elastic의 선택은 SSPL과 Elastic License 2.0의 두 가지 무료 라이선스 선택권을 제공하였다는 점에서 더욱 이례적이었다. 듀얼 라이선스는 일반적으로 하나의 무료 옵션만 제공한다. 이러한 이례적인 방법을 통해 Elasticsearch는 거의 모든 사용자가 소프트웨어를 무료로 사용할 수 있도록 하는 유연성을 강조하였다.&lt;/p>
&lt;blockquote>
&lt;p>Elastic License 2.0는 오직 클라우드 서비스 공급 업체에서 Elasticsearch를 자기네 클라우드 서비스로 제공하는 것만은 막겠다는 의지인 것 같습니다.&lt;/p>
&lt;p>결국 AWS는 Elasticsearch 서비스를 계속하기 위해 Elasticsearch를 &lt;a href="https://aws.amazon.com/ko/blogs/opensource/stepping-up-for-a-truly-open-source-elasticsearch/">Fork&lt;/a>했고, 이를 &lt;a href="https://opendistro.github.io/for-elasticsearch/">Open Distro for Elasticsearch&lt;/a>라고 명명하며 Apache License 2.0을 적용하고, 커뮤니티를 키워가기로 했습니다.&lt;/p>
&lt;p>누가 오픈소스의 지속가능성과 발전에 기여하고 있는 것일까요?&lt;/p>
&lt;/blockquote>
&lt;h2 id="elastic-license-20과-최신-라이선스-기술">Elastic License 2.0과 최신 라이선스 기술&lt;/h2>
&lt;p>Elasticsearch는 사용자와 개발자 모두에게 공정하고 지속 가능한 비즈니스 모델을 유지하면서 가능한 한 개방성을 유지하기 위해 새로운 라이선스 모델로 전환하였다. 그렇게 함으로써 소스 공개 운동&lt;sub>source-available movement&lt;/sub>에 참여한 다른 참여자들의 목표와 추구하는 바를 라이선스 작성 시 반영하였다.&lt;/p>
&lt;p>&lt;a href="https://www.elastic.co/licensing/elastic-license/faq">라이선스 변경에 대한 FAQ&lt;/a>에서 요약한 바와 같이 Elastic의 라이선스 변경은 고객이나 커뮤니티 사용자 수에 영향을 미치지 않을 것으로 예상된다. 대부분의 사용자는 Elastic의 소프트웨어를 기반으로 애플리케이션을 구축한다. 이는 &amp;ldquo;제3자에게 호스팅 또는 관리 서비스&lt;sub>as a hosted or managed Service&lt;/sub>로 제공&amp;quot;하는 비즈니스가 아니기 때문이다.&lt;/p>
&lt;h2 id="더-나은-라이선스-만들기">더 나은 라이선스 만들기&lt;/h2>
&lt;p>또한, Elastic은 Elastic License 2.0을 작성하는 데 리소스를 투입함으로써 라이선스 작성 기술의 발전을 추구하였다. 어떤 의미에서 소스 공개 라이선스는 소프트웨어만큼 오래되었다. 사실, 바이너리 전용 라이선스는 1980년대 PC / Mac 플랫폼 표준화의 산물이었다. 그 이전에는 거의 모든 소프트웨어가 소스 코드 형식으로 라이선스 되었다. 그러나 시간이 지남에 따라 라이선스의 배포 형식과 방법은 크게 달라졌다.&lt;/p>
&lt;p>Elastic License 2.0은 이러한 추세의 정점이다. 형식적으로는 오픈소스 라이선스의 가장 인기 있는 간단하고 직관적인 작성 방식과 템플릿을 채택하였다. 또한 라이선스 키 보존 조항을 통해 공급 업체가 무료 및 유료 기능을 모두 갖춘 소프트웨어에 대한 라이선스를 쉽게 사용할 수 있도록 지원한다.&lt;/p>
&lt;p>수십 년 전 유닉스에서 분리된 수많은 호환되지 않은 독점 버전과 마찬가지로 독점 라이선스는 제각각의 조항과 조건으로 덕지덕지 붙여진 누더기이다. 일반 소비자 소프트웨어 제품에 대한 단순한 최종 사용자 라이선스조차도 일반적으로 너무 길고 난해하여 대부분의 사용자는 이해할 수 없다. &lt;a href="https://en.wikipedia.org/wiki/HumancentiPad">아무도 그것을 읽지 않는다는 말도 많다&lt;/a>. 그러나 이러한 복잡성은 대부분 불필요하다. 오픈소스 라이선스, 특히 허용&lt;sub>permissive&lt;/sub> 라이선스는 이를 교훈으로 삼았다. 간단한 일련의 규칙으로도 충분해야 하며 이해하기 쉬울수록 사용자가 이를 존중할 가능성은 높아진다.&lt;/p>
&lt;p>Elastic License 2.0은 짧고 간단하며 이해하기 쉬울 뿐만 아니라 사람들이 이를 &lt;a href="https://www.elastic.co/blog/elastic-license-v2">템플릿으로 사용&lt;/a>할 수도 있다. 무상 사용 방지 논쟁이 시작된 후, 마찰이 없는 방식으로, 합리적인 제한을 가지며, 간단하고 이해 가능한 라이선스에 대한 수요가 증가하고 있다. 그러나 대부분의 소규모 소프트웨어 회사는 자체적으로 라이선스를 작성할 리소스가 없다. 많은 소프트웨어 스타트업이 Elastic License 2.0과 Confluent Community License와 같은 라이선스를 그들이 채택할 수 있는 모델로 찾고 있는 것은 놀라운 일이 아니다.&lt;/p>
&lt;p>이 분야는 &lt;a href="https://faircode.io/">Fair Code&lt;/a>가 이에 대한 표준을 만들면서 대중화되었다. Fair Code는 다음과 같이 말한다.&lt;/p>
&lt;pre>&lt;code>Fair-code is not a software license.
It describes a software model where software:
* is generally free to use and can be distributed by anybody
* has its source code openly available
* can be extended by anybody in public and private communities
* is commercially restricted by its authors
&lt;/code>&lt;/pre>&lt;p>이 계획은 아직 초기 단계에 있지만, 이로써 사용자와 개발자 모두에게 공정한 패러다임의 필요성을 업계가 인식하기 시작하고 있으며, 오픈소스 상용 기업이 오픈소스 모델보다 더 유연한 방식으로 둘 사이의 균형을 맞출 수 있도록 하고 있음은 분명하다. 한 전문가는 최근의 라이선스 발전을 &amp;ldquo;&lt;a href="https://monetize.substack.com/p/open-source-eras">오픈소스 이후 시대&lt;/a>&amp;ldquo;라고 부르기까지 하였다. 하지만 실제로는 이러한 소스 공개 라이선스는 비즈니스 및 라이선스 모델이 계속 발전함에 따라 일반적으로 오픈소스 라이선스와 함께 사용된다. 따라서 두 모델은 엄격한 대체품이 아니라 보완품이다.&lt;/p>
&lt;p>또 다른 표준화된 라이선스 옵션도 있다. 2020년, 한 변호사 그룹은 &lt;a href="http://www.polyformproject.org/">PolyForm Project&lt;/a>를 시작하여 소스 공개 라이선스 템플릿 모음을 작성하였다. 이러한 라이선스는 오픈소스 라이선스와 독점 라이선스 모두에 경험이 있는 변호사에 의해 상호 리뷰되었다. 개방형 콘텐츠 라이선싱을 위한 &lt;a href="https://creativecommons.org/">Creative Commons&lt;/a>와 마찬가지로 비상업적, 평가 전용, 경쟁 방지 라이선스 등의 옵션 메뉴를 제공한다. Elastic License 2.0과 같이 모두 무료로 소스 코드에 대한 접근을 제공하며 필요한 특허 라이선스를 부여한다. PolyForm Perimeter 및 PolyForm Shield는 선조라고 할 수 있는 Confluent Community License와 유사하며, Elastic License 2.0은 이러한 추세에 따라 사용 가능한 옵션을 발전시켰다.&lt;/p>
&lt;p>질문이 있거나 더 자세한 내용을 알아가고 싶다면 다음과 같은 몇 가지 자료를 참조하라.&lt;/p>
&lt;p>&lt;strong>&amp;ldquo;The rise of open source IPOs&amp;rdquo;&lt;/strong> &lt;a href="https://coss.media/rise-of-the-open-source-ipo/">https://coss.media/rise-of-the-open-source-ipo/&lt;/a>. This article tracks some of the spectacular business successes of open source companies.&lt;/p>
&lt;p>&lt;strong>&amp;ldquo;The After Open Source Era Has Started&amp;rdquo;&lt;/strong> &lt;a href="https://monetize.substack.com/p/open-source-eras">https://monetize.substack.com/p/open-source-eras&lt;/a> . This article discusses the sea change represented by companies moving to source available licenses.&lt;/p>
&lt;p>&lt;strong>US House of Representatives Committee on the Judiciary&amp;rsquo;s report on investigation into competition in digital markets, spearheaded by the Subcommittee on Antitrust, Commercial and Administrative Law.&lt;/strong> &lt;a href="https://www.documentcloud.org/documents/7222836-Investigation-of-Competition-in-Digital-Markets.html">https://www.documentcloud.org/documents/7222836-Investigation-of-Competition-in-Digital-Markets.html&lt;/a>. Note the mention of Elasticsearch on page 326.&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&amp;ldquo;Modification of Final Judgment,&amp;rdquo; August 24, 1982, filed in case 82-0192, United States of America v. Western Electric Company, Incorporated, and American Telephone and Telegraph Company, U.S. District Court for the District of Columbia &lt;a href="http://web.archive.org/web/20060827191354/members.cox.net/hwilkerson/documents/AT&amp;amp;T_Consent_Decree.pdf">web.archive.org/web/20060827191354/members.cox&lt;/a>. &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>The Free Software Definition is similar to the Open Source Definition, but shorter and clearer. &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>Open source licenses can contain conditions, such as notices or source code sharing. But these are not limitations that tell you what you cannot do with software, they only require that if you elect to do certain things, you also must do others. &lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>Blog: SK텔레콤, 초저지연 영상전송기술 오픈소스 공개</title><link>/blog/news/20210308-hwangsaeul/</link><pubDate>Mon, 08 Mar 2021 00:00:00 +0000</pubDate><guid>/blog/news/20210308-hwangsaeul/</guid><description>
&lt;img src="/blog/news/20210308-hwangsaeul/featured-structure_hu987d9e4157edc27f079c66674ea0d98e_27305_640x0_resize_q75_catmullrom.jpeg" width="640" height="413"/>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 610px">
&lt;img class="card-img-top" src="/blog/news/20210308-hwangsaeul/20210308121349363500_hu044a3df7b7f2f6ffe8eb07807ebc4f44_61511_600x300_fill_q75_catmullrom_smart1.jpeg" width="600" height="300">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
우아한형제들 실외 자율주행 배달로봇 딜리드라이브. [사진=SK텔레콤 제공]
&lt;small class="text-muted">&lt;br/>아주경제&lt;/small>&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>SK텔레콤이 배달의민족 자율주행로봇 &amp;lsquo;딜리드라이브&amp;rsquo;에 활용한 5세대(5G) 이동통신용 초저지연 영상전송기술을 공개했다.&lt;/p>
&lt;p>8일 현재 SK텔레콤은 영상전송기술 &amp;lsquo;황새울(hwangsaeul)&amp;rsquo; 프로젝트 정보와 소스코드를 오픈소스 소프트웨어(SW) 공유 웹사이트 &amp;lsquo;깃허브(GitHub)&amp;lsquo;에서 제공하고 있다. 오픈소스는 SW를 소유한 기업·개발자가 그 코드를 다른 개발자가 쓸 수 있게 공개한 것이다.&lt;/p>
&lt;hr>
&lt;p>자세한 내용은 기사 원문에서 확인하세요. : : &lt;a href="https://www.ajunews.com/view/20210308115656420">https://www.ajunews.com/view/20210308115656420&lt;/a>&lt;/p></description></item><item><title>Blog: The 2nd Page of H8l</title><link>/blog/2021/20210209-2nd-page-of-h8l/</link><pubDate>Tue, 09 Feb 2021 00:00:00 +0000</pubDate><guid>/blog/2021/20210209-2nd-page-of-h8l/</guid><description>
&lt;img src="/blog/2021/20210209-2nd-page-of-h8l/featured-diagram_hu0ebf613d48f3584022125dc29e10620b_117033_640x0_resize_catmullrom_2.png" width="640" height="426"/>
&lt;h1 id="the-2nd-page-of-hwangsaeul-project">The 2nd page of Hwangsaeul project&lt;/h1>
&lt;p>It&amp;rsquo;s been almost a year and half since Jakub posted the &lt;a href="https://www.collabora.com/news-and-blog/news-and-events/low-latency-streaming-of-security-feeds-with-srt-and-gstreamer.html">installation document&lt;/a> of Hwangsaeul (a.k.a H8L) project. The project members are still rush to develop the project for the various use cases. Although the H8L project is originally designed to support the massive deployment of video surveillance cameras which enable SRT transmission, we found that there is much more potential when we switch the domain to UAV(Unmanned Areial Viehicle) and UGV(Unmanned Ground Vehicle). Therefore, we had to change the overall shape of H8L to optimize for the new targets.&lt;/p>
&lt;h2 id="deprecation-of-messages-queue">Deprecation of Messages Queue&lt;/h2>
&lt;p>The major architecture change for ​the second version of H8L is to remove the dependency on message queue by the deprecation of ​&lt;a href="https://github.com/hwangsaeul/chamge">Chamge​&lt;/a>. Although the module is good for exchanging complex messages among service components, it is an overkill architecture for real-time video streaming that focuses on video quality and ultra-low latency. In addition, there are lots of message queue based platform so we decided not to keep developing duplicated effort. Instead, we re-designed that each component provides D-Bus API and local settings. Since we removed this component, unfortunately, ABI compatibility with the previous version will not be guaranteed while this project is on-going.&lt;/p>
&lt;h2 id="gaeul-umbrella-repository-for-streaming-agents">Gaeul: Umbrella repository for streaming agents&lt;/h2>
&lt;p>Another change is done on the &lt;a href="https://github.com/hwangsaeul/gaeul">Gaeul&lt;/a>. In the previous version, the module was in charge of edge streaming only. However, from the second version, it becomes a set of streaming agents; video source, relay, and even protocol conversion including transcoding. By analogy from the meaning of the word, it would be a very natural change for this module to handle the stream of data and video because &lt;em>Gaeul&lt;/em> means babbling brook in Korean.&lt;/p>
&lt;h2 id="new-architecture">New Architecture&lt;/h2>
&lt;p>In new H8L, there are three major repositories; Gaeul, Hwangsae, and Gaeguli.&lt;/p>
&lt;ul>
&lt;li>Hwangsae: SRT relay library&lt;/li>
&lt;li>Gaeguli: Video stream source library&lt;/li>
&lt;li>Gaeul: A set of video streaming services&lt;/li>
&lt;/ul>
&lt;p>Since Gaeul provides all of streaming agents, it will always require &lt;em>Hwangsae&lt;/em> and &lt;em>Gaeguli&lt;/em> depending on the feature it uses.&lt;/p>
&lt;p>&lt;img src="./featured-diagram.png" alt="System Overview">&lt;/p>
&lt;h2 id="running-h8l">Running H8L&lt;/h2>
&lt;p>Nightly builds are available as binary packages for Ubuntu 20.04.&lt;/p>
&lt;pre>&lt;code>$ sudo add-apt-repository ppa:hwangsaeul/nightly
$ sudo apt-get update
&lt;/code>&lt;/pre>&lt;p>Note that the PPA provides important packages; libsrt and gst-plugins-bad. Since Ubuntu 20.04 provides slightly old version of those packages, some features like stream-id and SRT option strings are not supported. SRT(=1.4.2) and gst-plugins-bad with some patches that will be provided by newer version of GStreamer should be installed before using H8L features. Using PPA may be more convenient to test and have experience of H8L than building from scratch. Surely, some enhancement patches of SRT and GStreamer are already submitted to the upstream and most of them are landed onto master branch or ready for landing. If you&amp;rsquo;d like to check the patches, you can refer to our forked repositories; &lt;a href="https://github.com/hwangsaeul/libsrt">libsrt&lt;/a> and &lt;a href="https://github.com/hwangsaeul/gst-plugins-bad">gst-plugins-bad&lt;/a>.&lt;/p>
&lt;h3 id="source">Source&lt;/h3>
&lt;p>The first agent of &lt;em>Gaeul&lt;/em> is &lt;code>gaeul2-source-agent&lt;/code> that is nomally simlilar to stream generator(or simply called as encoder).&lt;/p>
&lt;pre>&lt;code>$ sudo apt-get install gaeul2-source-agent
&lt;/code>&lt;/pre>&lt;h4 id="settings">Settings&lt;/h4>
&lt;p>Before running the source agent, we need to set configurations to specify video parameters and SRT options. The settings are consist of two parts; one main configuration and multiple channel configurations.&lt;/p>
&lt;p>&lt;strong>Main Configuration&lt;/strong>&lt;/p>
&lt;p>This configuration file is an entry point that provide capture device informations to the source agent. For the stream authentication, &lt;em>Stream ID&lt;/em> is mandatory for H8L&amp;rsquo;s source agent and &lt;code>uid&lt;/code> will be used for stream-id prefix for channels.&lt;/p>
&lt;p>&lt;code>channel-configs&lt;/code> option takes a list of absolute file paths that are channel configurations.&lt;/p>
&lt;pre>&lt;code>[org/hwangsaeul/Gaeul2/Source]
uid=&amp;quot;device0&amp;quot;
channel-configs=[&amp;quot;/etc/gaeul2/conf.d/ch0.ini&amp;quot;, &amp;quot;/etc/gaeul2/conf.d/ch1.ini&amp;quot;]
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Channel Configuration&lt;/strong>&lt;/p>
&lt;p>This sub-configuration describes what type of SRT stream will be sent from which video capture device. In theory, the source agent can have an infinite number of channel configurations, but it will be limited by hardware performance. Normally, it shouldn&amp;rsquo;t exceed 2 channels encoding for 4K 30fps, or equivalent video encoding parameters.&lt;/p>
&lt;p>The below is an example of a channel configuration.&lt;/p>
&lt;pre>&lt;code>[org/hwangsaeul/Gaeul2/Source/Channel]
name=&amp;quot;channel0&amp;quot;
source=&amp;quot;v4l2src&amp;quot;
device=&amp;quot;/dev/video0&amp;quot;
bitrate=2000000
fps=30
codec=&amp;quot;x264&amp;quot;
bitrate-control=&amp;quot;CBR&amp;quot;
resolution=&amp;quot;1920x1080&amp;quot;
target-uri=&amp;quot;srt://ip.address:port/?mode=caller&amp;quot;
passphrase=&amp;quot;&amp;quot;
pbkeylen=&amp;quot;AES-128&amp;quot;
prefer-hw-decoding=false
record-location=&amp;quot;/somewhare/recording-location&amp;quot;
&lt;/code>&lt;/pre>&lt;p>With &lt;code>uid&lt;/code> of a main configuration, &lt;code>name&lt;/code> option will be used to compose a stream-id for this channel stream. if &lt;code>device0&lt;/code> is given for the uid and &lt;code>channel0&lt;/code> is for the name, this video channel will have &lt;code>device0_channel0&lt;/code> stream id.&lt;/p>
&lt;h4 id="running">Running&lt;/h4>
&lt;p>Now, it&amp;rsquo;s time to run the source agent. If the configurations are provided correctly, user can choose D-Bus mode; &lt;code>session&lt;/code>, &lt;code>system&lt;/code> and &lt;code>none&lt;/code>.&lt;/p>
&lt;p>If &lt;code>none&lt;/code> is used, the agent will not try to acquire d-bus name. Regardless &lt;code>--dbus-type&lt;/code>, it will send stream or trying to connect to the given &lt;code>target-uri&lt;/code> of a channel configuration until SRT stream receiver is ready.&lt;/p>
&lt;pre>&lt;code>$ gaeul2-source-agent -c /etc/gaeul2/gaeul.ini --dbus-type=none
&lt;/code>&lt;/pre>&lt;h3 id="debugging">Debugging&lt;/h3>
&lt;p>If it is suspicious that the source agent sends a stream or not, the easiest way to check is to get log messages. Since all of H8L components follows GLib and GStreamer conventions, it shows log messages by setting two major environmental variables.&lt;/p>
&lt;pre>&lt;code>$ export G_MESSAGES_DEBUG=all
$ export GST_DEBUG=*:3
$ gaeul2-source-agent -c /etc/gaeul2/gaeul.ini --dbus-type=none
&lt;/code>&lt;/pre>&lt;p>Then, now user can get log messages on their console.&lt;/p>
&lt;h3 id="relay">Relay&lt;/h3>
&lt;p>The relay agent plays a role to distribute SRT stream from source to users. It provides stream authentication option to distinguish SRT session by stream-id. Surely, the authentication option can be disabled when it requires the compatiblity with the legacy SRT equipment or software.&lt;/p>
&lt;h4 id="settings-1">Settings&lt;/h4>
&lt;p>Unlike the source agent, the relay agent has a main configuration only.&lt;/p>
&lt;pre>&lt;code>[org/hwangsaeul/Gaeul2/Relay]
uid=&amp;quot;relay0&amp;quot;
sink-port=50010
source-port=60010
sink-latency=125
source-latency=125
external-ip=&amp;quot;xxx.xxx.xxx.xxx&amp;quot;
authentication=true
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>&lt;code>uid&lt;/code>: a unique id, it is used for identifying each relay service.&lt;/li>
&lt;li>&lt;code>sink-port&lt;/code>: a network port to be connected from a source agent.&lt;/li>
&lt;li>&lt;code>source-port&lt;/code>: a network port to be connected from a user or video stream consumer.&lt;/li>
&lt;li>&lt;code>sink-latency&lt;/code>, &lt;code>source-latency&lt;/code>: SRT latency value for each connection.&lt;/li>
&lt;li>&lt;code>external-ip&lt;/code>: usually, it is used for VM in cloud service that has an external address.&lt;/li>
&lt;li>&lt;code>authentication&lt;/code>: an option to inteprete SRT streamid or not.&lt;/li>
&lt;/ul>
&lt;h4 id="running-1">Running&lt;/h4>
&lt;p>If a configuration file is ready, it can be run with the below command. In a relay service, D-Bus API should be enabled to use a stream authentication feature. Here, it is assumed to use session-wide D-Bus API.&lt;/p>
&lt;pre>&lt;code>$ gaeul2-relay-agent -c /etc/gaeul2/gaeul.ini --dbus-type=session
&lt;/code>&lt;/pre>&lt;h4 id="srt-stream-authentication">SRT Stream authentication&lt;/h4>
&lt;p>The relay is relatively simple because of SRT-nature; content agnostic. However, it plays very important role as a live stream distributor. In current implmentation, the relay agent supports only SRT&amp;rsquo;s live mode.&lt;/p>
&lt;p>&lt;img src="./relay-authentication.png" alt="Stream Authentication in Relay">&lt;/p>
&lt;p>The relay provides a whitelist-based stream authentication mechanism. That means, the agent should know streamid before attempting to connect. Otherwise, the agent will reject stream connection.&lt;/p>
&lt;p>To allow a connection from source agent, the stream-id of source agent must be registered. Here, it assumed that the source agent uses &lt;code>device0_channel0&lt;/code> as its stream-id.&lt;/p>
&lt;pre>&lt;code>$ busctl call \
org.hwangsaeul.Gaeul2.Relay \
/org/hwangsaeul/Gaeul2/Relay \
org.hwangsaeul.Gaeul2.Relay \
AddSinkToken &amp;quot;s&amp;quot; &amp;quot;device0_chanel0&amp;quot;
&lt;/code>&lt;/pre>&lt;p>Then, if a user who has the unique id, &lt;code>admin0&lt;/code>, wants to get a video stream of the source agent, &lt;code>device0_channel0&lt;/code>, a source token should be registered too.&lt;/p>
&lt;pre>&lt;code>$ busctl call \
org.hwangsaeul.Gaeul2.Relay \
/org/hwangsaeul/Gaeul2/Relay \
org.hwangsaeul.Gaeul2.Relay \
AddSourceToken &amp;quot;ss&amp;quot; &amp;quot;admin0&amp;quot; &amp;quot;device0_channel0&amp;quot;
&lt;/code>&lt;/pre>&lt;h4 id="playing-srt-stream-via-hwangsae">Playing SRT stream via Hwangsae&lt;/h4>
&lt;p>Currently, there are few video players that support SRT and its streamid.&lt;/p>
&lt;ul>
&lt;li>VLC Nightly build (&amp;gt;= 4.0)&lt;/li>
&lt;li>GStreamer (&amp;gt;= 1.18)&lt;/li>
&lt;li>SRT Play Pro (iOS only)&lt;/li>
&lt;/ul>
&lt;p>If you are using GStreamer, you can test playing with the below command.&lt;/p>
&lt;pre>&lt;code>$ gst-launch-1.0 \
srtsrc uri=&amp;quot;srt://relay.ip:port?mode=caller&amp;quot; streamid=&amp;quot;#\!::u=admin0,r=device0_channel0&amp;quot; ! \
queue ! decodebin ! autovideosink
&lt;/code>&lt;/pre>&lt;h3 id="see-also">See also&lt;/h3>
&lt;p>H8L is not all about streaming video over SRT. It is actually designed to overcome unpredictable network in two major concerns. The first is how to stream high-quality video over high bandwidth capable network, and the second is to prevent video stuttering at a discernable level even if the quality is dropped. SRT dealt with the first issue very well by congestion control, but the second issue is complicated. Without media processing and network status prediction, it will be difficult to find solution. Here, we sugguest network adaptive streaming of H8L.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://col.la/h8ls">Netowrk Adaptive Streaming in H8L&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.collabora.com/news-and-blog/news-and-events/low-latency-streaming-of-security-feeds-with-srt-and-gstreamer.html">Low latency streaming of security video feeds with SRT and GStreamer&lt;/a> - The first implementation of H8L&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>This article is originally posted in &lt;a href="https://groou.com/2021/02/08/h8l-2nd/">Justin&amp;rsquo;s blog&lt;/a>&lt;/p></description></item><item><title>Blog: SK텔레콤, 요약 잘하는 AI모델 공개…'자연어이해' 기술 강화</title><link>/blog/news/20201210-summaryai/</link><pubDate>Thu, 10 Dec 2020 00:00:00 +0000</pubDate><guid>/blog/news/20201210-summaryai/</guid><description>
&lt;img src="/blog/news/20201210-summaryai/featured-kobart_hu4cb652d96ac68403c5eba4d6e583a0d7_27098_640x0_resize_q75_catmullrom.jpeg" width="640" height="334"/>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 650px">
&lt;img class="card-img-top" src="/blog/news/20201210-summaryai/featured-kobart_hu4cb652d96ac68403c5eba4d6e583a0d7_27098_900x600_fit_q75_catmullrom.jpeg" width="640" height="334">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
[사진=게티이미지뱅크]
&lt;small class="text-muted">&lt;br/>아주경제&lt;/small>&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>SK텔레콤 연구진들이 한국어 뉴스나 문서를 읽고 고품질 요약문을 만들어내는 능력이 뛰어난 인공지능(AI) 언어처리 모델을 조용히 공개했다. 이로써 SK텔레콤은 자연어처리(NLP) 분야 가운데 문장이나 글이 전달하는 의미를 짚는 &amp;lsquo;자연어이해(NLU·Natural Language Understanding)&amp;rsquo; 영역 기술력을 강화할 수 있게 됐다.&lt;/p>
&lt;p>10일 현재 SK텔레콤 테크(T3K) 센터가 운영하는 깃허브(GitHub) 저장소에는 &amp;lsquo;코바트(KoBART)&amp;lsquo;라는 개발 프로젝트의 소스코드가 공개돼 있다. 이는 작년 10월 공개된 &amp;lsquo;코버트(KoBERT)&amp;lsquo;와 올해 2월 공개된 &amp;lsquo;한국어 GPT-2(KoGPT2)&amp;lsquo;에 이어, SK텔레콤 연구진이 만들어 공개한 세 번째 AI 언어처리 모델이다.&lt;/p>
&lt;hr>
&lt;p>자세한 내용은 기사 원문에서 확인하세요. : &lt;a href="https://www.ajunews.com/view/20201210114639936">https://www.ajunews.com/view/20201210114639936&lt;/a>&lt;/p></description></item><item><title>Blog: 기업 고객의 원활한 클라우드 활용 돕는다. SKT, 'TACO' 출시</title><link>/blog/news/20201105-taco/</link><pubDate>Thu, 05 Nov 2020 00:00:00 +0000</pubDate><guid>/blog/news/20201105-taco/</guid><description>
&lt;img src="/blog/news/20201105-taco/featured-taco_hu95a4ca241f7e6dedc80c88816e5cae20_243999_640x0_resize_q75_catmullrom.jpeg" width="640" height="447"/>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 610px">
&lt;img class="card-img-top" src="/blog/news/20201105-taco/featured-taco_hu95a4ca241f7e6dedc80c88816e5cae20_243999_900x600_fit_q75_catmullrom.jpeg" width="600" height="419">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
ⓒ데일리포스트=이미지 제공 / SK텔레콤
&lt;small class="text-muted">&lt;br/>데일리포스트&lt;/small>&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>기업 고객의 원활한 클라우드 활용을 돕기위해 SK텔레콤에서 B2B 전용 플랫폼 ‘TACO’(타코)를 출시한다.&lt;/p>
&lt;p>TACO(SKT Autonomous Cloud Orchestrator)는 SKT가 자체개발한 클라우드 관리 플랫폼으로, 컨테이너(Container) 기술과 쿠버네티스(Kubernetes) 기술을 적용해 우수한 확장성과 유연성을 보유하고 있다.&lt;/p>
&lt;hr>
&lt;p>자세한 내용은 기사 원문에서 확인하세요. : &lt;a href="https://www.thedailypost.kr/news/articleView.html?idxno=77236">글로벌 뉴스 미디어 채널 데일리포스트&lt;/a>&lt;/p></description></item><item><title>Blog: SK텔레콤은 '언어신동 AI’에 어떻게 한국어를 가르쳤을까</title><link>/blog/news/20201012-languageai/</link><pubDate>Mon, 12 Oct 2020 00:00:00 +0000</pubDate><guid>/blog/news/20201012-languageai/</guid><description>
&lt;img src="/blog/news/20201012-languageai/featured-kobert_hu54cc96cd14e0d09d4c206cb19da9e56d_37276_640x0_resize_q75_catmullrom.jpeg" width="640" height="358"/>
&lt;p>SK텔레콤 &amp;lsquo;AI랭귀지테크랩스(ALT Labs)&amp;rsquo; 연구원들은 한국어를 잘 다루는 AI &amp;lsquo;코버트(KoBERT)&amp;lsquo;와 &amp;lsquo;KoGPT2&amp;rsquo;를 잇따라 개발했다.&lt;/p>
&lt;p>KoBERT의 원형은 구글이 지난 2018년 10월 공개한 버트(BERT)이며, KoGPT2의 원형은 오픈AI가 지난해 공개한 GPT-2다. BERT는 영어 읽기, GPT-2는 영어 쓰기에 특출난 &amp;lsquo;언어 신동&amp;rsquo; AI로 유명세를 얻었다. SK텔레콤은 이들에게 한국어를 열심히 가르친 결과, 내부 업무에 활용해 성과를 얻었고, 지난해 10월 KoBERT를, 올해 2월엔 KoGPT2를 각각 오픈소스로 공개했다.&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 650px">
&lt;img class="card-img-top" src="/blog/news/20201012-languageai/featured-kobert_hu54cc96cd14e0d09d4c206cb19da9e56d_37276_900x600_fit_q75_catmullrom.jpeg" width="640" height="358">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
KoBERT와 KoGPT2 개발에 참여한 SK텔레콤 AI랭귀지테크랩스(ALT Labs) 연구원들. (왼쪽위부터 시계방향으로) 전희원 리서치엔지니어, 김진 리서치엔지니어, 데이비스 에릭 하트만 소장, 김태윤 리더. [사진=SK텔레콤 제공]
&lt;small class="text-muted">&lt;br/>아주경제&lt;/small>&lt;/p>
&lt;/div>
&lt;/div>
&lt;hr>
&lt;p>자세한 내용은 기사 원문에서 확인하세요. : &lt;a href="https://www.ajunews.com/view/20201011091342159">https://www.ajunews.com/view/20201011091342159&lt;/a>&lt;/p></description></item><item><title>Blog: 블로그 작성 방법</title><link>/blog/sample/how-to/</link><pubDate>Sun, 30 Aug 2020 00:00:00 +0000</pubDate><guid>/blog/sample/how-to/</guid><description>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>SK텔레콤 오픈소스 포털의 블로그는 오픈소스에 관한 글을 공유합니다.&lt;/p>
&lt;p>누구나 글을 작성할 수 있습니다.&lt;/p>
&lt;p>다음 페이지의 가이드를 참고하시기 바랍니다. : &lt;a href="https://github.com/sktelecom/sktelecom.github.io/blob/master/docs/blog.md">블로그 작성 방법&lt;/a>&lt;/p>
&lt;/div></description></item><item><title>Blog: 샘플 블로그입니다.</title><link>/blog/sample/sample-post/</link><pubDate>Sat, 29 Aug 2020 00:00:00 +0000</pubDate><guid>/blog/sample/sample-post/</guid><description>
&lt;img src="/blog/sample/sample-post/featured-sunset-get_hu69849a7cdb847c2393a7b3a7f6061c86_387442_640x0_resize_catmullrom_2.png" width="640" height="253"/>
&lt;p>Text can be &lt;strong>bold&lt;/strong>, &lt;em>italic&lt;/em>, or &lt;del>strikethrough&lt;/del>. &lt;a href="https://github.com">Links&lt;/a> should be blue with no underlines (unless hovered over).&lt;/p>
&lt;p>There should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs.&lt;/p>
&lt;p>There should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs.&lt;/p>
&lt;blockquote>
&lt;p>There should be no margin above this first sentence.&lt;/p>
&lt;p>Blockquotes should be a lighter gray with a border along the left side in the secondary color.&lt;/p>
&lt;p>There should be no margin below this final sentence.&lt;/p>
&lt;/blockquote>
&lt;h2 id="first-header">First Header&lt;/h2>
&lt;p>This is a normal paragraph following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.&lt;/p>
&lt;p>Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.&lt;/p>
&lt;p>On big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.&lt;/p>
&lt;p>Lorem markdownum tuta hospes stabat; idem saxum facit quaterque repetito
occumbere, oves novem gestit haerebat frena; qui. Respicit recurvam erat:
pignora hinc reppulit nos &lt;strong>aut&lt;/strong>, aptos, ipsa.&lt;/p>
&lt;p>Meae optatos &lt;em>passa est&lt;/em> Epiros utiliter &lt;em>Talibus niveis&lt;/em>, hoc lata, edidit.
Dixi ad aestum.&lt;/p>
&lt;h2 id="header-2">Header 2&lt;/h2>
&lt;blockquote>
&lt;p>This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.&lt;/p>
&lt;/blockquote>
&lt;h3 id="header-3">Header 3&lt;/h3>
&lt;pre>&lt;code>This is a code block following a header.
&lt;/code>&lt;/pre>&lt;h4 id="header-4">Header 4&lt;/h4>
&lt;ul>
&lt;li>This is an unordered list following a header.&lt;/li>
&lt;li>This is an unordered list following a header.&lt;/li>
&lt;li>This is an unordered list following a header.&lt;/li>
&lt;/ul>
&lt;h5 id="header-5">Header 5&lt;/h5>
&lt;ol>
&lt;li>This is an ordered list following a header.&lt;/li>
&lt;li>This is an ordered list following a header.&lt;/li>
&lt;li>This is an ordered list following a header.&lt;/li>
&lt;/ol>
&lt;h6 id="header-6">Header 6&lt;/h6>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>What&lt;/th>
&lt;th>Follows&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>A table&lt;/td>
&lt;td>A header&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>A table&lt;/td>
&lt;td>A header&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>A table&lt;/td>
&lt;td>A header&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;p>There&amp;rsquo;s a horizontal rule above and below this.&lt;/p>
&lt;hr>
&lt;p>Here is an unordered list:&lt;/p>
&lt;ul>
&lt;li>Salt-n-Pepa&lt;/li>
&lt;li>Bel Biv DeVoe&lt;/li>
&lt;li>Kid &amp;lsquo;N Play&lt;/li>
&lt;/ul>
&lt;p>And an ordered list:&lt;/p>
&lt;ol>
&lt;li>Michael Jackson&lt;/li>
&lt;li>Michael Bolton&lt;/li>
&lt;li>Michael Bublé&lt;/li>
&lt;/ol>
&lt;p>And an unordered task list:&lt;/p>
&lt;ul>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> Create a sample markdown document&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> Add task lists to it&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Take a vacation&lt;/li>
&lt;/ul>
&lt;p>And a &amp;ldquo;mixed&amp;rdquo; task list:&lt;/p>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> Steal underpants&lt;/li>
&lt;li>?&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Profit!&lt;/li>
&lt;/ul>
&lt;p>And a nested list:&lt;/p>
&lt;ul>
&lt;li>Jackson 5
&lt;ul>
&lt;li>Michael&lt;/li>
&lt;li>Tito&lt;/li>
&lt;li>Jackie&lt;/li>
&lt;li>Marlon&lt;/li>
&lt;li>Jermaine&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>TMNT
&lt;ul>
&lt;li>Leonardo&lt;/li>
&lt;li>Michelangelo&lt;/li>
&lt;li>Donatello&lt;/li>
&lt;li>Raphael&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Definition lists can be used with Markdown syntax. Definition terms are bold.&lt;/p>
&lt;dl>
&lt;dt>Name&lt;/dt>
&lt;dd>Godzilla&lt;/dd>
&lt;dt>Born&lt;/dt>
&lt;dd>1952&lt;/dd>
&lt;dt>Birthplace&lt;/dt>
&lt;dd>Japan&lt;/dd>
&lt;dt>Color&lt;/dt>
&lt;dd>Green&lt;/dd>
&lt;/dl>
&lt;hr>
&lt;p>Tables should have bold headings and alternating shaded rows.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Artist&lt;/th>
&lt;th>Album&lt;/th>
&lt;th>Year&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Michael Jackson&lt;/td>
&lt;td>Thriller&lt;/td>
&lt;td>1982&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Prince&lt;/td>
&lt;td>Purple Rain&lt;/td>
&lt;td>1984&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Beastie Boys&lt;/td>
&lt;td>License to Ill&lt;/td>
&lt;td>1986&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>If a table is too wide, it should scroll horizontally.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Artist&lt;/th>
&lt;th>Album&lt;/th>
&lt;th>Year&lt;/th>
&lt;th>Label&lt;/th>
&lt;th>Awards&lt;/th>
&lt;th>Songs&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Michael Jackson&lt;/td>
&lt;td>Thriller&lt;/td>
&lt;td>1982&lt;/td>
&lt;td>Epic Records&lt;/td>
&lt;td>Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R&amp;amp;B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical&lt;/td>
&lt;td>Wanna Be Startin&amp;rsquo; Somethin', Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Prince&lt;/td>
&lt;td>Purple Rain&lt;/td>
&lt;td>1984&lt;/td>
&lt;td>Warner Brothers Records&lt;/td>
&lt;td>Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R&amp;amp;B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal&lt;/td>
&lt;td>Let&amp;rsquo;s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I&amp;rsquo;m a Star, Purple Rain&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Beastie Boys&lt;/td>
&lt;td>License to Ill&lt;/td>
&lt;td>1986&lt;/td>
&lt;td>Mercury Records&lt;/td>
&lt;td>noawardsbutthistablecelliswide&lt;/td>
&lt;td>Rhymin &amp;amp; Stealin, The New Style, She&amp;rsquo;s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;p>Code snippets like &lt;code>var foo = &amp;quot;bar&amp;quot;;&lt;/code> can be shown inline.&lt;/p>
&lt;p>Also, &lt;code>this should vertically align&lt;/code> &lt;del>&lt;code>with this&lt;/code>&lt;/del> &lt;del>and this&lt;/del>.&lt;/p>
&lt;p>Code can also be shown in a block element.&lt;/p>
&lt;pre>&lt;code>foo := &amp;quot;bar&amp;quot;;
bar := &amp;quot;foo&amp;quot;;
&lt;/code>&lt;/pre>&lt;p>Code can also use syntax highlighting.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">input&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#4e9a06">`var foo = &amp;#34;bar&amp;#34;;`&lt;/span>
&lt;span style="color:#000">lexer&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">lexers&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Get&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;javascript&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">iterator&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">_&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">lexer&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Tokenise&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">nil&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">input&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">style&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">styles&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Get&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;github&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">formatter&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">html&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">New&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">html&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">WithLineNumbers&lt;/span>&lt;span style="color:#000;font-weight:bold">())&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">buff&lt;/span> &lt;span style="color:#000">bytes&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Buffer&lt;/span>
&lt;span style="color:#000">formatter&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Format&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">buff&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">style&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">iterator&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">fmt&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Println&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">buff&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">String&lt;/span>&lt;span style="color:#000;font-weight:bold">())&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this.
&lt;/code>&lt;/pre>&lt;p>Inline code inside table cells should still be distinguishable.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Language&lt;/th>
&lt;th>Code&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Javascript&lt;/td>
&lt;td>&lt;code>var foo = &amp;quot;bar&amp;quot;;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Ruby&lt;/td>
&lt;td>&lt;code>foo = &amp;quot;bar&amp;quot;{&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;p>Small images should be shown at their actual size.&lt;/p>
&lt;p>&lt;img src="https://placekitten.com/g/300/200/" alt="">&lt;/p>
&lt;p>Large images should always scale down and fit in the content container.&lt;/p>
&lt;p>&lt;img src="https://placekitten.com/g/1200/800/" alt="">&lt;/p>
&lt;h2 id="components">Components&lt;/h2>
&lt;h3 id="alerts">Alerts&lt;/h3>
&lt;p>
&lt;div class="alert alert-primary" role="alert">
This is an alert.
&lt;/div>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note:&lt;/h4>
This is an alert with a title.
&lt;/div>
&lt;div class="alert alert-primary" role="alert">
This is a successful alert.
&lt;/div>
&lt;div class="alert alert-primary" role="alert">
This is a warning!
&lt;/div>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Warning!&lt;/h4>
This is a warning with a title!
&lt;/div>
&lt;/p>
&lt;h2 id="sizing">Sizing&lt;/h2>
&lt;p>Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.&lt;/p>
&lt;h3 id="parameters-available">Parameters available&lt;/h3>
&lt;p>Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.&lt;/p>
&lt;h3 id="using-pixels">Using pixels&lt;/h3>
&lt;p>Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.&lt;/p>
&lt;h3 id="using-rem">Using rem&lt;/h3>
&lt;p>Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.&lt;/p>
&lt;h2 id="memory">Memory&lt;/h2>
&lt;p>Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.&lt;/p>
&lt;h3 id="ram-to-use">RAM to use&lt;/h3>
&lt;p>Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.&lt;/p>
&lt;h3 id="more-is-better">More is better&lt;/h3>
&lt;p>Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.&lt;/p>
&lt;h3 id="used-ram">Used RAM&lt;/h3>
&lt;p>Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.&lt;/p>
&lt;pre>&lt;code>This is the final element on the page and there should be no margin below this.
&lt;/code>&lt;/pre>&lt;h2 id="including-images">Including images&lt;/h2>
&lt;p>Here&amp;rsquo;s an image (&lt;code>featured-sunset-get.png&lt;/code>) that includes a byline and a caption.&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 610px">
&lt;img class="card-img-top" src="/blog/sample/sample-post/featured-sunset-get_hu69849a7cdb847c2393a7b3a7f6061c86_387442_600x300_fill_catmullrom_smart1_2.png" width="600" height="300">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
Fetch and scale an image in the upcoming Hugo 0.43.
&lt;small class="text-muted">&lt;br/>Photo: Riona MacNamara / CC-BY-CA&lt;/small>&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>The front matter of this post specifies properties to be assigned to all image resources:&lt;/p>
&lt;pre>&lt;code>resources:
- src: &amp;quot;**.{png,jpg}&amp;quot;
title: &amp;quot;Image #:counter&amp;quot;
params:
byline: &amp;quot;Photo: Riona MacNamara / CC-BY-CA&amp;quot;
&lt;/code>&lt;/pre>&lt;p>To include the image in a page, specify its details like this:&lt;/p>
&lt;pre>&lt;code>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 610px">
&lt;img class="card-img-top" src="/blog/sample/sample-post/featured-sunset-get_hu69849a7cdb847c2393a7b3a7f6061c86_387442_600x300_fill_catmullrom_smart1_2.png" width="600" height="300">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
Fetch and scale an image in the upcoming Hugo 0.43.
&lt;small class="text-muted">&lt;br/>Photo: Riona MacNamara / CC-BY-CA&lt;/small>&lt;/p>
&lt;/div>
&lt;/div>
&lt;/code>&lt;/pre>&lt;p>The image will be rendered at the size and byline specified in the front matter.&lt;/p>
&lt;hr></description></item><item><title>Blog: 소스 코드 내 저작권 표시 방법</title><link>/blog/2020/20200812-copyright-license/</link><pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate><guid>/blog/2020/20200812-copyright-license/</guid><description>
&lt;img src="/blog/2020/20200812-copyright-license/featured_copyright_hu3c20e8f1f30640c88b46434ba146f1f1_89522_640x0_resize_catmullrom_2.png" width="640" height="299"/>
&lt;blockquote>
&lt;p>안녕하세요.&lt;/p>
&lt;p>오픈소스 분야의 저명한 변호사인 &lt;a href="https://matija.suklje.name/">Matija Šuklje&lt;/a>는 최근 소스 코드 내 저작권 표시가 필요한 이유와 올바르게 작성하는 방법을 &lt;a href="https://matija.suklje.name/how-and-why-to-properly-write-copyright-statements-in-your-code">소개&lt;/a>하였습니다.&lt;/p>
&lt;p>아래 글은 위의 원글을 기반으로 작성하였습니다. 대부분 원글을 그대로 번역하여 저자의 의도가 충실히 전달되도록 하였습니다.&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;p>개발자를 위한 간단한 저작권 표시 가이드로 생각하고 시작하였으나, 저작권 정보 표시에 대한 통일된 가이드가 없었기 때문에 가이드 작성이 쉽지 않았다. 결국 새로 하나 작성하기로 하였다.&lt;/p>
&lt;p>다음 사항을 고려하며 균형을 맞춰서 작성하려고 하였다.&lt;/p>
&lt;ol>
&lt;li>무엇을 하면 되는지만 간단히 알고 싶어하는 개발자를 위해&lt;/li>
&lt;li>단지 모범 사례 뿐만 아니라 그 이면에 있는 이유에 대해서도 이해하고자 하는 FOSS 컴플라이언스 담당자와 법률가를 위해&lt;/li>
&lt;/ol>
&lt;p>시간이 극단적으로 없다면, &lt;a href="#tldr">TL;DR&lt;/a>에서 최소한의 가이드를 확인하라. 2분 정도의 시간이 있다면 아래의 &lt;a href="#how-to-write-a-good-copyright-statement-and-license-notice">actual HowTo a bit lower below&lt;/a>를 읽어라.&lt;/p>
&lt;p>물론, 20분 정도의 시간이 있다면, 처음부터 끝까지 한번 읽어보는 것이 제일 좋다.&lt;/p>
&lt;h1 id="tldr">TL;DR&lt;/h1>
&lt;p>아래 포맷의 저작권 및 라이선스 표시 당신이 작성한 모든 소스 코드 파일에 추가하라.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#204a87;font-weight:bold">SPDX-FileCopyrightText&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">© {$year_of_file_creation} {$name_of_copyright_holder} &amp;lt;{$contact}&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">SPDX-License-Identifier&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>{&lt;span style="color:#000">$SPDX_license_name}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>예를 들어, 내가 오늘 소스 코드 파일을 하나 작성하였고, 이를 [BSD-3-Clause license][bsd-3-clause] 라이선스로 공개하였다면, 다음과 같은 내용을 파일 상단 주석 부분에 추가한다.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#204a87;font-weight:bold">SPDX-FileCopyrightText&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">© 2020 Matija Šuklje &amp;lt;matija@suklje.name&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">SPDX-License-Identifier&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">BSD-3-Clause&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>참고로 [REUSE.software][reuse] 프로젝트의 가이드를 따르면 모든 파일에 적절한 표시가 되었는지 확인할 수 있다.&lt;/p>
&lt;!--TODO: enable once this style gets implemented in https://github.com/fsfe/reuse-tool/issues/329
!!! tip "Using the REUSE helper tool"
If you will be doing this for many files, it makes sense to use tooling. Luckily the [REUSE helper tool][reuse_tool] can help with that as well.
To implement the example above, I would call the following:
```.fish
reuse addheader --copyright-style spdx-symbol --copyright "Matija Šuklje &lt;matija@suklje.name>" --year (date +%Y)
```
And while you are at it, check the [other features of the REUSE helper tool][reuse_tool], to manage also licensing info.
-->
&lt;h1 id="저작권이란">저작권이란?&lt;/h1>
&lt;p>&lt;strong>저작권&lt;/strong>은 ([베른 협약][berne] 이후) 저작자가 저작물 만들 때 &lt;strong>자동으로 생성&lt;/strong>된다. 모든 저작물은 저작권에 의해 보호되며, 저작권 보유자에게 저작물에 대한 독점적인 권한이 부여된다. 따라서 당신의 저작물(소스 코드, 텍스트, 이미지, 기타 미디어 등)을 다른 사용자가 사용할 수 있게 하려면 그들에게 라이선스를 부여해야 한다. 라이선스의 사전적 정의는 &amp;ldquo;특정 권리를 실행하기 위해 자격이 있는 기관으로부터 받은 허가&amp;quot;이며, 이러한 허가 없이 특정 권리를 실행하는 것은 저작권 침해와 같은 불법 행위가 된다.&lt;/p>
&lt;p>마찬가지로 당신이 다른 사람의 소스 코드를 복사, 수정 등의 작업을 하려면 &lt;strong>필요한 권한을 부여 받아야&lt;/strong> 한다. 즉, 라이선스를 받아야 한다. 만약, 그 라이선스가 권리 실행 허가 조건으로 특정 의무를 요구한다면, 당신은 권리 실행을 위해 그 의무사항도 따라야만 한다.&lt;/p>
&lt;p>어쨌든, 저작권법의 기본 요건을 준수해야 하며, 이를 위해서는 최소한 다음 두 가지가 필요한다.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>저작자 표시 (attribution)&lt;/strong> : 저작권 보유자 및/또는 저자를 명시한다. (특히 도덕적 권리를 인정하는 관할권에서)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>라이선스 (license)&lt;/strong> : 라이선스는 저작권 보유자 이외의 다른 사람에게 코드를 사용할 권한을 부여하는 유일한 방법이기 때문에 라이선스를 고지하고 전체 라이선스 텍스트를 제공하는 것이 좋다. 이는 당신이 내보내는 Outbound 라이선스나 (복사된 코드나 라이브러리 같은 3rd party 저작물을 사용하면서) 다른 이로부터 받는 Inbound 라이선스 모두에 해당한다.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="alert alert-success" role="alert">
&lt;h4 class="alert-heading">Inbound vs. Outbound 라이선스&lt;/h4>
당신이 사용자(downstream)에게 부여한 라이선스를 Outbound 라이선스라고 부릅니다. 이는 당신으로부터 흘러나오는(out) 코드의 권한을 다루기 때문이다. 반대로, (동일한 코드의) 사용자 입장에서는 그들에게 흘러들어오는 (In) 코드의 권한을 다루기 때문에 Inbound 라이선스로 간주한다.
간단히 말해, 유입되는 권한을 설명하는 라이선스를 Inbound 라이선스라고 하고, 유출되는 권한을 설명하는 라이선스를 Outbound 라이선스라고 한다.
다행인 점은 저작자 표시는 저자의 권리이지 의무는 아닙니다. 또한 사용자는 저자가 저작자 표시 권리를 사용한 경우에만 이를 유지해야 하는 의무가 있다. 즉, 저자가 저작자 표시를 하지 않았을 때에는 사용자가 이를 직 표시하려고 수고하지 않아도 된다.
&lt;/div>
&lt;h1 id="왜-저작권-표시를-해야-하는가">왜 저작권 표시를 해야 하는가?&lt;/h1>
&lt;p>1989년 베른 협약에 가입하기 전까지 미국 저작권법은 저작물을 보호하려면 명시적인 저작권 표시를 요구하였다. 그러나 베른 협약으로 저작권 표시를 하지 않아도 저작권은 자동으로 생성된다. 그럼에도 저작권 표시는 유용한다.&lt;/p>
&lt;div class="alert alert-success" role="alert">
저작권 표시가 법에 따라 요구되는 것은 아니지만, 실제로는 해당 저작물의 저작권이 누구에게 있는지에 대한 증거로서 매우 유용한다. 또한, 이는 컴플라이언스 측면이나 코드 추적을 위해서도 큰 도움이 된다.
&lt;/div>
&lt;p>저작권 표시는 실질적으로 다음과 같은 이유로 필요한다.&lt;/p>
&lt;ol>
&lt;li>대부분의 라이선스가 저작권 표시를 요구한다.&lt;/li>
&lt;li>라이선스에서 요구하지 않더라도 대부분의 관할권의 저작권 법률에서 요구한다.&lt;/li>
&lt;li>(이러한 요구가 없더라도) 사용자는 법적 또는 기술적인 이유로 원저작자에게 연락하기를 원할 수도 있다.&lt;/li>
&lt;/ol>
&lt;p>따라서, 저작물에 저작자의 이름과 연락처 정보를 포함하는 것은 의미가 있다.&lt;/p>
&lt;h1 id="저작권-표시-및-라이선스-고지의-올바른-방법">저작권 표시 및 라이선스 고지의 올바른 방법&lt;/h1>
&lt;h2 id="저작권-표시">저작권 표시&lt;/h2>
&lt;p>좋은 저작권 표시는 다음 정보로 구성되어야 한다.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>​&lt;a href="https://haksung.gitbook.io/oss/research/license/copyright-statements#c">© 기호&lt;/a>​&lt;/p>
&lt;/li>
&lt;li>
&lt;p>연도 : 처음 소스 코드 파일을 작성한 연도이다. 한번 작성했으면 &lt;a href="https://haksung.gitbook.io/oss/research/license/copyright-statements#undefined-6">더 수정하지 마라&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>저작권 보유자 이름 : 일반적으로 저자이지만, 저자의 고용주일 수 있다. 또한, CLA에 따라 다른 법인이나 개인이 될 수도 있다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>​&lt;a href="https://haksung.gitbook.io/oss/research/license/copyright-statements#undefined-8">유효한 연락처&lt;/a> : 저작권 보유자에게 연락할 수 있는 정보&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>예를 들어, 오늘 소스 코드 파일을 작성하였다면 다음과 같이 저작권 표시를 파일 상단 헤더 부분에 추가한다.&lt;/p>
&lt;pre>&lt;code>© 2020 Matija Šuklje &amp;lt;matija@suklje.name&amp;gt;
&lt;/code>&lt;/pre>&lt;h2 id="라이선스-고지">라이선스 고지&lt;/h2>
&lt;p>또한, 코드를 공개하면서 라이선스가 무엇인지 알리는 것도 매우 중요한다. &lt;a href="https://spdx.org/ids">SPDX ID&lt;/a>를 사용하면 코드의 라이선스를 명확하게 알릴 수 있다. 라이선스 고지가 명확하지 않으면 이를 보는 사용자에게 혼란을 야기시킬 수 있다.&lt;/p>
&lt;h2 id="reusesoftware">REUSE.software&lt;/h2>
&lt;p>​&lt;a href="https://reuse.software/">REUSE.software&lt;/a> 프로젝트는 SPDX tag를 사용해서 저작권 표시와 라이선스 고지를 작성하는 Best Practice를 제공한다.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>저작권 표시 tag : SPDX-FileCopyrightText&lt;/p>
&lt;/li>
&lt;li>
&lt;p>라이선스 고지 tag : SPDX-License-Identifier&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>아래의 예는 위의 모든 사항을 고려하고 SPDX 및 REUSE.software 요구사항을 모두 준수하는 저작권 표시 및 라이선스 고지이다.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#204a87;font-weight:bold">SPDX-FileCopyrightText&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">© 2020 Matija Šuklje &amp;lt;matija@suklje.name&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">SPDX-License-Identifier&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">BSD-3-Clause&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>이제 당신이 작성한 모든 소스 코드 파일에 이러한 주석이 포함되었는지 확인하라!&lt;/p>
&lt;h1 id="faq">FAQ&lt;/h1>
&lt;h2 id="왜-연도를-표시해야-하는가">왜 연도를 표시해야 하는가?&lt;/h2>
&lt;p>어떤 사람들은 연도를 생략하고 단순하게 작성하는 게 오히려 저작권 표시를 유지하기 쉬울 것이라고 주장한다. 실제로 이는 Microsoft와 GitHub의 정책이기도 한다.&lt;/p>
&lt;p>연도를 표시하지 않는 게 작업을 크게 단순화한다는 데에는 동의하지만, 이를 유지한다면 코드 베이스에서의 모호한 타임라인을 확인하는 데 도움이 된다. 또한, 발명이 처음으로 일반인에게 언제 공개되었는지를 알아내는데 유용할 수 있다. 특히 특허 방어에 유용하게 사용될 수 있다.&lt;/p>
&lt;p>이런 사항들을 고려하여 Liferay의 새로운 정책에서는 파일 생성 연도를 작성하고, 연도를 더 변경하지 않다.&lt;/p>
&lt;h2 id="왜-연도-표시를-변경하지-말아야-하는가">왜 연도 표시를 변경하지 말아야 하는가?&lt;/h2>
&lt;p>다음과 같은 저작권 표시를 보았을 거다.&lt;/p>
&lt;pre>&lt;code>Copyright (C) 1992, 1995, 2000, 2001, 2003 CompanyX Inc.
&lt;/code>&lt;/pre>&lt;p>이렇게 계속해서 연도를 추가하는 건 이렇게 하면 저작권 보호 기간을 연장할 수 있다는 생각이 있기 때문이며, 실제 널리 행해 지고 있다. 하지만, 불행하게도 이런 작업은 쓸모가 없고, 오히려 해가 될 도 있다.&lt;/p>
&lt;p>게다가 새로운 변경이나 기여를 받을 때마다 이렇게 그 연도를 추가하는 행위를 법적으로 본다면 논란의 여지가 있다. 문제는 모든 기여가 저작권을 주장할 수 있을 정도로 독창적이거나 규모가 있지 않다. 따라서, 문제 소지를 없애려면 모든 기여에 대해 법률에 따라 저작권 보호를 받을 수 있을 만큼 독창적인지 여부를 먼저 판단하고, 그에 따라 저작권 표시에 연도를 추가해야할 것이다.아&lt;/p>
&lt;p>반면에 저작권은 저자의 사망 이후 (혹은 저작권자가 법인일 경우, 발행 이후) 최소 50년 (보통 70년) 동안 지속된다. 따라서, 굳이 저작권 표시에 연도를 계속해서 추가하지 않아도 보호 기간 만료 때문에 저작권을 주장하지 못하게 될 위험은 매우 낮다.&lt;/p>
&lt;p>게다가, 일반적으로 하나의 소스 코드 파일은 소프트웨어를 구성하는 수많은 파일 중 하나일 뿐이다. 소프트웨어가 성장해가면서 새롭게 파일이 추가될 텐데, 그때 새로운 파일에 새로운 작성 연도를 추가해간다면 전체 저작물로서의 소프트웨어에는 최신 연도의 저작권 표시가 이미 포함되고 있는 거다.&lt;/p>
&lt;div class="alert alert-success" role="alert">
&lt;h4 class="alert-heading">Git/VCS 히스토리를 더럽히지 마라&lt;/h4>
만약 매년 모든 파일에 연도 표시를 새롭게 추가한다면 이로 인해 Git/VCS 히스토리가 불필요하게 길어지게 되고, 저장소 공간을 소비하며, 정작 중요한 정보를 찾을 때 방해가 될 수 있다.
&lt;/div>
&lt;h2 id="연도를-범위로-표시하는-건-어떤가요">연도를 범위로 표시하는 건 어떤가요?&lt;/h2>
&lt;p>연도를 범위로 표시하는 것(예: 1999-2020)도 매년 연도 표시를 변경해줘야 하기 때문에 위의 질문에서 언급한 모든 사항이 동일하게 적용된다.&lt;/p>
&lt;p>어떤 경우는 &amp;lsquo;{$year}-present&amp;rsquo;와 같은 형태로 범위를 지정하기도 한다. 이 또한 위에서 언급한 사항들이 대부분 적용되며, 추가로 또 다른 혼란을 줄 수 있다. &amp;lsquo;present&amp;rsquo;가 의미하는 것은 추상적이다. &amp;lsquo;present&amp;rsquo;는 어떤 것을 의미하는 걸까요?&lt;/p>
&lt;ul>
&lt;li>
&lt;p>파일이 마지막으로 수정 시간?&lt;/p>
&lt;/li>
&lt;li>
&lt;p>패키지가 릴리즈된 시간?&lt;/p>
&lt;/li>
&lt;li>
&lt;p>처음 다운로드 한 시간?&lt;/p>
&lt;/li>
&lt;li>
&lt;p>마지막으로 실행한 시간?&lt;/p>
&lt;/li>
&lt;li>
&lt;p>아니면 바로 지금?&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>이처럼 &amp;lsquo;present&amp;rsquo;는 전혀 도움이 되지 않는 표시이다.&lt;/p>
&lt;h2 id="gitmercurial이-저작권-정보를-추적하는데-더-좋지-않는가">Git/Mercurial이 저작권 정보를 추적하는데 더 좋지 않는가?&lt;/h2>
&lt;p>항상 그렇지는 않다. Git (및 다른 VCS)은 메타데이터 관리에 뛰어나지만, 항상 이 의존하는 것은 주의해야 한다.&lt;/p>
&lt;p>먼저 Git은 &amp;lsquo;Committer&amp;rsquo; 필드와 별개로 &amp;lsquo;Author&amp;rsquo; 필드가 있다. 기여자마다 &amp;lsquo;Author&amp;rsquo; 필드에 제각각의 값을 포함시킬 뿐더러, &amp;lsquo;Author&amp;rsquo; 필드에 입력된 사람이 실제 저자라고 가정하여도 저자는 저작권 보유자가 아닐 수도 있다.&lt;/p>
&lt;p>더 중요하게는, 파일이 저장소에서 옮기게 되면 메타데이터는 사라집니다. 소스 코드만 압축해서 배포한다거나, 저장소를 fork 혹은 rebase하는 방식으로 각 파일을 새로운 코드 베이스로 복사하면 이전까지의 추적 데이터는 더 이상 확인할 수 없다.&lt;/p>
&lt;p>이러한 문제들은 모든 파일에 저작권 및 라이선스 정보를 표시하면 해결된다. &lt;a href="https://reuse.software/">REUSE.software&lt;/a>의 Best Practice는 이를 아주 잘 처리한다.&lt;/p>
&lt;h2 id="왜--기호를-사용하는가">왜 © 기호를 사용하는가?&lt;/h2>
&lt;p>어떤 사람은 &amp;ldquo;Copyright&amp;quot;라는 영어 단어가 더 자주 사용되고, 이미 많은 사람이 익숙하다고 주장할 수도 있지만, 실제로 저작권법을 보면 &amp;ldquo;©&amp;rdquo; (Copyright Sign)을 사용하는 것이 저작권 진술을 위한 유일한 방법임을 알 수 있다.&lt;/p>
&lt;div class="alert alert-success" role="alert">
EU에서의 한 예로, 슬로베니아의 ZASP §175. (1)은 독점적 저작권 보유자가 자신의 저작물을 표시하기 위해 &amp;ldquo;(c)&amp;rdquo; 또는 &amp;ldquo;©&amp;quot;로 표시할 수 있다고 명시하고 있다.
반면에 미국에서는 17 U.S. Code § 401. (b)(1) 에서는 다음과 같이 저작물 표시 방법을 지정하고 있다.
&amp;ldquo;the symbol © (the letter C in a circle), or the word “Copyright”, or the abbreviation “Copr.”&amp;rdquo;
&lt;/div>
&lt;p>또한, © 는 &amp;ldquo;common global denominator&amp;quot;이기 때문에 이를 사용하는 것이 합리적이다.&lt;/p>
&lt;p>© 기호가 호불호가 있을 수 있지만, 실용적인 관점에서 볼 때 사실 그다지 중요하지 않은 부분이다. 위에서 설명했듯이 저작권은 자동으로 생성되기 때문에 어떤 기호를 쓰느냐에 따라 법적인 리스크가 달라지지는 않다.&lt;/p>
&lt;h2 id="왜-연락처를-남겨야-하는가-두-명-이상의-저자가-있을-때는-어떻게-하는가">왜 연락처를 남겨야 하는가? 두 명 이상의 저자가 있을 때는 어떻게 하는가?&lt;/h2>
&lt;p>연락처 정보는 저작권법에 의해 요구되는 것은 아니지만, 실용적인 이유로 매우 유용한다.&lt;/p>
&lt;p>사용자는 법적 또는 기술적인 문의를 위해 코드의 저자 또는 저작권 보유자에게 연락하고 싶을 수 있다. 코드가 어떻게 동작하는지 물어보거나 수정을 요청할 수도 있다. 라이선스 문제를 발견하여 문제를 해결할 수 있도록 도움을 주거나 별도의 라이선스를 요청해야 할 수도 있다. 이 모든 경우에 연락처 정보가 많은 도움이 된다.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>현재까지도 이메일이 자주 사용되는 연락 방법이기 때문에 저작권자의 이메일 주소를 제공하는 것이 가장 좋다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>저작권이 매우 분산되어 있거나 법인인 경우도 있다. 이런 경우에는 프로젝트 또는 법인 홈페이지의 URL을 제공하는 것이 더 합리적일 수 있다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>프로젝트에서 AUTHORS 또는 CONTRIBUTORS와 같은 파일에 저작권 보유자를 표시하는 경우 해당 파일을 가리키는 링크를 제공하는 것도 좋은 옵션이다.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="public-domain은-무엇인가">Public Domain은 무엇인가?&lt;/h2>
&lt;p>일반적으로 Public Domain은 저작권 기간이 만료된 저작물이지만, 까다로운 개념이어서 주의가 필요한다.&lt;/p>
&lt;p>일부 관할권 (예: 미국, 영국)에서는 저작권 보유자가 자신의 저작권을 포기하고 저작물을 Public Domain으로 기부할 수 있지만, 대부분의 관할권(예: 대부분의 EU 회원국)에서는 이런 행위가 불가능한다. 이는 관할권에 따라 저자가 자신의 저작물을 Public Domain으로 제공한다고 표시하였다고 하더라도 이것이 실제로 유효하게 하기 위한 법적 기준을 충족할 수 없고, 결국 여전히 저작물에 대한 저작권을 저작권자만 보유하고 있음을 의미한다.&lt;/p>
&lt;p>따라서 저작권과 라이선스를 진지하게 다루는 오픈소스 컴플라이언스 담당자들은 &amp;ldquo;this is public domain&amp;quot;이라는 표시를 매우 경계한다.&lt;/p>
&lt;p>저작권자는 이런 문제를 다음 두 가지 방법으로 완화할 수 있다.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>자신의 저작물에 대해 저작권을 포기하고 기부하고 싶을 때 &amp;ldquo;public domain&amp;quot;이라는 단어 대신, &lt;a href="https://spdx.org/licenses/CC0-1.0">CC0-1.0&lt;/a>과 같은 매우 허용적인 라이선스를 사용하라.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&amp;ldquo;SPDX-FileCopyrightText:&amp;rdquo; 필드에 이름과 연락처 정보를 남기세요. 사용자가 저작권자의 의도를 궁금해하거나, 어떤 불분명한 사항이 있으면 연락을 취하여 문제를 해결할 수 있게 하라.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="minified-javascript에서는-저작권-표시를-어떻게-하는가">Minified JavaScript에서는 저작권 표시를 어떻게 하는가?&lt;/h2>
&lt;p>최근의 Minifier는 주석을 제거하더라도 저작권 및 라이선스 정보는 보존하는 옵션을 제공한다. 코드를 minify 할 때 이런 옵션을 사용하여 저작권과 라이선스 정보를 유지하라.&lt;/p>
&lt;div class="alert alert-success" role="alert">
소스 코드를 다른 언어나 컴파일러 및 다른 형태로 변환하더라도 모두 저작권 보유자에게 독점적 권리가 있다. 따라서, minify 한 코드를 사용할 때에도 유효한 라이선스가 필요한다.
&lt;/div>
&lt;h2 id="all-rights-reserved-표시에는-어떤-문제가-있는가">&amp;ldquo;All rights reserved&amp;rdquo; 표시에는 어떤 문제가 있는가?&lt;/h2>
&lt;p>종종 저작권 표시에 &amp;ldquo;All rights reserved&amp;quot;라는 문장을 본 적이 있을 거다. 저작권법은 이런 표현을 요구하지 않다. 아마 음악 CD나 책에서 사용하는 걸 보고 단순히 모방해서 사용하는 게 아닐까 생각한다. 하지만, 오픈소스에서 이런 표현은 혼란을 야기시킵니다.&lt;/p>
&lt;p>&amp;ldquo;All rights reserved&amp;quot;는 명백히 오픈소스 라이선스와 모순된다. 오픈소스 라이선스는 누구나 코드를 사용, 연구, 공유 및 개선할 수 있는 권리를 제공한다. 반면에 &amp;ldquo;All rights reserved&amp;quot;는 이러한 모든 권리가 자신에게만 부여된다는 표현이다.&lt;/p>
&lt;p>&amp;ldquo;All right reserved&amp;quot;는 이와 같은 문제만 가져올 뿐, 어떤 이점도 가져오지 않기 때문에 오픈소스에서는 사용하지 말아야 한다.&lt;/p></description></item><item><title>Blog: SKT-AWS, 한국어 자연어처리기술 'KoGPT-2' 오픈소스로 공개</title><link>/blog/news/20200428-kogpt2/</link><pubDate>Tue, 28 Apr 2020 00:00:00 +0000</pubDate><guid>/blog/news/20200428-kogpt2/</guid><description>
&lt;p>SK텔레콤과 AWS는 양사 NLP 지식과 학습 경험을 기반으로 KoGPT-2 모델을 학습시켰다. SK텔레콤이 제공한 한국어 데이터셋과 AWS 서비스를 활용해 한국어 모델을 개발, 학습했다.&lt;/p>
&lt;p>KoGPT-2는 수정 MIT 라이선스(Modified MIT License) 아래 SKT AIX 센터 깃허브 저장소(&lt;a href="https://github.com/SKT-AI/KoGPT2">https://github.com/SKT-AI/KoGPT2&lt;/a>)에서 이용 가능하다.&lt;/p>
&lt;hr>
&lt;p>자세한 내용은 기사 원문에서 확인하세요. : &lt;a href="https://www.bloter.net/newsView/blt202004280010">https://www.bloter.net/newsView/blt202004280010&lt;/a>&lt;/p></description></item></channel></rss>