<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SKT Open Source – SK텔레콤 오픈소스 기여 절차</title><link>/guide/contribute/process/</link><description>Recent content in SK텔레콤 오픈소스 기여 절차 on SKT Open Source</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><atom:link href="/guide/contribute/process/index.xml" rel="self" type="application/rss+xml"/><item><title>Guide: 기여 제출 세부 절차</title><link>/guide/contribute/process/submit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/guide/contribute/process/submit/</guid><description>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">Reference&lt;/h4>
이 페이지는 &lt;a href="https://opensource.guide/">GitHub의 Open Source Guide&lt;/a>의 내용을 참고하였다.
&lt;/div>
&lt;p>이제 기여를 제출하는 방법을 알아보자. 일반적인 오픈소스 프로젝트에 기여 제출 방법과 절차는 다음과 같다.&lt;/p>
&lt;h2 id="1-이전-이력을-확인하라">1. 이전 이력을 확인하라&lt;/h2>
&lt;p>제출하려고 하는 기여가 이전에 다뤄진 이력이 있는지 확인하라. 프로젝트의 README, 이슈, 메일링 리스트를 살펴봐라. 모든 문서를 다 확인할 필요 없이, 몇 가지 키워드를 검색하면 쉽게 확인할 수 있다.&lt;/p>
&lt;p>이전 자료에서 관련 내용을 찾을 수 없다면 이슈를 열거나 Pull Request를 통해 커뮤니케이션을 시작할 단계이다. GitHub에서는 Issues와 Pull Request 기능을 제공한다.&lt;/p>
&lt;ul>
&lt;li>Issues : 대화나 토론을 시작할 수 있다.&lt;/li>
&lt;li>Pull Request : 문제에 대한 솔루션을 기여한다.&lt;/li>
&lt;/ul>
&lt;p>Issue 또는 Pull Request를 열기 전에 프로젝트가 제공하는 문서 (일반적으로 CONTRIBUTING 또는 README)를 확인하여 기여 절차 및 방법을 확인하라. 예를 들어 특정 템플릿을 따르도록 요구하거나, 사전 테스트를 요구할 수 있다.&lt;/p>
&lt;p>기여를 위한 작업을 시작하기 전에 먼저 Issues를 오픈해서 커뮤니티 구성원에게 먼저 어떤 작업을 하려고 하는지 알리는 것도 좋은 방법이다. 때에 따라 불필요한 작업을 진행하지 않도록 도움을 받을 수 있다.&lt;/p>
&lt;h2 id="2-issue를-생성하라">2. Issue를 생성하라&lt;/h2>
&lt;p>‌일반적으로 다음 상황에서 Issue를 생성한다.&lt;/p>
&lt;ul>
&lt;li>스스로 해결할 수 없는 오류 보고&lt;/li>
&lt;li>새로운 기능 또는 아이디어 제안&lt;/li>
&lt;li>커뮤니티 비전, 또는 정책에 대한 토론&lt;/li>
&lt;/ul>
&lt;div class="alert alert-success" role="alert">
&lt;h4 class="alert-heading">커뮤니케이션 Tip&lt;/h4>
&lt;ol>
&lt;li>다루고자 하는 오픈된 Issue가 있다면, 먼저 comment를 남겨서 다른 사람들이 중복으로 작업하지 않게 하라.&lt;/li>
&lt;li>오래전에 오픈된 Issue라면, 이미 해결된 것일 수 있다. 작업을 시작하기 전에 comment로 해결이 된 것은 아닌지 확인하라.&lt;/li>
&lt;li>Issue를 오픈했지만, 나중에 스스로 답을 알아낸 경우, 해당 Issue에 대한 답을 다른 사람도 알 수 있도록 comment를 작성하고 이슈를 close 하라. 이렇게 문서화하는 것조차도 프로젝트에 기여하는 것이다.&lt;/li>
&lt;/ol>
&lt;/div>
&lt;h2 id="3-pull-request를-생성하라">3. Pull Request를 생성하라&lt;/h2>
&lt;p>기여할 파일이 모두 준비가 되다면, Pull Request를 통해 기여를 제출하라.&lt;/p>
&lt;h3 id="pull-request-시기">Pull Request 시기&lt;/h3>
&lt;p>‌일반적으로 다음 상황에서 Pull Request를 생성한다. ‌&lt;/p>
&lt;ul>
&lt;li>사소한 수정 사항 제출 (예: 오타, 링크 오류 등)&lt;/li>
&lt;li>Issue에서 이미 논의가 된 사항에 대한 작업 시작&lt;/li>
&lt;/ul>
&lt;p>Pull Request는 작업이 완료된 이후에 해야 하는 것은 아니다. 일반적으로 Pull Request를 일찍 오픈하여 다른 사람들의 피드백을 받는 게 좋다. 제목 줄에 &amp;ldquo;WIP&amp;rdquo; (Work in Progress)라고 표시하여 아직 진행 중인 작업이라고 표시하고, 나중에 언제든지 더 많은 Commit을 추가할 수 있다.&lt;/p>
&lt;h3 id="github에서의-pull-request-절차">GitHub에서의 Pull Request 절차&lt;/h3>
&lt;p>GitHub에 있는 프로젝트라면 Pull Request를 제출 시 다음 사항을 참고할 수 있다.&lt;/p>
&lt;p>&lt;img src="./pr.png" alt="pr">&lt;/p>
&lt;h4 id="step-1-fork">Step 1. Fork&lt;/h4>
&lt;p>Upstream Repository를 자신의 GitHub 계정으로 Fork 한다.&lt;/p>
&lt;h4 id="step-2-clone">Step 2. Clone&lt;/h4>
&lt;p>Fork한 Repository를 자산의 Local working directory로 Clone 한다.&lt;/p>
&lt;pre>&lt;code>$ mkdir -p $working_dir
$ cd $working_dir
$ git clone https://github.com/$user/[repository]
&lt;/code>&lt;/pre>&lt;p>Upstream Repository를 Remote에 추가한다.&lt;/p>
&lt;pre>&lt;code>$ cd [repository]
$ git remote add upstream https://github.com/[upstream]/[repository]
# Confirm that your remotes make sense:
$ git remote -v
&lt;/code>&lt;/pre>&lt;h4 id="step-3-create-a-branch">Step 3. Create a branch&lt;/h4>
&lt;p>먼저 main branch를 fetch와 rebase하여 최신 상태로 유지한다.&lt;/p>
&lt;pre>&lt;code>$ cd $working_dir/[repository]
$ git fetch upstream
$ git checkout main
$ git rebase upstream/main
&lt;/code>&lt;/pre>&lt;p>그리고 개발용 branch (myfeature)를 생성한다.&lt;/p>
&lt;pre>&lt;code>$ git checkout -b myfeature
&lt;/code>&lt;/pre>&lt;h4 id="step-4-keep-your-branch-in-sync">Step 4. Keep your branch in sync&lt;/h4>
&lt;p>Branch를 fetch와 rebase하여 최신 상태로 유지한다.&lt;/p>
&lt;pre>&lt;code># While on your myfeature branch
$ git fetch upstream
$ git rebase upstream/main
&lt;/code>&lt;/pre>&lt;p>그 상태에서 code 작업을 한다.&lt;/p>
&lt;h4 id="step-5-commit">Step 5. Commit&lt;/h4>
&lt;p>수정 사항을 commit 한다.&lt;/p>
&lt;pre>&lt;code>$ git commit -a -m '[commit message]'
&lt;/code>&lt;/pre>&lt;h4 id="step-6-push">Step 6. Push&lt;/h4>
&lt;p>myfeature branch의 수정 사항을 자신의 GitHub Repository에 Push한다.&lt;/p>
&lt;pre>&lt;code>git push -f origin myfeature
&lt;/code>&lt;/pre>&lt;h4 id="step-7-create-a-pull-request">Step 7. Create a pull request&lt;/h4>
&lt;p>GitHub에서 자신의 Repository에 가면 Compare &amp;amp; pull request 버튼이 활성화 된 것을 볼 수 있다. 이를 눌러서 Pull Request를 생성한다.&lt;/p>
&lt;p>이후 Upstream Repository의 관리자는 요청된 Pull Request를 검토하여 Merge 여부를 결정한다.&lt;/p>
&lt;div class="alert alert-success" role="alert">
&lt;h4 class="alert-heading">참고 자료&lt;/h4>
&lt;ul>
&lt;li>Pull Request가 처음이라면 &lt;a href="http://makeapullrequest.com/">Make a Pull Request&lt;/a>(비디오 강의)를 참고하라. 또한, &lt;a href="https://github.com/Roshanjossey/first-contributions">First Contributions&lt;/a> 에서 Pull Request 만드는 것을 연습할 수 있다.&lt;/li>
&lt;li>참고로, Kubernetes는 다음과 같은 Github workflow에 대한 설명 문서를 제공한다. : &lt;a href="https://github.com/kubernetes/community/blob/master/contributors/guide/github-workflow.md">github_workflow.md&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;h2 id="4-feedback을-받아라">4. Feedback을 받아라&lt;/h2>
&lt;p>기여를 제출하면 프로젝트로부터 Feedback을 받게 됩니다. 일반적으로 Feedback은 개선이나 변경 사항이 어떤 방식으로 동작하는지, 왜 그런 방식을 채택하였는지 등에 대한 설명을 요구한다. 이 Feedback은 때로는 대응하기 어려울 수도 있지만, 기여의 수준을 높이는 과정이라고 받아들이는 것이 좋다.&lt;/p>
&lt;p>Feedback은 보통 다음 네 가지 중 하나에 해당한다.&lt;/p>
&lt;h3 id="1-응답이-없다">(1) 응답이 없다?&lt;/h3>
&lt;p>기여하기 전에 프로젝트가 활발한지 먼저 &lt;a href="/guide/contribute/background/good-project">확인&lt;/a>하는 게 좋다. 어느 정도 활발한 프로젝트에서도 기여에 대해 응답을 받지 못할 수도 있다.&lt;/p>
&lt;p>일주일 이상 응답을 받지 못한 경우, 동일한 스레드에 정중하게 누군가에게 검토를 요청하는 것이 좋다. 적절한 사람의 이름을 알고 있다면 @-멘션 기능을 이용하라.&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Warning&lt;/h4>
단, 개인적으로 연락하지는 마라. 오픈소스 프로젝트에서 공개 커뮤니케이션은 필수이다.
&lt;/div>
&lt;p>그럼에도 여러 가지 이유가 있겠지만 아무도 반응하지 않을 수도 있다. 썩 좋은 기분은 아니지만 낙담할 필요는 없다. 이는 누구에게나 일어날 수 있는 일이다. 기여할 수 있는 다른 방법이나 다른 프로젝트를 찾아보라.‌&lt;/p>
&lt;h3 id="2-수정을-요청한다">(2) 수정을 요청한다?&lt;/h3>
&lt;p>아이디어에 대한 설명이나 코드를 수정하라는 요청을 받는 것은 일반적이다. 이렇게 누군가 수정을 요청했다면 바로 응답하라. 그는 자기 시간을 내서 우리 기여를 검토했다.&lt;/p>
&lt;p>‌PR을 오픈한 상태로 응답하지 않고 남겨두는건 결례이다. 더 이상 문제를 해결할 여건이 아닌 경우라면, Maintainer에게 더 진행할 수 없다고 알리세요. 그렇게 PR을 Close 하거나 다른 사람이 인수하여 추가로 진행할 수도 있다.&lt;/p>
&lt;h3 id="3-거절됐다">(3) 거절됐다?&lt;/h3>
&lt;p>우리 기여는 결국 수락될 수도 있고, 수락되지 않을 수도 있다. 수락되지 않은 이유가 잘 이해되지 않을 경우, Maintainer에게 설명을 요청하는 것도 합리적이다. 그러나 이것이 그들의 결정임을 존중해야 한다. 논쟁하거나 적대적으로 행동하지 마라. 끝까지 이견이 조율되지 않으면, 언제든지 Fork 하여 자신의 프로젝트에 작업할 수 있다.&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Warning&lt;/h4>
코드가 승인되기까지 여러 차례의 반복적인 수정 과정을 거쳐야 할 수도 있으며, 때에 따라서는 거부될 수도 있다. 이때는 낙심하거나 포기하기보다는 거부된 이유에 대해 자세히 알아보고, 다음 기여가 향상되는 기회로 삼는 것이 좋다.
&lt;/div>
&lt;h3 id="4-수락됐다">(4) 수락됐다!‌&lt;/h3>
&lt;p>축하한다! 드디어 오픈소스 기여에 성공했다.&lt;/p></description></item></channel></rss>